{"ast":null,"code":"/**\n * @module ol/dom\n */\n\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(opt_width, opt_height) {\n  var canvas = /** @type {HTMLCanvasElement} */document.createElement('canvas');\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n  return (/** @type {CanvasRenderingContext2D} */canvas.getContext('2d')\n  );\n}\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  var width = element.offsetWidth;\n  var style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n  return width;\n}\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  var height = element.offsetHeight;\n  var style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  var parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}","map":{"version":3,"sources":["../../src/ol/dom.js"],"names":["const","let"],"mappings":"AAAA;;;;;;;;;;AAWA,OAAO,SAAS,qBAAqB,CAAC,SAAS,EAAE,UAAU,EAAE;EAC3DA,IAAM,MAAM,GAAA,gCAAqC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAE;EAClF,IAAI,SAAS,EAAE;IACb,MAAM,CAAC,KAAK,GAAG,SAAS;EACzB;EACD,IAAI,UAAU,EAAE;IACd,MAAM,CAAC,MAAM,GAAG,UAAU;EAC3B;EACD,OAAA,wCAAgD,MAAM,CAAC,UAAU,CAAC,IAAI;EAAC;AACxE;;;;;;;;;AAUD,OAAO,SAAS,UAAU,CAAC,OAAO,EAAE;EAClCC,IAAI,KAAK,GAAG,OAAO,CAAC,WAAW;EAC/BD,IAAM,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC;EACvC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC;EAEzE,OAAO,KAAK;AACb;;;;;;;;;AAUD,OAAO,SAAS,WAAW,CAAC,OAAO,EAAE;EACnCC,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY;EACjCD,IAAM,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC;EACvC,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC;EAE1E,OAAO,MAAM;AACd;;;;;;AAMD,OAAO,SAAS,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE;EAC5CA,IAAM,MAAM,GAAG,OAAO,CAAC,UAAU;EACjC,IAAI,MAAM,EAAE;IACV,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC;EACtC;AACF;;;;;;AAMD,OAAO,SAAS,UAAU,CAAC,IAAI,EAAE;EAC/B,OAAO,IAAI,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI;AAC1E;;;;;AAKD,OAAO,SAAS,cAAc,CAAC,IAAI,EAAE;EACnC,OAAO,IAAI,CAAC,SAAS,EAAE;IACrB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC;EACjC;AACF","sourcesContent":["/**\n * @module ol/dom\n */\n\n\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number=} opt_width Canvas width.\n * @param {number=} opt_height Canvas height.\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(opt_width, opt_height) {\n  const canvas = /** @type {HTMLCanvasElement} */ (document.createElement('canvas'));\n  if (opt_width) {\n    canvas.width = opt_width;\n  }\n  if (opt_height) {\n    canvas.height = opt_height;\n  }\n  return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n}\n\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @returns {Node} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}