{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay) {\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : async;\n  var absoluteDelay = isDate(delay);\n  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return function (source) {\n    return source.lift(new DelayOperator(delayFor, scheduler));\n  };\n}\nvar DelayOperator = /*#__PURE__*/function () {\n  function DelayOperator(delay, scheduler) {\n    _classCallCheck(this, DelayOperator);\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n  _createClass(DelayOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n  }]);\n  return DelayOperator;\n}();\nvar DelaySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(DelaySubscriber, _Subscriber);\n  var _super = _createSuper(DelaySubscriber);\n  function DelaySubscriber(destination, delay, scheduler) {\n    var _this;\n    _classCallCheck(this, DelaySubscriber);\n    _this = _super.call(this, destination);\n    _this.delay = delay;\n    _this.scheduler = scheduler;\n    _this.queue = [];\n    _this.active = false;\n    _this.errored = false;\n    return _this;\n  }\n  _createClass(DelaySubscriber, [{\n    key: \"_schedule\",\n    value: function _schedule(scheduler) {\n      this.active = true;\n      var destination = this.destination;\n      destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n        source: this,\n        destination: this.destination,\n        scheduler: scheduler\n      }));\n    }\n  }, {\n    key: \"scheduleNotification\",\n    value: function scheduleNotification(notification) {\n      if (this.errored === true) {\n        return;\n      }\n      var scheduler = this.scheduler;\n      var message = new DelayMessage(scheduler.now() + this.delay, notification);\n      this.queue.push(message);\n      if (this.active === false) {\n        this._schedule(scheduler);\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      this.scheduleNotification(Notification.createNext(value));\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.errored = true;\n      this.queue = [];\n      this.destination.error(err);\n      this.unsubscribe();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.scheduleNotification(Notification.createComplete());\n      this.unsubscribe();\n    }\n  }], [{\n    key: \"dispatch\",\n    value: function dispatch(state) {\n      var source = state.source;\n      var queue = source.queue;\n      var scheduler = state.scheduler;\n      var destination = state.destination;\n      while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n        queue.shift().notification.observe(destination);\n      }\n      if (queue.length > 0) {\n        var _delay = Math.max(0, queue[0].time - scheduler.now());\n        this.schedule(state, _delay);\n      } else {\n        this.unsubscribe();\n        source.active = false;\n      }\n    }\n  }]);\n  return DelaySubscriber;\n}(Subscriber);\nvar DelayMessage = /*#__PURE__*/_createClass(function DelayMessage(time, notification) {\n  _classCallCheck(this, DelayMessage);\n  this.time = time;\n  this.notification = notification;\n});","map":{"version":3,"sources":["../../../src/internal/operators/delay.ts"],"names":[],"mappings":"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","sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n    const absoluteDelay = isDate(delay);\n    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return (source) => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n}\nclass DelaySubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    static dispatch(state) {\n        const source = state.source;\n        const queue = source.queue;\n        const scheduler = state.scheduler;\n        const destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            const delay = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    }\n    _schedule(scheduler) {\n        this.active = true;\n        const destination = this.destination;\n        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    }\n    scheduleNotification(notification) {\n        if (this.errored === true) {\n            return;\n        }\n        const scheduler = this.scheduler;\n        const message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    }\n    _next(value) {\n        this.scheduleNotification(Notification.createNext(value));\n    }\n    _error(err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleNotification(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nclass DelayMessage {\n    constructor(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n}\n//# sourceMappingURL=delay.js.map"]},"metadata":{},"sourceType":"module"}