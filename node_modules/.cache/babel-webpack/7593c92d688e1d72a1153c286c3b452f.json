{"ast":null,"code":"/**\n * @module ol/layer/Base\n */\nimport { abstract } from '../util.js';\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport { clamp } from '../math.js';\nimport { assign } from '../obj.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nvar BaseLayer = /*@__PURE__*/function (BaseObject) {\n  function BaseLayer(options) {\n    BaseObject.call(this);\n\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = assign({}, options);\n    properties[LayerProperty.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n    properties[LayerProperty.VISIBLE] = options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n\n    /**\n     * The layer type.\n     * @type {import(\"../LayerType.js\").default}\n     * @protected;\n     */\n    this.type;\n  }\n  if (BaseObject) BaseLayer.__proto__ = BaseObject;\n  BaseLayer.prototype = Object.create(BaseObject && BaseObject.prototype);\n  BaseLayer.prototype.constructor = BaseLayer;\n\n  /**\n   * Get the layer type (used when creating a layer renderer).\n   * @return {import(\"../LayerType.js\").default} The layer type.\n   */\n  BaseLayer.prototype.getType = function getType() {\n    return this.type;\n  };\n\n  /**\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  BaseLayer.prototype.getLayerState = function getLayerState() {\n    /** @type {import(\"./Layer.js\").State} */\n    var state = this.state_ || /** @type {?} */{\n      layer: this,\n      managed: true\n    };\n    state.opacity = clamp(this.getOpacity(), 0, 1);\n    state.sourceState = this.getSourceState();\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = this.getZIndex() || 0;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    this.state_ = state;\n    return state;\n  };\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>=} opt_array Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  BaseLayer.prototype.getLayersArray = function getLayersArray(opt_array) {\n    return abstract();\n  };\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>=} opt_states Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  BaseLayer.prototype.getLayerStatesArray = function getLayerStatesArray(opt_states) {\n    return abstract();\n  };\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getExtent = function getExtent() {\n    return (/** @type {import(\"../extent.js\").Extent|undefined} */this.get(LayerProperty.EXTENT)\n    );\n  };\n\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMaxResolution = function getMaxResolution() {\n    return (/** @type {number} */this.get(LayerProperty.MAX_RESOLUTION)\n    );\n  };\n\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getMinResolution = function getMinResolution() {\n    return (/** @type {number} */this.get(LayerProperty.MIN_RESOLUTION)\n    );\n  };\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getOpacity = function getOpacity() {\n    return (/** @type {number} */this.get(LayerProperty.OPACITY)\n    );\n  };\n\n  /**\n   * @abstract\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  BaseLayer.prototype.getSourceState = function getSourceState() {\n    return abstract();\n  };\n\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getVisible = function getVisible() {\n    return (/** @type {boolean} */this.get(LayerProperty.VISIBLE)\n    );\n  };\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.getZIndex = function getZIndex() {\n    return (/** @type {number} */this.get(LayerProperty.Z_INDEX)\n    );\n  };\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setExtent = function setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  };\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMaxResolution = function setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  };\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setMinResolution = function setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  };\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setOpacity = function setOpacity(opacity) {\n    this.set(LayerProperty.OPACITY, opacity);\n  };\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setVisible = function setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  };\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  BaseLayer.prototype.setZIndex = function setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  };\n  return BaseLayer;\n}(BaseObject);\nexport default BaseLayer;","map":{"version":3,"sources":["../../../src/ol/layer/Base.js"],"names":["super","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/layer/Base\n */\nimport {abstract} from '../util.js';\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {clamp} from '../math.js';\nimport {assign} from '../obj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n\n    super();\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = assign({}, options);\n    properties[LayerProperty.OPACITY] =\n       options.opacity !== undefined ? options.opacity : 1;\n    properties[LayerProperty.VISIBLE] =\n       options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n       options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n       options.minResolution !== undefined ? options.minResolution : 0;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n\n    /**\n     * The layer type.\n     * @type {import(\"../LayerType.js\").default}\n     * @protected;\n     */\n    this.type;\n\n  }\n\n  /**\n   * Get the layer type (used when creating a layer renderer).\n   * @return {import(\"../LayerType.js\").default} The layer type.\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState() {\n    /** @type {import(\"./Layer.js\").State} */\n    const state = this.state_ || /** @type {?} */ ({\n      layer: this,\n      managed: true\n    });\n    state.opacity = clamp(this.getOpacity(), 0, 1);\n    state.sourceState = this.getSourceState();\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = this.getZIndex() || 0;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>=} opt_array Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(opt_array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>=} opt_states Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(opt_states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return (\n      /** @type {import(\"../extent.js\").Extent|undefined} */ (this.get(LayerProperty.EXTENT))\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n}\n\n\nexport default BaseLayer;\n"]},"metadata":{},"sourceType":"module"}