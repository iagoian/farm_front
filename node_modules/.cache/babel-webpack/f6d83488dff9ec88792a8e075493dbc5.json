{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport { getUid } from '../util.js';\nimport rbush from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { isEmpty } from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = function RBush(opt_maxEntries) {\n  /**\n   * @private\n   */\n  this.rbush_ = rbush(opt_maxEntries, undefined);\n\n  /**\n   * A mapping between the objects added to this rbush wrapper\n   * and the objects that are actually added to the internal rbush.\n   * @private\n   * @type {Object<string, Entry>}\n   */\n  this.items_ = {};\n};\n\n/**\n * Insert a value into the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.insert = function insert(extent, value) {\n  /** @type {Entry} */\n  var item = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3],\n    value: value\n  };\n  this.rbush_.insert(item);\n  this.items_[getUid(value)] = item;\n};\n\n/**\n * Bulk-insert values into the RBush.\n * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n * @param {Array<T>} values Values.\n */\nRBush.prototype.load = function load(extents, values) {\n  var items = new Array(values.length);\n  for (var i = 0, l = values.length; i < l; i++) {\n    var extent = extents[i];\n    var value = values[i];\n\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    items[i] = item;\n    this.items_[getUid(value)] = item;\n  }\n  this.rbush_.load(items);\n};\n\n/**\n * Remove a value from the RBush.\n * @param {T} value Value.\n * @return {boolean} Removed.\n */\nRBush.prototype.remove = function remove(value) {\n  var uid = getUid(value);\n\n  // get the object in which the value was wrapped when adding to the\n  // internal rbush. then use that object to do the removal.\n  var item = this.items_[uid];\n  delete this.items_[uid];\n  return this.rbush_.remove(item) !== null;\n};\n\n/**\n * Update the extent of a value in the RBush.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {T} value Value.\n */\nRBush.prototype.update = function update(extent, value) {\n  var item = this.items_[getUid(value)];\n  var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n  if (!equals(bbox, extent)) {\n    this.remove(value);\n    this.insert(extent, value);\n  }\n};\n\n/**\n * Return all values in the RBush.\n * @return {Array<T>} All.\n */\nRBush.prototype.getAll = function getAll() {\n  var items = this.rbush_.all();\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n\n/**\n * Return all values in the given extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @return {Array<T>} All in extent.\n */\nRBush.prototype.getInExtent = function getInExtent(extent) {\n  /** @type {Entry} */\n  var bbox = {\n    minX: extent[0],\n    minY: extent[1],\n    maxX: extent[2],\n    maxY: extent[3]\n  };\n  var items = this.rbush_.search(bbox);\n  return items.map(function (item) {\n    return item.value;\n  });\n};\n\n/**\n * Calls a callback function with each value in the tree.\n * If the callback returns a truthy value, this value is returned without\n * checking the rest of the tree.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach = function forEach(callback, opt_this) {\n  return this.forEach_(this.getAll(), callback, opt_this);\n};\n\n/**\n * Calls a callback function with each value in the provided extent.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEachInExtent = function forEachInExtent(extent, callback, opt_this) {\n  return this.forEach_(this.getInExtent(extent), callback, opt_this);\n};\n\n/**\n * @param {Array<T>} values Values.\n * @param {function(this: S, T): *} callback Callback.\n * @param {S=} opt_this The object to use as `this` in `callback`.\n * @private\n * @return {*} Callback return value.\n * @template S\n */\nRBush.prototype.forEach_ = function forEach_(values, callback, opt_this) {\n  var result;\n  for (var i = 0, l = values.length; i < l; i++) {\n    result = callback.call(opt_this, values[i]);\n    if (result) {\n      return result;\n    }\n  }\n  return result;\n};\n\n/**\n * @return {boolean} Is empty.\n */\nRBush.prototype.isEmpty = function isEmpty$1() {\n  return isEmpty(this.items_);\n};\n\n/**\n * Remove all values from the RBush.\n */\nRBush.prototype.clear = function clear() {\n  this.rbush_.clear();\n  this.items_ = {};\n};\n\n/**\n * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n * @return {import(\"../extent.js\").Extent} Extent.\n */\nRBush.prototype.getExtent = function getExtent(opt_extent) {\n  var data = this.rbush_.toJSON();\n  return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n};\n\n/**\n * @param {RBush} rbush R-Tree.\n */\nRBush.prototype.concat = function concat(rbush) {\n  this.rbush_.load(rbush.rbush_.all());\n  for (var i in rbush.items_) {\n    this.items_[i] = rbush.items_[i];\n  }\n};\nexport default RBush;","map":{"version":3,"sources":["../../../src/ol/structs/RBush.js"],"names":["const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport {getUid} from '../util.js';\nimport rbush from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX\n * @property {number} minY\n * @property {number} maxX\n * @property {number} maxY\n * @property {Object} [value]\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nclass RBush {\n  /**\n   * @param {number=} opt_maxEntries Max entries.\n   */\n  constructor(opt_maxEntries) {\n\n    /**\n     * @private\n     */\n    this.rbush_ = rbush(opt_maxEntries, undefined);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function(item) {\n      return item.value;\n    });\n  }\n\n\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function(item) {\n      return item.value;\n    });\n  }\n\n\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEach(callback, opt_this) {\n    return this.forEach_(this.getAll(), callback, opt_this);\n  }\n\n\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEachInExtent(extent, callback, opt_this) {\n    return this.forEach_(this.getInExtent(extent), callback, opt_this);\n  }\n\n\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(this: S, T): *} callback Callback.\n   * @param {S=} opt_this The object to use as `this` in `callback`.\n   * @private\n   * @return {*} Callback return value.\n   * @template S\n   */\n  forEach_(values, callback, opt_this) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback.call(opt_this, values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n\n  /**\n   * Remove all values from the RBush.\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n\n  /**\n   * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getExtent(opt_extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  }\n\n\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n\n}\n\n\nexport default RBush;\n"]},"metadata":{},"sourceType":"module"}