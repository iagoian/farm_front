{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n  return function windowWhenOperatorFunction(source) {\n    return source.lift(new WindowOperator(closingSelector));\n  };\n}\nvar WindowOperator = /*#__PURE__*/function () {\n  function WindowOperator(closingSelector) {\n    _classCallCheck(this, WindowOperator);\n    this.closingSelector = closingSelector;\n  }\n  _createClass(WindowOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    }\n  }]);\n  return WindowOperator;\n}();\nvar WindowSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(WindowSubscriber, _OuterSubscriber);\n  var _super = _createSuper(WindowSubscriber);\n  function WindowSubscriber(destination, closingSelector) {\n    var _this;\n    _classCallCheck(this, WindowSubscriber);\n    _this = _super.call(this, destination);\n    _this.destination = destination;\n    _this.closingSelector = closingSelector;\n    _this.openWindow();\n    return _this;\n  }\n  _createClass(WindowSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n      this.openWindow(innerSub);\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(error) {\n      this._error(error);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      this.openWindow(innerSub);\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      this.window.next(value);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.window.error(err);\n      this.destination.error(err);\n      this.unsubscribeClosingNotification();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.window.complete();\n      this.destination.complete();\n      this.unsubscribeClosingNotification();\n    }\n  }, {\n    key: \"unsubscribeClosingNotification\",\n    value: function unsubscribeClosingNotification() {\n      if (this.closingNotification) {\n        this.closingNotification.unsubscribe();\n      }\n    }\n  }, {\n    key: \"openWindow\",\n    value: function openWindow() {\n      var innerSub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (innerSub) {\n        this.remove(innerSub);\n        innerSub.unsubscribe();\n      }\n      var prevWindow = this.window;\n      if (prevWindow) {\n        prevWindow.complete();\n      }\n      var window = this.window = new Subject();\n      this.destination.next(window);\n      var closingNotifier;\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector();\n      } catch (e) {\n        this.destination.error(e);\n        this.window.error(e);\n        return;\n      }\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }]);\n  return WindowSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/windowWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nclass WindowOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass WindowSubscriber extends OuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    notifyNext(_outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    }\n    notifyError(error) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        this.openWindow(innerSub);\n    }\n    _next(value) {\n        this.window.next(value);\n    }\n    _error(err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    }\n    _complete() {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    }\n    unsubscribeClosingNotification() {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    }\n    openWindow(innerSub = null) {\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        const prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        const window = this.window = new Subject();\n        this.destination.next(window);\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (e) {\n            this.destination.error(e);\n            this.window.error(e);\n            return;\n        }\n        this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n}\n//# sourceMappingURL=windowWhen.js.map"]},"metadata":{},"sourceType":"module"}