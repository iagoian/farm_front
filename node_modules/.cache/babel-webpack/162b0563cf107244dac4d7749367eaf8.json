{"ast":null,"code":"/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport { getUid } from '../../util.js';\nimport LayerType from '../../LayerType.js';\nimport ViewHint from '../../ViewHint.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { listen, unlisten } from '../../events.js';\nimport EventType from '../../events/EventType.js';\nimport rbush from 'rbush';\nimport { buffer, createEmpty, containsExtent, getWidth } from '../../extent.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { labelCache, rotateAtOffset } from '../../render/canvas.js';\nimport CanvasReplayGroup from '../../render/canvas/ReplayGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /*@__PURE__*/function (CanvasLayerRenderer) {\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    CanvasLayerRenderer.call(this, vectorLayer);\n\n    /**\n     * Declutter tree.\n     * @private\n     */\n    this.declutterTree_ = vectorLayer.getDeclutter() ? rbush(9, undefined) : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.dirty_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ReplayGroup.js\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = createCanvasContext2D();\n    listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n  }\n  if (CanvasLayerRenderer) CanvasVectorLayerRenderer.__proto__ = CanvasLayerRenderer;\n  CanvasVectorLayerRenderer.prototype = Object.create(CanvasLayerRenderer && CanvasLayerRenderer.prototype);\n  CanvasVectorLayerRenderer.prototype.constructor = CanvasVectorLayerRenderer;\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.disposeInternal = function disposeInternal() {\n    unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n    CanvasLayerRenderer.prototype.disposeInternal.call(this);\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   */\n  CanvasVectorLayerRenderer.prototype.compose = function compose(context, frameState, layerState) {\n    var extent = frameState.extent;\n    var pixelRatio = frameState.pixelRatio;\n    var skippedFeatureUids = layerState.managed ? frameState.skippedFeatureUids : {};\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var rotation = viewState.rotation;\n    var projectionExtent = projection.getExtent();\n    var vectorSource = /** @type {import(\"../../source/Vector.js\").default} */this.getLayer().getSource();\n    var transform = this.getTransform(frameState, 0);\n\n    // clipped rendering if layer extent is set\n    var clipExtent = layerState.extent;\n    var clipped = clipExtent !== undefined;\n    if (clipped) {\n      this.clip(context, frameState, /** @type {import(\"../../extent.js\").Extent} */clipExtent);\n    }\n    var replayGroup = this.replayGroup_;\n    if (replayGroup && !replayGroup.isEmpty()) {\n      if (this.declutterTree_) {\n        this.declutterTree_.clear();\n      }\n      var layer = /** @type {import(\"../../layer/Vector.js\").default} */this.getLayer();\n      var drawOffsetX = 0;\n      var drawOffsetY = 0;\n      var replayContext;\n      var transparentLayer = layerState.opacity !== 1;\n      var hasRenderListeners = layer.hasListener(RenderEventType.RENDER);\n      if (transparentLayer || hasRenderListeners) {\n        var drawWidth = context.canvas.width;\n        var drawHeight = context.canvas.height;\n        if (rotation) {\n          var drawSize = Math.round(Math.sqrt(drawWidth * drawWidth + drawHeight * drawHeight));\n          drawOffsetX = (drawSize - drawWidth) / 2;\n          drawOffsetY = (drawSize - drawHeight) / 2;\n          drawWidth = drawHeight = drawSize;\n        }\n        // resize and clear\n        this.context.canvas.width = drawWidth;\n        this.context.canvas.height = drawHeight;\n        replayContext = this.context;\n      } else {\n        replayContext = context;\n      }\n      var alpha = replayContext.globalAlpha;\n      if (!transparentLayer) {\n        // for performance reasons, context.save / context.restore is not used\n        // to save and restore the transformation matrix and the opacity.\n        // see http://jsperf.com/context-save-restore-versus-variable\n        replayContext.globalAlpha = layerState.opacity;\n      }\n      if (replayContext != context) {\n        replayContext.translate(drawOffsetX, drawOffsetY);\n      }\n      var viewHints = frameState.viewHints;\n      var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n      var width = frameState.size[0] * pixelRatio;\n      var height = frameState.size[1] * pixelRatio;\n      rotateAtOffset(replayContext, -rotation, width / 2, height / 2);\n      replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);\n      if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n        var startX = extent[0];\n        var worldWidth = getWidth(projectionExtent);\n        var world = 0;\n        var offsetX;\n        while (startX < projectionExtent[0]) {\n          --world;\n          offsetX = worldWidth * world;\n          transform = this.getTransform(frameState, offsetX);\n          replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);\n          startX += worldWidth;\n        }\n        world = 0;\n        startX = extent[2];\n        while (startX > projectionExtent[2]) {\n          ++world;\n          offsetX = worldWidth * world;\n          transform = this.getTransform(frameState, offsetX);\n          replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);\n          startX -= worldWidth;\n        }\n      }\n      rotateAtOffset(replayContext, rotation, width / 2, height / 2);\n      if (hasRenderListeners) {\n        this.dispatchRenderEvent(replayContext, frameState, transform);\n      }\n      if (replayContext != context) {\n        if (transparentLayer) {\n          var mainContextAlpha = context.globalAlpha;\n          context.globalAlpha = layerState.opacity;\n          context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);\n          context.globalAlpha = mainContextAlpha;\n        } else {\n          context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);\n        }\n        replayContext.translate(-drawOffsetX, -drawOffsetY);\n      }\n      if (!transparentLayer) {\n        replayContext.globalAlpha = alpha;\n      }\n    }\n    if (clipped) {\n      context.restore();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.composeFrame = function composeFrame(frameState, layerState, context) {\n    var transform = this.getTransform(frameState, 0);\n    this.preCompose(context, frameState, transform);\n    this.compose(context, frameState, layerState);\n    this.postCompose(context, frameState, layerState, transform);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    if (!this.replayGroup_) {\n      return undefined;\n    } else {\n      var resolution = frameState.viewState.resolution;\n      var rotation = frameState.viewState.rotation;\n      var layer = /** @type {import(\"../../layer/Vector.js\").default} */this.getLayer();\n      /** @type {!Object<string, boolean>} */\n      var features = {};\n      var result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @return {?} Callback result.\n       */\n      function (feature) {\n        var key = getUid(feature);\n        if (!(key in features)) {\n          features[key] = true;\n          return callback.call(thisArg, feature, layer);\n        }\n      }, null);\n      return result;\n    }\n  };\n\n  /**\n   * @param {import(\"../../events/Event.js\").default} event Event.\n   */\n  CanvasVectorLayerRenderer.prototype.handleFontsChanged_ = function handleFontsChanged_(event) {\n    var layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  };\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasVectorLayerRenderer.prototype.prepareFrame = function prepareFrame(frameState, layerState) {\n    var vectorLayer = /** @type {import(\"../../layer/Vector.js\").default} */this.getLayer();\n    var vectorSource = /** @type {import(\"../../source/Vector.js\").default} */vectorLayer.getSource();\n    var animating = frameState.viewHints[ViewHint.ANIMATING];\n    var interacting = frameState.viewHints[ViewHint.INTERACTING];\n    var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n    if (!this.dirty_ && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      return true;\n    }\n    var frameStateExtent = frameState.extent;\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var resolution = viewState.resolution;\n    var pixelRatio = frameState.pixelRatio;\n    var vectorLayerRevision = vectorLayer.getRevision();\n    var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n    var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    var projectionExtent = viewState.projection.getExtent();\n    if (vectorSource.getWrapX() && viewState.projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      var worldWidth = getWidth(projectionExtent);\n      var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n    }\n    if (!this.dirty_ && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.renderedExtent_, extent)) {\n      this.replayGroupChanged = false;\n      return true;\n    }\n    this.replayGroup_ = null;\n    this.dirty_ = false;\n    var replayGroup = new CanvasReplayGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio, vectorSource.getOverlaps(), this.declutterTree_, vectorLayer.getRenderBuffer());\n    vectorSource.loadFeatures(extent, resolution, projection);\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    var render = function (feature) {\n      var styles;\n      var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        var dirty = this.renderFeature(feature, resolution, pixelRatio, styles, replayGroup);\n        this.dirty_ = this.dirty_ || dirty;\n      }\n    }.bind(this);\n    if (vectorLayerRenderOrder) {\n      /** @type {Array<import(\"../../Feature.js\").default>} */\n      var features = [];\n      vectorSource.forEachFeatureInExtent(extent,\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       */\n      function (feature) {\n        features.push(feature);\n      });\n      features.sort(vectorLayerRenderOrder);\n      for (var i = 0, ii = features.length; i < ii; ++i) {\n        render(features[i]);\n      }\n    } else {\n      vectorSource.forEachFeatureInExtent(extent, render);\n    }\n    replayGroup.finish();\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = extent;\n    this.replayGroup_ = replayGroup;\n    this.replayGroupChanged = true;\n    return true;\n  };\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/ReplayGroup.js\").default} replayGroup Replay group.\n   * @return {boolean} `true` if an image is loading.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFeature = function renderFeature$1(feature, resolution, pixelRatio, styles, replayGroup) {\n    if (!styles) {\n      return false;\n    }\n    var loading = false;\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(replayGroup, feature, styles[i], getSquaredRenderTolerance(resolution, pixelRatio), this.handleStyleImageChange_, this) || loading;\n      }\n    } else {\n      loading = renderFeature(replayGroup, feature, styles, getSquaredRenderTolerance(resolution, pixelRatio), this.handleStyleImageChange_, this);\n    }\n    return loading;\n  };\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\n\n/**\n * Determine if this renderer handles the provided layer.\n * @param {import(\"../../layer/Layer.js\").default} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\nCanvasVectorLayerRenderer['handles'] = function (layer) {\n  return layer.getType() === LayerType.VECTOR;\n};\n\n/**\n * Create a layer renderer.\n * @param {import(\"../Map.js\").default} mapRenderer The map renderer.\n * @param {import(\"../../layer/Layer.js\").default} layer The layer to be rendererd.\n * @return {CanvasVectorLayerRenderer} The layer renderer.\n */\nCanvasVectorLayerRenderer['create'] = function (mapRenderer, layer) {\n  return new CanvasVectorLayerRenderer( /** @type {import(\"../../layer/Vector.js\").default} */layer);\n};\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"sources":["../../../../src/ol/renderer/canvas/VectorLayer.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport {getUid} from '../../util.js';\nimport LayerType from '../../LayerType.js';\nimport ViewHint from '../../ViewHint.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {listen, unlisten} from '../../events.js';\nimport EventType from '../../events/EventType.js';\nimport rbush from 'rbush';\nimport {buffer, createEmpty, containsExtent, getWidth} from '../../extent.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {labelCache, rotateAtOffset} from '../../render/canvas.js';\nimport CanvasReplayGroup from '../../render/canvas/ReplayGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport {defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature} from '../vector.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n\n  /**\n   * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n\n    super(vectorLayer);\n\n    /**\n     * Declutter tree.\n     * @private\n     */\n    this.declutterTree_ = vectorLayer.getDeclutter() ? rbush(9, undefined) : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.dirty_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ReplayGroup.js\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = createCanvasContext2D();\n\n    listen(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    unlisten(labelCache, EventType.CLEAR, this.handleFontsChanged_, this);\n    super.disposeInternal();\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   */\n  compose(context, frameState, layerState) {\n    const extent = frameState.extent;\n    const pixelRatio = frameState.pixelRatio;\n    const skippedFeatureUids = layerState.managed ?\n      frameState.skippedFeatureUids : {};\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = /** @type {import(\"../../source/Vector.js\").default} */ (this.getLayer().getSource());\n\n    let transform = this.getTransform(frameState, 0);\n\n    // clipped rendering if layer extent is set\n    const clipExtent = layerState.extent;\n    const clipped = clipExtent !== undefined;\n    if (clipped) {\n      this.clip(context, frameState, /** @type {import(\"../../extent.js\").Extent} */ (clipExtent));\n    }\n    const replayGroup = this.replayGroup_;\n    if (replayGroup && !replayGroup.isEmpty()) {\n      if (this.declutterTree_) {\n        this.declutterTree_.clear();\n      }\n      const layer = /** @type {import(\"../../layer/Vector.js\").default} */ (this.getLayer());\n      let drawOffsetX = 0;\n      let drawOffsetY = 0;\n      let replayContext;\n      const transparentLayer = layerState.opacity !== 1;\n      const hasRenderListeners = layer.hasListener(RenderEventType.RENDER);\n      if (transparentLayer || hasRenderListeners) {\n        let drawWidth = context.canvas.width;\n        let drawHeight = context.canvas.height;\n        if (rotation) {\n          const drawSize = Math.round(Math.sqrt(drawWidth * drawWidth + drawHeight * drawHeight));\n          drawOffsetX = (drawSize - drawWidth) / 2;\n          drawOffsetY = (drawSize - drawHeight) / 2;\n          drawWidth = drawHeight = drawSize;\n        }\n        // resize and clear\n        this.context.canvas.width = drawWidth;\n        this.context.canvas.height = drawHeight;\n        replayContext = this.context;\n      } else {\n        replayContext = context;\n      }\n\n      const alpha = replayContext.globalAlpha;\n      if (!transparentLayer) {\n        // for performance reasons, context.save / context.restore is not used\n        // to save and restore the transformation matrix and the opacity.\n        // see http://jsperf.com/context-save-restore-versus-variable\n        replayContext.globalAlpha = layerState.opacity;\n      }\n\n      if (replayContext != context) {\n        replayContext.translate(drawOffsetX, drawOffsetY);\n      }\n\n      const viewHints = frameState.viewHints;\n      const snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n      const width = frameState.size[0] * pixelRatio;\n      const height = frameState.size[1] * pixelRatio;\n      rotateAtOffset(replayContext, -rotation,\n        width / 2, height / 2);\n      replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);\n      if (vectorSource.getWrapX() && projection.canWrapX() &&\n          !containsExtent(projectionExtent, extent)) {\n        let startX = extent[0];\n        const worldWidth = getWidth(projectionExtent);\n        let world = 0;\n        let offsetX;\n        while (startX < projectionExtent[0]) {\n          --world;\n          offsetX = worldWidth * world;\n          transform = this.getTransform(frameState, offsetX);\n          replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);\n          startX += worldWidth;\n        }\n        world = 0;\n        startX = extent[2];\n        while (startX > projectionExtent[2]) {\n          ++world;\n          offsetX = worldWidth * world;\n          transform = this.getTransform(frameState, offsetX);\n          replayGroup.replay(replayContext, transform, rotation, skippedFeatureUids, snapToPixel);\n          startX -= worldWidth;\n        }\n      }\n      rotateAtOffset(replayContext, rotation,\n        width / 2, height / 2);\n\n      if (hasRenderListeners) {\n        this.dispatchRenderEvent(replayContext, frameState, transform);\n      }\n      if (replayContext != context) {\n        if (transparentLayer) {\n          const mainContextAlpha = context.globalAlpha;\n          context.globalAlpha = layerState.opacity;\n          context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);\n          context.globalAlpha = mainContextAlpha;\n        } else {\n          context.drawImage(replayContext.canvas, -drawOffsetX, -drawOffsetY);\n        }\n        replayContext.translate(-drawOffsetX, -drawOffsetY);\n      }\n\n      if (!transparentLayer) {\n        replayContext.globalAlpha = alpha;\n      }\n    }\n\n    if (clipped) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  composeFrame(frameState, layerState, context) {\n    const transform = this.getTransform(frameState, 0);\n    this.preCompose(context, frameState, transform);\n    this.compose(context, frameState, layerState);\n    this.postCompose(context, frameState, layerState, transform);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    if (!this.replayGroup_) {\n      return undefined;\n    } else {\n      const resolution = frameState.viewState.resolution;\n      const rotation = frameState.viewState.rotation;\n      const layer = /** @type {import(\"../../layer/Vector.js\").default} */ (this.getLayer());\n      /** @type {!Object<string, boolean>} */\n      const features = {};\n      const result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, {},\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @return {?} Callback result.\n         */\n        function(feature) {\n          const key = getUid(feature);\n          if (!(key in features)) {\n            features[key] = true;\n            return callback.call(thisArg, feature, layer);\n          }\n        }, null);\n      return result;\n    }\n  }\n\n  /**\n   * @param {import(\"../../events/Event.js\").default} event Event.\n   */\n  handleFontsChanged_(event) {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  prepareFrame(frameState, layerState) {\n    const vectorLayer = /** @type {import(\"../../layer/Vector.js\").default} */ (this.getLayer());\n    const vectorSource = /** @type {import(\"../../source/Vector.js\").default} */ (vectorLayer.getSource());\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (!this.dirty_ && (!updateWhileAnimating && animating) ||\n        (!updateWhileInteracting && interacting)) {\n      return true;\n    }\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const extent = buffer(frameStateExtent,\n      vectorLayerRenderBuffer * resolution);\n    const projectionExtent = viewState.projection.getExtent();\n\n    if (vectorSource.getWrapX() && viewState.projection.canWrapX() &&\n        !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n    }\n\n    if (!this.dirty_ &&\n        this.renderedResolution_ == resolution &&\n        this.renderedRevision_ == vectorLayerRevision &&\n        this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n        containsExtent(this.renderedExtent_, extent)) {\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    this.dirty_ = false;\n\n    const replayGroup = new CanvasReplayGroup(\n      getRenderTolerance(resolution, pixelRatio), extent, resolution,\n      pixelRatio, vectorSource.getOverlaps(), this.declutterTree_, vectorLayer.getRenderBuffer());\n    vectorSource.loadFeatures(extent, resolution, projection);\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    const render = function(feature) {\n      let styles;\n      const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        const dirty = this.renderFeature(\n          feature, resolution, pixelRatio, styles, replayGroup);\n        this.dirty_ = this.dirty_ || dirty;\n      }\n    }.bind(this);\n    if (vectorLayerRenderOrder) {\n      /** @type {Array<import(\"../../Feature.js\").default>} */\n      const features = [];\n      vectorSource.forEachFeatureInExtent(extent,\n        /**\n         * @param {import(\"../../Feature.js\").default} feature Feature.\n         */\n        function(feature) {\n          features.push(feature);\n        });\n      features.sort(vectorLayerRenderOrder);\n      for (let i = 0, ii = features.length; i < ii; ++i) {\n        render(features[i]);\n      }\n    } else {\n      vectorSource.forEachFeatureInExtent(extent, render);\n    }\n    replayGroup.finish();\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = extent;\n    this.replayGroup_ = replayGroup;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/ReplayGroup.js\").default} replayGroup Replay group.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(feature, resolution, pixelRatio, styles, replayGroup) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(\n          replayGroup, feature, styles[i],\n          getSquaredRenderTolerance(resolution, pixelRatio),\n          this.handleStyleImageChange_, this) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        replayGroup, feature, styles,\n        getSquaredRenderTolerance(resolution, pixelRatio),\n        this.handleStyleImageChange_, this);\n    }\n    return loading;\n  }\n}\n\n\n/**\n * Determine if this renderer handles the provided layer.\n * @param {import(\"../../layer/Layer.js\").default} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\nCanvasVectorLayerRenderer['handles'] = function(layer) {\n  return layer.getType() === LayerType.VECTOR;\n};\n\n\n/**\n * Create a layer renderer.\n * @param {import(\"../Map.js\").default} mapRenderer The map renderer.\n * @param {import(\"../../layer/Layer.js\").default} layer The layer to be rendererd.\n * @return {CanvasVectorLayerRenderer} The layer renderer.\n */\nCanvasVectorLayerRenderer['create'] = function(mapRenderer, layer) {\n  return new CanvasVectorLayerRenderer(/** @type {import(\"../../layer/Vector.js\").default} */ (layer));\n};\n\n\nexport default CanvasVectorLayerRenderer;\n"]},"metadata":{},"sourceType":"module"}