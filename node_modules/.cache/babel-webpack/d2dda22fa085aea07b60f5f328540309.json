{"ast":null,"code":"/**\n * @module ol/control/Attribution\n */\nimport { equals } from '../array.js';\nimport Control from './Control.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED } from '../css.js';\nimport { removeChildren, replaceNode } from '../dom.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { visibleAtResolution } from '../layer/Layer.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nvar Attribution = /*@__PURE__*/function (Control) {\n  function Attribution(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Control.call(this, {\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : \"\\xBB\";\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : 'i';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n    var activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    listen(button, EventType.CLICK, this.handleClick_, this);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ulElement_);\n    element.appendChild(button);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n  if (Control) Attribution.__proto__ = Control;\n  Attribution.prototype = Object.create(Control && Control.prototype);\n  Attribution.prototype.constructor = Attribution;\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  Attribution.prototype.collectSourceAttributions_ = function collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    var lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    var visibleAttributions = [];\n    var layerStatesArray = frameState.layerStatesArray;\n    var resolution = frameState.viewState.resolution;\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n      if (!visibleAtResolution(layerState, resolution)) {\n        continue;\n      }\n      var source = /** @type {import(\"../layer/Layer.js\").default} */layerState.layer.getSource();\n      if (!source) {\n        continue;\n      }\n      var attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n      var attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n      if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {\n        this.setCollapsible(false);\n      }\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    return visibleAttributions;\n  };\n\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  Attribution.prototype.updateElement_ = function updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n    var attributions = this.collectSourceAttributions_(frameState);\n    var visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n    this.renderedAttributions_ = attributions;\n  };\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  Attribution.prototype.handleClick_ = function handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n\n  /**\n   * @private\n   */\n  Attribution.prototype.handleToggle_ = function handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n  };\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.getCollapsible = function getCollapsible() {\n    return this.collapsible_;\n  };\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.setCollapsible = function setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.setCollapsed = function setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  };\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.getCollapsed = function getCollapsed() {\n    return this.collapsed_;\n  };\n  return Attribution;\n}(Control);\n\n/**\n * Update the attribution element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {Attribution}\n * @api\n */\nexport function render(mapEvent) {\n  this.updateElement_(mapEvent.frameState);\n}\nexport default Attribution;","map":{"version":3,"sources":["../../../src/ol/control/Attribution.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/control/Attribution\n */\nimport {equals} from '../array.js';\nimport Control from './Control.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_COLLAPSED} from '../css.js';\nimport {removeChildren, replaceNode} from '../dom.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {visibleAtResolution} from '../layer/Layer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(import(\"../MapEvent.js\").default)} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n\n  /**\n   * @param {Options=} opt_options Attribution options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render || render,\n      target: options.target\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ = options.collapsible !== undefined ?\n      options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className = options.className !== undefined ? options.className : 'ol-attribution';\n\n    const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n\n    const activeLabel = (this.collapsible_ && !this.collapsed_) ?\n      this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    listen(button, EventType.CLICK, this.handleClick_, this);\n\n    const cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +\n        (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n        (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ulElement_);\n    element.appendChild(button);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    const visibleAttributions = [];\n\n    const layerStatesArray = frameState.layerStatesArray;\n    const resolution = frameState.viewState.resolution;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      if (!visibleAtResolution(layerState, resolution)) {\n        continue;\n      }\n\n      const source = /** @type {import(\"../layer/Layer.js\").default} */ (layerState.layer).getSource();\n      if (!source) {\n        continue;\n      }\n\n      const attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n\n      const attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n\n      if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {\n        this.setCollapsible(false);\n      }\n\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n}\n\n\n/**\n * Update the attribution element.\n * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n * @this {Attribution}\n * @api\n */\nexport function render(mapEvent) {\n  this.updateElement_(mapEvent.frameState);\n}\n\n\nexport default Attribution;\n"]},"metadata":{},"sourceType":"module"}