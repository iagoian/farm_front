{"ast":null,"code":"import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function subscribeToIterable(iterable) {\n  return function (subscriber) {\n    var iterator = iterable[Symbol_iterator]();\n    do {\n      var item = void 0;\n      try {\n        item = iterator.next();\n      } catch (err) {\n        subscriber.error(err);\n        return subscriber;\n      }\n      if (item.done) {\n        subscriber.complete();\n        break;\n      }\n      subscriber.next(item.value);\n      if (subscriber.closed) {\n        break;\n      }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n      subscriber.add(function () {\n        if (iterator.return) {\n          iterator.return();\n        }\n      });\n    }\n    return subscriber;\n  };\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeToIterable.ts"],"names":[],"mappings":"AACA,SAAS,QAAQ,IAAI,eAAe,QAAQ,oBAAoB;AAEhE,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAAO,QAAqB;EAAA,OAAK,UAAC,UAAyB,EAAI;IAC7F,IAAM,QAAQ,GAAI,QAAgB,CAAC,eAAe,CAAC,EAAE;IAErD,GAAG;MACD,IAAI,IAAuB;MAC3B,IAAI;QACF,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE;OACvB,CAAC,OAAO,GAAG,EAAE;QACZ,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;QACrB,OAAO,UAAU;MAClB;MACD,IAAI,IAAI,CAAC,IAAI,EAAE;QACb,UAAU,CAAC,QAAQ,EAAE;QACrB;MACD;MACD,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;MAC3B,IAAI,UAAU,CAAC,MAAM,EAAE;QACrB;MACD;KACF,QAAQ,IAAI;IAGb,IAAI,OAAO,QAAQ,CAAC,MAAM,KAAK,UAAU,EAAE;MACzC,UAAU,CAAC,GAAG,CAAC,YAAK;QAClB,IAAI,QAAQ,CAAC,MAAM,EAAE;UACnB,QAAQ,CAAC,MAAM,EAAE;QAClB;MACH,CAAC,CAAC;IACH;IAED,OAAO,UAAU;EACnB,CAAC;AAAA","sourcesContent":["import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        let item;\n        try {\n            item = iterator.next();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return subscriber;\n        }\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map"]},"metadata":{},"sourceType":"module"}