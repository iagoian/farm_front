{"ast":null,"code":"/**\n * @module ol/interaction/Modify\n */\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { equals } from '../array.js';\nimport { equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment } from '../coordinate.js';\nimport { listen, unlisten } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { always, primaryAction, altKeyOnly, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer, createOrUpdateFromCoordinate } from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport { createEditingStyle } from '../style/Style.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport var ModifyEvent = /*@__PURE__*/function (Event) {\n  function ModifyEvent(type, features, mapBrowserPointerEvent) {\n    Event.call(this, type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n  }\n  if (Event) ModifyEvent.__proto__ = Event;\n  ModifyEvent.prototype = Object.create(Event && Event.prototype);\n  ModifyEvent.prototype.constructor = ModifyEvent;\n  return ModifyEvent;\n}(Event);\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /*@__PURE__*/function (PointerInteraction) {\n  function Modify(options) {\n    PointerInteraction.call( /** @type {import(\"./Pointer.js\").Options} */this, options);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.modified_ = false;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default)>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n    var features;\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE, this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE, this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD, this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE, this.handleFeatureRemove_, this);\n\n    /**\n     * @type {import(\"../MapBrowserPointerEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n  }\n  if (PointerInteraction) Modify.__proto__ = PointerInteraction;\n  Modify.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Modify.prototype.constructor = Modify;\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.addFeature_ = function addFeature_(feature) {\n    var geometry = feature.getGeometry();\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n    var map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    listen(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} evt Map browser event\n   * @private\n   */\n  Modify.prototype.willModifyFeatures_ = function willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeature_ = function removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features\n    // is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    unlisten(feature, EventType.CHANGE, this.handleFeatureChange_, this);\n  };\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeatureSegmentData_ = function removeFeatureSegmentData_(feature) {\n    var rBush = this.rBush_;\n    var /** @type {Array<SegmentData>} */nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.setActive = function setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    PointerInteraction.prototype.setActive.call(this, active);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.setMap = function setMap(map) {\n    this.overlay_.setMap(map);\n    PointerInteraction.prototype.setMap.call(this, map);\n  };\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Modify.prototype.getOverlay = function getOverlay() {\n    return this.overlay_;\n  };\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceAdd_ = function handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceRemove_ = function handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureAdd_ = function handleFeatureAdd_(evt) {\n    this.addFeature_( /** @type {Feature} */evt.element);\n  };\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureChange_ = function handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      var feature = /** @type {Feature} */evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureRemove_ = function handleFeatureRemove_(evt) {\n    var feature = /** @type {Feature} */evt.element;\n    this.removeFeature_(feature);\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePointGeometry_ = function writePointGeometry_(feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    var segmentData = /** @type {SegmentData} */{\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPointGeometry_ = function writeMultiPointGeometry_(feature, geometry) {\n    var points = geometry.getCoordinates();\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      var segmentData = /** @type {SegmentData} */{\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeLineStringGeometry_ = function writeLineStringGeometry_(feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      var segmentData = /** @type {SegmentData} */{\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiLineStringGeometry_ = function writeMultiLineStringGeometry_(feature, geometry) {\n    var lines = geometry.getCoordinates();\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = /** @type {SegmentData} */{\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePolygonGeometry_ = function writePolygonGeometry_(feature, geometry) {\n    var rings = geometry.getCoordinates();\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        var segmentData = /** @type {SegmentData} */{\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPolygonGeometry_ = function writeMultiPolygonGeometry_(feature, geometry) {\n    var polygons = geometry.getCoordinates();\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          var segmentData = /** @type {SegmentData} */{\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeCircleGeometry_ = function writeCircleGeometry_(feature, geometry) {\n    var coordinates = geometry.getCenter();\n    var centerSegmentData = /** @type {SegmentData} */{\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var circumferenceSegmentData = /** @type {SegmentData} */{\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  };\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeGeometryCollectionGeometry_ = function writeGeometryCollectionGeometry_(feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0; i < geometries.length; ++i) {\n      this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);\n    }\n  };\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  Modify.prototype.createOrUpdateVertexFeature_ = function createOrUpdateVertexFeature_(coordinates) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = /** @type {Point} */vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  };\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @override\n   */\n  Modify.prototype.handleEvent = function handleEvent(mapBrowserEvent) {\n    if (! /** @type {import(\"../MapBrowserPointerEvent.js\").default} */mapBrowserEvent.pointerEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n    return PointerInteraction.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.handleDragEvent = function handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n    var vertex = evt.coordinate;\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var depth = segmentData.depth;\n      var geometry = segmentData.geometry;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.CIRCLE:\n          segment[0] = segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.handleDownEvent = function handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n    var pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    var vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      var insertVertices = [];\n      var geometry = /** @type {Point} */vertexFeature.getGeometry();\n      var vertex = geometry.getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.feature);\n        var depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n        } else if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        } else if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n        } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1]) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Modify.prototype.handleUpEvent = function handleUpEvent(evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n        this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n    return false;\n  };\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handlePointerMove_ = function handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  };\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @private\n   */\n  Modify.prototype.handlePointerAtPixel_ = function handlePointerAtPixel_(pixel, map) {\n    var pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    var sortByDistance = function sortByDistance(a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) - pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n    var box = buffer(createOrUpdateFromCoordinate(pixelCoordinate), map.getView().getResolution() * this.pixelTolerance_);\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  Modify.prototype.insertVertex_ = function insertVertex_(segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = /** @type {number} */segmentData.index;\n    var coordinates;\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    var newSegmentData = /** @type {SegmentData} */{\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    var newSegmentData2 = /** @type {SegmentData} */{\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  Modify.prototype.removePoint = function removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  Modify.prototype.removeVertex_ = function removeVertex_() {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          var newSegmentData = /** @type {SegmentData} */{\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          /** @type {VectorSource} */this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  };\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  Modify.prototype.setGeometryCoordinates_ = function setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  Modify.prototype.updateSegmentIndices_ = function updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n  return Modify;\n}(PointerInteraction);\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\nexport default Modify;","map":{"version":3,"sources":["../../../src/ol/interaction/Modify.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {equals} from '../array.js';\nimport {equals as coordinatesEqual, distance as coordinateDistance, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, closestOnSegment} from '../coordinate.js';\nimport {listen, unlisten} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {always, primaryAction, altKeyOnly, singleClick} from '../events/condition.js';\nimport {boundingExtent, buffer, createOrUpdateFromCoordinate} from '../extent.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport RBush from '../structs/RBush.js';\nimport {createEditingStyle} from '../style/Style.js';\n\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex can be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} mapBrowserPointerEvent\n   * Associated {@link module:ol/MapBrowserPointerEvent}.\n   */\n  constructor(type, features, mapBrowserPointerEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserPointerEvent;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function(mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition ?\n      options.deleteCondition : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition ?\n      options.insertVertexCondition : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.modified_ = false;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ = options.pixelTolerance !== undefined ?\n      options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style :\n        getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default)>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_,\n      'LineString': this.writeLineStringGeometry_,\n      'LinearRing': this.writeLineStringGeometry_,\n      'Polygon': this.writePolygonGeometry_,\n      'MultiPoint': this.writeMultiPointGeometry_,\n      'MultiLineString': this.writeMultiLineStringGeometry_,\n      'MultiPolygon': this.writeMultiPolygonGeometry_,\n      'Circle': this.writeCircleGeometry_,\n      'GeometryCollection': this.writeGeometryCollectionGeometry_\n    };\n\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    let features;\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      listen(this.source_, VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_, this);\n      listen(this.source_, VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_, this);\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    listen(this.features_, CollectionEventType.ADD,\n      this.handleFeatureAdd_, this);\n    listen(this.features_, CollectionEventType.REMOVE,\n      this.handleFeatureRemove_, this);\n\n    /**\n     * @type {import(\"../MapBrowserPointerEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry && geometry.getType() in this.SEGMENT_WRITERS_) {\n      this.SEGMENT_WRITERS_[geometry.getType()].call(this, feature, geometry);\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    listen(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserPointerEvent.js\").default} evt Map browser event\n   * @private\n   */\n  willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(\n        ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features\n    // is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    unlisten(feature, EventType.CHANGE,\n      this.handleFeatureChange_, this);\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    const /** @type {Array<SegmentData>} */ nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function(node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      });\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      rBush.remove(nodesToRemove[i]);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(/** @type {Feature} */ (evt.element));\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    const feature = /** @type {Feature} */ (evt.element);\n    this.removeFeature_(feature);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    const segmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    });\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n      const segmentData = /** @type {SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      });\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n      const segmentData = /** @type {SegmentData} */ ({\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      });\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        const segmentData = /** @type {SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n        const segmentData = /** @type {SegmentData} */ ({\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        });\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n          const segmentData = /** @type {SegmentData} */ ({\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          });\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n    const centerSegmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    const circumferenceSegmentData = /** @type {SegmentData} */ ({\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    });\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n    this.rBush_.insert(geometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      this.SEGMENT_WRITERS_[geometries[i].getType()].call(this, feature, geometries[i]);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      /** @type {VectorSource} */ (this.overlay_.getSource()).addFeature(vertexFeature);\n    } else {\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @override\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!(/** @type {import(\"../MapBrowserPointerEvent.js\").default} */ (mapBrowserEvent).pointerEvent)) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() &&\n        mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n        !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n\n    const vertex = evt.coordinate;\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const depth = segmentData.depth;\n      const geometry = segmentData.geometry;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = segment[1] = vertex;\n          break;\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.CIRCLE:\n          segment[0] = segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else { // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            geometry.setRadius(coordinateDistance(geometry.getCenter(), vertex));\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n          // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n    const pixelCoordinate = evt.map.getCoordinateFromPixel(evt.pixel);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const insertVertices = [];\n      const geometry = /** @type {Point} */ (vertexFeature.getGeometry());\n      const vertex = geometry.getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.feature);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&\n        segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n          const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n        } else if (coordinatesEqual(segment[0], vertex) &&\n            !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n        } else if (coordinatesEqual(segment[1], vertex) &&\n            !componentSegments[uid][1]) {\n\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() ===\n              GeometryType.LINE_STRING ||\n              segmentDataMatch.geometry.getType() ===\n              GeometryType.MULTI_LINE_STRING) &&\n              componentSegments[uid][0] &&\n              componentSegments[uid][0].index === 0) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n        } else if (this.insertVertexCondition_(evt) && getUid(segment) in this.vertexSegments_ &&\n            (!componentSegments[uid][0] && !componentSegments[uid][1])) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createOrUpdateFromCoordinate(coordinates), centerSegmentData);\n        this.rBush_.update(geometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map) {\n    const pixelCoordinate = map.getCoordinateFromPixel(pixel);\n    const sortByDistance = function(a, b) {\n      return pointDistanceToSegmentDataSquared(pixelCoordinate, a) -\n          pointDistanceToSegmentDataSquared(pixelCoordinate, b);\n    };\n\n    const box = buffer(createOrUpdateFromCoordinate(pixelCoordinate),\n      map.getView().getResolution() * this.pixelTolerance_);\n\n    const rBush = this.rBush_;\n    const nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      const node = nodes[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n\n        if (node.geometry.getType() === GeometryType.CIRCLE &&\n        node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1]) ||\n                (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0])))) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = /** @type {number} */ (segmentData.index);\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    const newSegmentData = /** @type {SegmentData} */ ({\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    });\n    rTree.insert(boundingExtent(newSegmentData.segment),\n      newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    const newSegmentData2 = /** @type {SegmentData} */ ({\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    });\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n          /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n          // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          const newSegmentData = /** @type {SegmentData} */ ({\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          });\n          this.rBush_.insert(boundingExtent(newSegmentData.segment),\n            newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          /** @type {VectorSource} */ (this.overlay_.getSource()).removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function(segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry &&\n          (depth === undefined || segmentDataMatch.depth === undefined ||\n          equals(segmentDataMatch.depth, depth)) &&\n          segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  }\n}\n\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction pointDistanceToSegmentDataSquared(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    const circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const distanceToCenterSquared =\n            squaredCoordinateDistance(circleGeometry.getCenter(), pointCoordinates);\n      const distanceToCircumference =\n            Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  return squaredDistanceToSegment(pointCoordinates, segmentData.segment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE &&\n  segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    return geometry.getClosestPoint(pointCoordinates);\n  }\n  return closestOnSegment(pointCoordinates, segmentData.segment);\n}\n\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function(feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\n\nexport default Modify;\n"]},"metadata":{},"sourceType":"module"}