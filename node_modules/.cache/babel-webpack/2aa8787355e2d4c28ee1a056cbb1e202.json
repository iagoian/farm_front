{"ast":null,"code":"import _toConsumableArray from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        return bindNodeCallback(callbackFunc, scheduler).apply(void 0, arguments).pipe(map(function (args) {\n          return isArray(args) ? resultSelector.apply(void 0, _toConsumableArray(args)) : resultSelector(args);\n        }));\n      };\n    }\n  }\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var params = {\n      subject: undefined,\n      args: args,\n      callbackFunc: callbackFunc,\n      scheduler: scheduler,\n      context: this\n    };\n    return new Observable(function (subscriber) {\n      var context = params.context;\n      var subject = params.subject;\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject();\n          var handler = function handler() {\n            for (var _len2 = arguments.length, innerArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              innerArgs[_key2] = arguments[_key2];\n            }\n            var err = innerArgs.shift();\n            if (err) {\n              subject.error(err);\n              return;\n            }\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n          try {\n            callbackFunc.apply(context, [].concat(args, [handler]));\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule(dispatch, 0, {\n          params: params,\n          subscriber: subscriber,\n          context: context\n        });\n      }\n    });\n  };\n}\nfunction dispatch(state) {\n  var _this = this;\n  var params = state.params,\n    subscriber = state.subscriber,\n    context = state.context;\n  var callbackFunc = params.callbackFunc,\n    args = params.args,\n    scheduler = params.scheduler;\n  var subject = params.subject;\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n    var handler = function handler() {\n      for (var _len3 = arguments.length, innerArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        innerArgs[_key3] = arguments[_key3];\n      }\n      var err = innerArgs.shift();\n      if (err) {\n        _this.add(scheduler.schedule(dispatchError, 0, {\n          err: err,\n          subject: subject\n        }));\n      } else {\n        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        _this.add(scheduler.schedule(dispatchNext, 0, {\n          value: value,\n          subject: subject\n        }));\n      }\n    };\n    try {\n      callbackFunc.apply(context, [].concat(_toConsumableArray(args), [handler]));\n    } catch (err) {\n      this.add(scheduler.schedule(dispatchError, 0, {\n        err: err,\n        subject: subject\n      }));\n    }\n  }\n  this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n  var value = arg.value,\n    subject = arg.subject;\n  subject.next(value);\n  subject.complete();\n}\nfunction dispatchError(arg) {\n  var err = arg.err,\n    subject = arg.subject;\n  subject.error(err);\n}","map":{"version":3,"sources":["../../../src/internal/observable/bindNodeCallback.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n        }\n    }\n    return function (...args) {\n        const params = {\n            subject: undefined,\n            args,\n            callbackFunc,\n            scheduler,\n            context: this,\n        };\n        return new Observable(subscriber => {\n            const { context } = params;\n            let { subject } = params;\n            if (!scheduler) {\n                if (!subject) {\n                    subject = params.subject = new AsyncSubject();\n                    const handler = (...innerArgs) => {\n                        const err = innerArgs.shift();\n                        if (err) {\n                            subject.error(err);\n                            return;\n                        }\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, [...args, handler]);\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                return scheduler.schedule(dispatch, 0, { params, subscriber, context });\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    const { params, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = params;\n    let subject = params.subject;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        const handler = (...innerArgs) => {\n            const err = innerArgs.shift();\n            if (err) {\n                this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n            }\n            else {\n                const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n            }\n        };\n        try {\n            callbackFunc.apply(context, [...args, handler]);\n        }\n        catch (err) {\n            this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    const { value, subject } = arg;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    const { err, subject } = arg;\n    subject.error(err);\n}\n//# sourceMappingURL=bindNodeCallback.js.map"]},"metadata":{},"sourceType":"module"}