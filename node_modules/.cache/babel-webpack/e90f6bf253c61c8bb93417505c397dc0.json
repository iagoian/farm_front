{"ast":null,"code":"import _toConsumableArray from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Observable } from '../Observable';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nexport function onErrorResumeNext() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n  var first = sources[0],\n    remainder = sources.slice(1);\n  if (sources.length === 1 && isArray(first)) {\n    return onErrorResumeNext.apply(void 0, _toConsumableArray(first));\n  }\n  return new Observable(function (subscriber) {\n    var subNext = function subNext() {\n      return subscriber.add(onErrorResumeNext.apply(void 0, _toConsumableArray(remainder)).subscribe(subscriber));\n    };\n    return from(first).subscribe({\n      next: function next(value) {\n        subscriber.next(value);\n      },\n      error: subNext,\n      complete: subNext\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/onErrorResumeNext.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,QAAQ,eAAe;AAE1C,SAAS,IAAI,QAAQ,QAAQ;AAC7B,SAAS,OAAO,QAAQ,iBAAiB;AACzC,SAAS,KAAK,QAAQ,SAAS;AAwE/B,OAAM,SAAU,iBAAiB,GAE4D;EAAA,kCAFlD,OAEkD;IAFlD,OAEkD;EAAA;EAE3F,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,KAAK;EACb;EAED,IAAQ,KAAK,GAAmB,OAAO;IAArB,SAAS,GAAK,OAAO;EAEvC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;IAC1C,OAAO,iBAAiB,kCAAI,KAAK,EAAC;EACnC;EAED,OAAO,IAAI,UAAU,CAAC,UAAA,UAAU,EAAG;IACjC,IAAM,OAAO,GAAG,SAAV,OAAO;MAAA,OAAS,UAAU,CAAC,GAAG,CAClC,iBAAiB,kCAAI,SAAS,EAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CACtD;IAAA;IAED,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC;MAC3B,IAAI,gBAAC,KAAK,EAAA;QAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;MAAE,CAAC;MACvC,KAAK,EAAE,OAAO;MACd,QAAQ,EAAE;KACX,CAAC;EACJ,CAAC,CAAC;AACJ","sourcesContent":["import { Observable } from '../Observable';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nexport function onErrorResumeNext(...sources) {\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    const [first, ...remainder] = sources;\n    if (sources.length === 1 && isArray(first)) {\n        return onErrorResumeNext(...first);\n    }\n    return new Observable(subscriber => {\n        const subNext = () => subscriber.add(onErrorResumeNext(...remainder).subscribe(subscriber));\n        return from(first).subscribe({\n            next(value) { subscriber.next(value); },\n            error: subNext,\n            complete: subNext,\n        });\n    });\n}\n//# sourceMappingURL=onErrorResumeNext.js.map"]},"metadata":{},"sourceType":"module"}