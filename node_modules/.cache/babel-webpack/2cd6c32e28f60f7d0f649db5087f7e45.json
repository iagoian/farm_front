{"ast":null,"code":"/**\n * @module ol/interaction/PinchRotate\n */\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { rotate, rotateWithoutConstraints } from './Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { disable } from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchRotate = /*@__PURE__*/function (PointerInteraction) {\n  function PinchRotate(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    PointerInteraction.call(this, pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n  if (PointerInteraction) PinchRotate.__proto__ = PointerInteraction;\n  PinchRotate.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  PinchRotate.prototype.constructor = PinchRotate;\n\n  /**\n   * @inheritDoc\n   */\n  PinchRotate.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    var rotationDelta = 0.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1];\n\n    // angle between touches\n    var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n    if (this.lastAngle_ !== undefined) {\n      var delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      var rotation = view.getRotation();\n      map.render();\n      rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchRotate.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      if (this.rotating_) {\n        var rotation = view.getRotation();\n        rotate(view, rotation, this.anchor_, this.duration_);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchRotate.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return PinchRotate;\n}(PointerInteraction);\nexport default PinchRotate;","map":{"version":3,"sources":["../../../src/ol/interaction/PinchRotate.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/PinchRotate\n */\nimport ViewHint from '../ViewHint.js';\nimport {FALSE} from '../functions.js';\nimport {rotate, rotateWithoutConstraints} from './Interaction.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from './Pointer.js';\nimport {disable} from '../rotationconstraint.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX);\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ &&\n          Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      const rotation = view.getRotation();\n      map.render();\n      rotateWithoutConstraints(view, rotation + rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      if (this.rotating_) {\n        const rotation = view.getRotation();\n        rotate(view, rotation, this.anchor_, this.duration_);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchRotate;\n"]},"metadata":{},"sourceType":"module"}