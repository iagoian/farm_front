{"ast":null,"code":"import { merge as mergeStatic } from '../observable/merge';\nexport function merge() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n  return function (source) {\n    return source.lift.call(mergeStatic.apply(void 0, [source].concat(observables)));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/merge.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,IAAI,WAAW,QAAQ,qBAAqB;AAsC1D,OAAM,SAAU,KAAK,GAA2E;EAAA,kCAAjE,WAAiE;IAAjE,WAAiE;EAAA;EAC9F,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,gBAAC,MAAM,SAAK,WAAW,EAAC,CAAC;EAAA;AACzF","sourcesContent":["import { merge as mergeStatic } from '../observable/merge';\nexport function merge(...observables) {\n    return (source) => source.lift.call(mergeStatic(source, ...observables));\n}\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"module"}