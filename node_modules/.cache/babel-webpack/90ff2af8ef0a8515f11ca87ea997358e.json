{"ast":null,"code":"/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport { FALSE } from '../functions.js';\nimport { zoom, zoomWithoutConstraints } from './Interaction.js';\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchZoom = /*@__PURE__*/function (PointerInteraction) {\n  function PinchZoom(opt_options) {\n    var options = opt_options ? opt_options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    PointerInteraction.call(this, pointerOptions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ = options.constrainResolution || false;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n  }\n  if (PointerInteraction) PinchZoom.__proto__ = PointerInteraction;\n  PinchZoom.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  PinchZoom.prototype.constructor = PinchZoom;\n\n  /**\n   * @inheritDoc\n   */\n  PinchZoom.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    var scaleDelta = 1.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1];\n    var dx = touch0.clientX - touch1.clientX;\n    var dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    var distance = Math.sqrt(dx * dx + dy * dy);\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    var resolution = view.getResolution();\n    var maxResolution = view.getMaxResolution();\n    var minResolution = view.getMinResolution();\n    var newResolution = resolution * scaleDelta;\n    if (newResolution > maxResolution) {\n      scaleDelta = maxResolution / resolution;\n      newResolution = maxResolution;\n    } else if (newResolution < minResolution) {\n      scaleDelta = minResolution / resolution;\n      newResolution = minResolution;\n    }\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // scale, bypass the resolution constraint\n    map.render();\n    zoomWithoutConstraints(view, newResolution, this.anchor_);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchZoom.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      var resolution = view.getResolution();\n      if (this.constrainResolution_ || resolution < view.getMinResolution() || resolution > view.getMaxResolution()) {\n        // Zoom to final resolution, with an animation, and provide a\n        // direction not to zoom out/in if user was pinching in/out.\n        // Direction is > 0 if pinching out, and < 0 if pinching in.\n        var direction = this.lastScaleDelta_ - 1;\n        zoom(view, resolution, this.anchor_, this.duration_, direction);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  PinchZoom.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return PinchZoom;\n}(PointerInteraction);\nexport default PinchZoom;","map":{"version":3,"sources":["../../../src/ol/interaction/PinchZoom.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/PinchZoom\n */\nimport ViewHint from '../ViewHint.js';\nimport {FALSE} from '../functions.js';\nimport {zoom, zoomWithoutConstraints} from './Interaction.js';\nimport PointerInteraction, {centroid as centroidFromPointers} from './Pointer.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n * @property {boolean} [constrainResolution=false] Zoom to the closest integer\n * zoom level after the pinch gesture ends.\n */\n\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchZoom extends PointerInteraction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ = options.constrainResolution || false;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n    const dx = touch0.clientX - touch1.clientX;\n    const dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    const resolution = view.getResolution();\n    const maxResolution = view.getMaxResolution();\n    const minResolution = view.getMinResolution();\n    let newResolution = resolution * scaleDelta;\n    if (newResolution > maxResolution) {\n      scaleDelta = maxResolution / resolution;\n      newResolution = maxResolution;\n    } else if (newResolution < minResolution) {\n      scaleDelta = minResolution / resolution;\n      newResolution = minResolution;\n    }\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixel(centroid);\n\n    // scale, bypass the resolution constraint\n    map.render();\n    zoomWithoutConstraints(view, newResolution, this.anchor_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.setHint(ViewHint.INTERACTING, -1);\n      const resolution = view.getResolution();\n      if (this.constrainResolution_ ||\n          resolution < view.getMinResolution() ||\n          resolution > view.getMaxResolution()) {\n        // Zoom to final resolution, with an animation, and provide a\n        // direction not to zoom out/in if user was pinching in/out.\n        // Direction is > 0 if pinching out, and < 0 if pinching in.\n        const direction = this.lastScaleDelta_ - 1;\n        zoom(view, resolution, this.anchor_, this.duration_, direction);\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().setHint(ViewHint.INTERACTING, 1);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchZoom;\n"]},"metadata":{},"sourceType":"module"}