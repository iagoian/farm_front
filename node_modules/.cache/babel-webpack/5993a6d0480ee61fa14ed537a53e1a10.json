{"ast":null,"code":"/**\n * @module ol/geom/Point\n */\nimport { createOrUpdateFromCoordinate, containsXY } from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nvar Point = /*@__PURE__*/function (SimpleGeometry) {\n  function Point(coordinates, opt_layout) {\n    SimpleGeometry.call(this);\n    this.setCoordinates(coordinates, opt_layout);\n  }\n  if (SimpleGeometry) Point.__proto__ = SimpleGeometry;\n  Point.prototype = Object.create(SimpleGeometry && SimpleGeometry.prototype);\n  Point.prototype.constructor = Point;\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @override\n   * @api\n   */\n  Point.prototype.clone = function clone() {\n    var point = new Point(this.flatCoordinates.slice(), this.layout);\n    return point;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Point.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n    if (squaredDistance < minSquaredDistance) {\n      var stride = this.stride;\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @override\n   * @api\n   */\n  Point.prototype.getCoordinates = function getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  Point.prototype.computeExtent = function computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.getType = function getType() {\n    return GeometryType.POINT;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.intersectsExtent = function intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  Point.prototype.setCoordinates = function setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return Point;\n}(SimpleGeometry);\nexport default Point;","map":{"version":3,"sources":["../../../src/ol/geom/Point.js"],"names":["super","const","let"],"mappings":"AAAA;;;AAGA,SAAQ,4BAA4B,EAAE,UAAU,QAAO,cAAc;AACrE,OAAO,YAAY,MAAM,mBAAmB;AAC5C,OAAO,cAAc,MAAM,qBAAqB;AAChD,SAAQ,iBAAiB,QAAO,mBAAmB;AACnD,SAAQ,eAAe,IAAI,SAAS,QAAO,YAAY;;;;;;;;AAQvD,IAAM,KAAK,GAAuB,aAAA,UAAA,cAAA,EAAA;EAMhC,SAAA,KAAW,CAAC,WAAW,EAAE,UAAU,EAAE;IACnCA,cAAAA,CAAAA,IAAK,CAAA,IAAC,CAAC;IACP,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC;;;;qCAC7C;;;;;;;;kBAQD,KAAA,GAAA,SAAA,KAAA,GAAQ;IACNC,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;IAClE,OAAO,KAAK;GACb;;;;;kBAKD,cAAA,GAAA,SAAA,cAAA,CAAe,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,kBAAkB,EAAE;IACrDA,IAAM,eAAe,GAAG,IAAI,CAAC,eAAe;IAC5CA,IAAM,eAAe,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;IAC/E,IAAI,eAAe,GAAG,kBAAkB,EAAE;MACxCA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM;MAC1B,KAAKC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE;QAC/B,YAAY,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;MACrC;MACD,YAAY,CAAC,MAAM,GAAG,MAAM;MAC5B,OAAO,eAAe;KACvB,MAAM;MACL,OAAO,kBAAkB;IAC1B;GACF;;;;;;;;kBAQD,cAAA,GAAA,SAAA,cAAA,GAAiB;IACf,OAAO,CAAC,IAAI,CAAC,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;GACjE;;;;;kBAKD,aAAA,GAAA,SAAA,aAAA,CAAc,MAAM,EAAE;IACpB,OAAO,4BAA4B,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC;GAClE;;;;;;kBAMD,OAAA,GAAA,SAAA,OAAA,GAAU;IACR,OAAO,YAAY,CAAC,KAAK;GAC1B;;;;;;kBAMD,gBAAA,GAAA,SAAA,gBAAA,CAAiB,MAAM,EAAE;IACvB,OAAO,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;GAC5E;;;;;;kBAMD,cAAA,GAAA,SAAA,cAAA,CAAe,WAAW,EAAE,UAAU,EAAE;IACtC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;MACzB,IAAI,CAAC,eAAe,GAAG,EAAE;IAC1B;IACD,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,iBAAiB,CAC7C,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC;IACpD,IAAI,CAAC,OAAO,EAAE;GACf;;EArFiB,cAAA,CAAA;AAyFpB,eAAe,KAAK","sourcesContent":["/**\n * @module ol/geom/Point\n */\nimport {createOrUpdateFromCoordinate, containsXY} from '../extent.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    this.setCoordinates(coordinates, opt_layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    return point;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(x, y, flatCoordinates[0], flatCoordinates[1]);\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.POINT;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n}\n\n\nexport default Point;\n"]},"metadata":{},"sourceType":"module"}