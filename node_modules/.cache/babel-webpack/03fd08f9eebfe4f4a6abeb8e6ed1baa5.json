{"ast":null,"code":"/**\n * @module ol/source/Vector\n */\n\nimport { getUid } from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport { extend } from '../array.js';\nimport { assert } from '../asserts.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { xhr } from '../featureloader.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { isEmpty, getValues } from '../obj.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\nexport var VectorSourceEvent = /*@__PURE__*/function (Event) {\n  function VectorSourceEvent(type, opt_feature) {\n    Event.call(this, type);\n\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n  }\n  if (Event) VectorSourceEvent.__proto__ = Event;\n  VectorSourceEvent.prototype = Object.create(Event && Event.prototype);\n  VectorSourceEvent.prototype.constructor = VectorSourceEvent;\n  return VectorSourceEvent;\n}(Event);\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector.VectorSourceEvent\n * @api\n */\nvar VectorSource = /*@__PURE__*/function (Source) {\n  function VectorSource(opt_options) {\n    var options = opt_options || {};\n    Source.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {import(\"../format/Feature.js\").default} */this.format_);\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.undefIdIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default>}\n     */\n    this.featuresCollection_ = null;\n    var collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n  if (Source) VectorSource.__proto__ = Source;\n  VectorSource.prototype = Object.create(Source && Source.prototype);\n  VectorSource.prototype.constructor = VectorSource;\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * @param {import(\"../Feature.js\").default} feature Feature to add.\n   * @api\n   */\n  VectorSource.prototype.addFeature = function addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  };\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.addFeatureInternal = function addFeatureInternal(feature) {\n    var featureKey = getUid(feature);\n    if (!this.addToIndex_(featureKey, feature)) {\n      return;\n    }\n    this.setupChangeEvents_(featureKey, feature);\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  };\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @private\n   */\n  VectorSource.prototype.setupChangeEvents_ = function setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  };\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  VectorSource.prototype.addToIndex_ = function addToIndex_(featureKey, feature) {\n    var valid = true;\n    var id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    } else {\n      assert(!(featureKey in this.undefIdIndex_), 30); // The passed `feature` was already added to the source\n      this.undefIdIndex_[featureKey] = feature;\n    }\n    return valid;\n  };\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default>} features Features to add.\n   * @api\n   */\n  VectorSource.prototype.addFeatures = function addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  };\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @protected\n   */\n  VectorSource.prototype.addFeaturesInternal = function addFeaturesInternal(features) {\n    var extents = [];\n    var newFeatures = [];\n    var geometryFeatures = [];\n    for (var i = 0, length = features.length; i < length; i++) {\n      var feature = features[i];\n      var featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n    for (var i$1 = 0, length$1 = newFeatures.length; i$1 < length$1; i$1++) {\n      var feature$1 = newFeatures[i$1];\n      var featureKey$1 = getUid(feature$1);\n      this.setupChangeEvents_(featureKey$1, feature$1);\n      var geometry = feature$1.getGeometry();\n      if (geometry) {\n        var extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature$1);\n      } else {\n        this.nullGeometryFeatures_[featureKey$1] = feature$1;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n    for (var i$2 = 0, length$2 = newFeatures.length; i$2 < length$2; i$2++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i$2]));\n    }\n  };\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default>} collection Collection.\n   * @private\n   */\n  VectorSource.prototype.bindFeaturesCollection_ = function bindFeaturesCollection_(collection) {\n    var modifyingCollection = false;\n    listen(this, VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    listen(this, VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    listen(collection, CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature( /** @type {import(\"../Feature.js\").default} */evt.element);\n        modifyingCollection = false;\n      }\n    }, this);\n    listen(collection, CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature( /** @type {import(\"../Feature.js\").default} */evt.element);\n        modifyingCollection = false;\n      }\n    }, this);\n    this.featuresCollection_ = collection;\n  };\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  VectorSource.prototype.clear = function clear(opt_fast) {\n    if (opt_fast) {\n      for (var featureId in this.featureChangeKeys_) {\n        var keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.undefIdIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n        for (var id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.loadedExtentsRtree_.clear();\n    this.nullGeometryFeatures_ = {};\n    var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  };\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeature = function forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  VectorSource.prototype.forEachFeatureAtCoordinateDirect = function forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  };\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureInExtent = function forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureIntersectingExtent = function forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsExtent(extent)) {\n        var result = callback(feature);\n        if (result) {\n          return result;\n        }\n      }\n    });\n  };\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default>} The collection of features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesCollection = function getFeaturesCollection() {\n    return this.featuresCollection_;\n  };\n\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeatures = function getFeatures() {\n    var features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return (/** @type {Array<import(\"../Feature.js\").default>} */features\n    );\n  };\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesAtCoordinate = function getFeaturesAtCoordinate(coordinate) {\n    var features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  };\n\n  /**\n   * Get all features in the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesInExtent = function getFeaturesInExtent(extent) {\n    return this.featuresRtree_.getInExtent(extent);\n  };\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default} Closest feature.\n   * @api\n   */\n  VectorSource.prototype.getClosestFeatureToCoordinate = function getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var closestFeature = null;\n    var closestPoint = [NaN, NaN];\n    var minSquaredDistance = Infinity;\n    var extent = [-Infinity, -Infinity, Infinity, Infinity];\n    var filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        var geometry = feature.getGeometry();\n        var previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature;\n          // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n          var minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  };\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  VectorSource.prototype.getExtent = function getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  };\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default} The feature (or `null` if not found).\n   * @api\n   */\n  VectorSource.prototype.getFeatureById = function getFeatureById(id) {\n    var feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  };\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  VectorSource.prototype.getFormat = function getFormat() {\n    return this.format_;\n  };\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  VectorSource.prototype.getOverlaps = function getOverlaps() {\n    return this.overlaps_;\n  };\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  VectorSource.prototype.getUrl = function getUrl() {\n    return this.url_;\n  };\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  VectorSource.prototype.handleFeatureChange_ = function handleFeatureChange_(event) {\n    var feature = /** @type {import(\"../Feature.js\").default} */event.target;\n    var featureKey = getUid(feature);\n    var geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      var extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    var id = feature.getId();\n    if (id !== undefined) {\n      var sid = id.toString();\n      if (featureKey in this.undefIdIndex_) {\n        delete this.undefIdIndex_[featureKey];\n        this.idIndex_[sid] = feature;\n      } else {\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      }\n    } else {\n      if (!(featureKey in this.undefIdIndex_)) {\n        this.removeFromIdIndex_(feature);\n        this.undefIdIndex_[featureKey] = feature;\n      }\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  };\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  VectorSource.prototype.hasFeature = function hasFeature(feature) {\n    var id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.undefIdIndex_;\n    }\n  };\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  VectorSource.prototype.isEmpty = function isEmpty$1() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  };\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  VectorSource.prototype.loadFeatures = function loadFeatures(extent, resolution, projection) {\n    var this$1 = this;\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    var loop = function loop(i, ii) {\n      var extentToLoad = extentsToLoad[i];\n      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n      if (!alreadyLoaded) {\n        this$1.loader_.call(this$1, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n        this$1.loading = this$1.loader_ !== VOID;\n      }\n    };\n    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      loop(i, ii);\n    }\n  };\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  VectorSource.prototype.removeLoadedExtent = function removeLoadedExtent(extent) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  };\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default} feature Feature to remove.\n   * @api\n   */\n  VectorSource.prototype.removeFeature = function removeFeature(feature) {\n    var featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  };\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.removeFeatureInternal = function removeFeatureInternal(feature) {\n    var featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    var id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    } else {\n      delete this.undefIdIndex_[featureKey];\n    }\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n  };\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  VectorSource.prototype.removeFromIdIndex_ = function removeFromIdIndex_(feature) {\n    var removed = false;\n    for (var id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  };\n\n  /**\n   * Set the new loader of the source. The next loadFeatures call will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  VectorSource.prototype.setLoader = function setLoader(loader) {\n    this.loader_ = loader;\n  };\n  return VectorSource;\n}(Source);\nexport default VectorSource;","map":{"version":3,"sources":["../../../src/ol/source/Vector.js"],"names":["super","const","let","i","length","feature","featureKey","ii","this"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/Vector\n */\n\nimport {getUid} from '../util.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport {extend} from '../array.js';\nimport {assert} from '../asserts.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, equals} from '../extent.js';\nimport {xhr} from '../featureloader.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {isEmpty, getValues} from '../obj.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport RBush from '../structs/RBush.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n */\nexport class VectorSourceEvent extends Event {\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default=} opt_feature Feature.\n   */\n  constructor(type, opt_feature) {\n\n    super(type);\n\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n\n  }\n\n}\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires ol/source/Vector.VectorSourceEvent\n * @api\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options=} opt_options Vector source options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    super({\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    });\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(this.url_, /** @type {import(\"../format/Feature.js\").default} */ (this.format_));\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n        options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features without id (keyed by getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default>}\n     */\n    this.undefIdIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default>}\n     */\n    this.featuresCollection_ = null;\n\n    let collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * @param {import(\"../Feature.js\").default} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  }\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE,\n        this.handleFeatureChange_, this),\n      listen(feature, ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_, this)\n    ];\n  }\n\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    } else {\n      assert(!(featureKey in this.undefIdIndex_),\n        30); // The passed `feature` was already added to the source\n      this.undefIdIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n    }\n  }\n\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    listen(this, VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(this, VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent} evt The vector source event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n    listen(collection, CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    listen(collection, CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function(evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(/** @type {import(\"../Feature.js\").default} */ (evt.element));\n          modifyingCollection = false;\n        }\n      }, this);\n    this.featuresCollection_ = collection;\n  }\n\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  clear(opt_fast) {\n    if (opt_fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.undefIdIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal, this);\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.loadedExtentsRtree_.clear();\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function(feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  }\n\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function(feature) {\n        const geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      });\n  }\n\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default>} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return (\n      /** @type {Array<import(\"../Feature.js\").default>} */ (features)\n    );\n  }\n\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n\n  /**\n   * Get all features in the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    return this.featuresRtree_.getInExtent(extent);\n  }\n\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    const filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default} feature Feature.\n       */\n      function(feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x, y, closestPoint, minSquaredDistance);\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      });\n    return closestFeature;\n  }\n\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  }\n\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default} */ (event.target);\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (featureKey in this.undefIdIndex_) {\n        delete this.undefIdIndex_[featureKey];\n        this.idIndex_[sid] = feature;\n      } else {\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      }\n    } else {\n      if (!(featureKey in this.undefIdIndex_)) {\n        this.removeFromIdIndex_(feature);\n        this.undefIdIndex_[featureKey] = feature;\n      }\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.CHANGEFEATURE, feature));\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.undefIdIndex_;\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  }\n\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function(object) {\n          return containsExtent(object.extent, extentToLoad);\n        });\n      if (!alreadyLoaded) {\n        this.loader_.call(this, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n        this.loading = this.loader_ !== VOID;\n      }\n    }\n  }\n\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function(object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  }\n\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    } else {\n      delete this.undefIdIndex_[featureKey];\n    }\n    this.dispatchEvent(new VectorSourceEvent(\n      VectorEventType.REMOVEFEATURE, feature));\n  }\n\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n\n  /**\n   * Set the new loader of the source. The next loadFeatures call will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n}\n\n\nexport default VectorSource;\n"]},"metadata":{},"sourceType":"module"}