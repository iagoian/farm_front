{"ast":null,"code":"/**\n * @module ol/source/UrlTile\n */\nimport { getUid } from '../util.js';\nimport TileState from '../TileState.js';\nimport { expandUrl, createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileEventType from './TileEventType.js';\nimport { getKeyZXY } from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nvar UrlTile = /*@__PURE__*/function (TileSource) {\n  function UrlTile(options) {\n    TileSource.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ = !options.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction, this.key_);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n  if (TileSource) UrlTile.__proto__ = TileSource;\n  UrlTile.prototype = Object.create(TileSource && TileSource.prototype);\n  UrlTile.prototype.constructor = UrlTile;\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  UrlTile.prototype.getTileLoadFunction = function getTileLoadFunction() {\n    return this.tileLoadFunction;\n  };\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  UrlTile.prototype.getTileUrlFunction = function getTileUrlFunction() {\n    return this.tileUrlFunction;\n  };\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  UrlTile.prototype.getUrls = function getUrls() {\n    return this.urls;\n  };\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  UrlTile.prototype.handleTileChange = function handleTileChange(event) {\n    var tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED || tileState == TileState.ABORT ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  UrlTile.prototype.setTileLoadFunction = function setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n  UrlTile.prototype.setTileUrlFunction = function setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  };\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  UrlTile.prototype.setUrl = function setUrl(url) {\n    var urls = this.urls = expandUrl(url);\n    this.setUrls(urls);\n  };\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  UrlTile.prototype.setUrls = function setUrls(urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  UrlTile.prototype.useTile = function useTile(z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n  return UrlTile;\n}(TileSource);\nexport default UrlTile;","map":{"version":3,"sources":["../../../src/ol/source/UrlTile.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/source/UrlTile\n */\nimport {getUid} from '../util.js';\nimport TileState from '../TileState.js';\nimport {expandUrl, createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileEventType from './TileEventType.js';\nimport {getKeyZXY} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque]\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n */\n\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ = !options.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(this) : nullTileUrlFunction;\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    if (options.tileUrlFunction) {\n      this.setTileUrlFunction(options.tileUrlFunction, this.key_);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :\n        (tileState == TileState.LOADED || tileState == TileState.ABORT) ?\n          TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = this.urls = expandUrl(url);\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\n\nexport default UrlTile;\n"]},"metadata":{},"sourceType":"module"}