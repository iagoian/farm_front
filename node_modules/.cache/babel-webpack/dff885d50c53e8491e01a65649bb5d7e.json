{"ast":null,"code":"import _get from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\nvar GroupByOperator = /*#__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    _classCallCheck(this, GroupByOperator);\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n  _createClass(GroupByOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n  }]);\n  return GroupByOperator;\n}();\nvar GroupBySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(GroupBySubscriber, _Subscriber);\n  var _super = _createSuper(GroupBySubscriber);\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this;\n    _classCallCheck(this, GroupBySubscriber);\n    _this = _super.call(this, destination);\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n  _createClass(GroupBySubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var key;\n      try {\n        key = this.keySelector(value);\n      } catch (err) {\n        this.error(err);\n        return;\n      }\n      this._group(value, key);\n    }\n  }, {\n    key: \"_group\",\n    value: function _group(value, key) {\n      var groups = this.groups;\n      if (!groups) {\n        groups = this.groups = new Map();\n      }\n      var group = groups.get(key);\n      var element;\n      if (this.elementSelector) {\n        try {\n          element = this.elementSelector(value);\n        } catch (err) {\n          this.error(err);\n        }\n      } else {\n        element = value;\n      }\n      if (!group) {\n        group = this.subjectSelector ? this.subjectSelector() : new Subject();\n        groups.set(key, group);\n        var groupedObservable = new GroupedObservable(key, group, this);\n        this.destination.next(groupedObservable);\n        if (this.durationSelector) {\n          var duration;\n          try {\n            duration = this.durationSelector(new GroupedObservable(key, group));\n          } catch (err) {\n            this.error(err);\n            return;\n          }\n          this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n        }\n      }\n      if (!group.closed) {\n        group.next(element);\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var groups = this.groups;\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.error(err);\n        });\n        groups.clear();\n      }\n      this.destination.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var groups = this.groups;\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.complete();\n        });\n        groups.clear();\n      }\n      this.destination.complete();\n    }\n  }, {\n    key: \"removeGroup\",\n    value: function removeGroup(key) {\n      this.groups.delete(key);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (!this.closed) {\n        this.attemptedToUnsubscribe = true;\n        if (this.count === 0) {\n          _get(_getPrototypeOf(GroupBySubscriber.prototype), \"unsubscribe\", this).call(this);\n        }\n      }\n    }\n  }]);\n  return GroupBySubscriber;\n}(Subscriber);\nvar GroupDurationSubscriber = /*#__PURE__*/function (_Subscriber2) {\n  _inherits(GroupDurationSubscriber, _Subscriber2);\n  var _super2 = _createSuper(GroupDurationSubscriber);\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this2;\n    _classCallCheck(this, GroupDurationSubscriber);\n    _this2 = _super2.call(this, group);\n    _this2.key = key;\n    _this2.group = group;\n    _this2.parent = parent;\n    return _this2;\n  }\n  _createClass(GroupDurationSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.complete();\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var parent = this.parent,\n        key = this.key;\n      this.key = this.parent = null;\n      if (parent) {\n        parent.removeGroup(key);\n      }\n    }\n  }]);\n  return GroupDurationSubscriber;\n}(Subscriber);\nexport var GroupedObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(GroupedObservable, _Observable);\n  var _super3 = _createSuper(GroupedObservable);\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this3;\n    _classCallCheck(this, GroupedObservable);\n    _this3 = _super3.call(this);\n    _this3.key = key;\n    _this3.groupSubject = groupSubject;\n    _this3.refCountSubscription = refCountSubscription;\n    return _this3;\n  }\n  _createClass(GroupedObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var subscription = new Subscription();\n      var refCountSubscription = this.refCountSubscription,\n        groupSubject = this.groupSubject;\n      if (refCountSubscription && !refCountSubscription.closed) {\n        subscription.add(new InnerRefCountSubscription(refCountSubscription));\n      }\n      subscription.add(groupSubject.subscribe(subscriber));\n      return subscription;\n    }\n  }]);\n  return GroupedObservable;\n}(Observable);\nvar InnerRefCountSubscription = /*#__PURE__*/function (_Subscription) {\n  _inherits(InnerRefCountSubscription, _Subscription);\n  var _super4 = _createSuper(InnerRefCountSubscription);\n  function InnerRefCountSubscription(parent) {\n    var _this4;\n    _classCallCheck(this, InnerRefCountSubscription);\n    _this4 = _super4.call(this);\n    _this4.parent = parent;\n    parent.count++;\n    return _this4;\n  }\n  _createClass(InnerRefCountSubscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var parent = this.parent;\n      if (!parent.closed && !this.closed) {\n        _get(_getPrototypeOf(InnerRefCountSubscription.prototype), \"unsubscribe\", this).call(this);\n        parent.count -= 1;\n        if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n          parent.unsubscribe();\n        }\n      }\n    }\n  }]);\n  return InnerRefCountSubscription;\n}(Subscription);","map":{"version":3,"sources":["../../../src/internal/operators/groupBy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return (source) => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\nclass GroupByOperator {\n    constructor(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n}\nclass GroupBySubscriber extends Subscriber {\n    constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    _next(value) {\n        let key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    }\n    _group(value, key) {\n        let groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        let group = groups.get(key);\n        let element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            const groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                let duration;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    }\n    _error(err) {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    }\n    removeGroup(key) {\n        this.groups.delete(key);\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                super.unsubscribe();\n            }\n        }\n    }\n}\nclass GroupDurationSubscriber extends Subscriber {\n    constructor(key, group, parent) {\n        super(group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    _next(value) {\n        this.complete();\n    }\n    _unsubscribe() {\n        const { parent, key } = this;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    }\n}\nexport class GroupedObservable extends Observable {\n    constructor(key, groupSubject, refCountSubscription) {\n        super();\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    _subscribe(subscriber) {\n        const subscription = new Subscription();\n        const { refCountSubscription, groupSubject } = this;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    }\n}\nclass InnerRefCountSubscription extends Subscription {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        parent.count++;\n    }\n    unsubscribe() {\n        const parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            super.unsubscribe();\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=groupBy.js.map"]},"metadata":{},"sourceType":"module"}