{"ast":null,"code":"import _get from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ConnectableObservable, _Observable);\n  var _super = _createSuper(ConnectableObservable);\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n    _classCallCheck(this, ConnectableObservable);\n    _this = _super.call(this);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n  _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n      return this._subject;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var connection = this._connection;\n      if (!connection) {\n        this._isComplete = false;\n        connection = this._connection = new Subscription();\n        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n  return ConnectableObservable;\n}(Observable);\nexport var connectableObservableDescriptor = function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\nvar ConnectableSubscriber = /*#__PURE__*/function (_SubjectSubscriber) {\n  _inherits(ConnectableSubscriber, _SubjectSubscriber);\n  var _super2 = _createSuper(ConnectableSubscriber);\n  function ConnectableSubscriber(destination, connectable) {\n    var _this2;\n    _classCallCheck(this, ConnectableSubscriber);\n    _this2 = _super2.call(this, destination);\n    _this2.connectable = connectable;\n    return _this2;\n  }\n  _createClass(ConnectableSubscriber, [{\n    key: \"_error\",\n    value: function _error(err) {\n      this._unsubscribe();\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.connectable._isComplete = true;\n      this._unsubscribe();\n      _get(_getPrototypeOf(ConnectableSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n      if (connectable) {\n        this.connectable = null;\n        var connection = connectable._connection;\n        connectable._refCount = 0;\n        connectable._subject = null;\n        connectable._connection = null;\n        if (connection) {\n          connection.unsubscribe();\n        }\n      }\n    }\n  }]);\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\nvar RefCountOperator = /*#__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    _classCallCheck(this, RefCountOperator);\n    this.connectable = connectable;\n  }\n  _createClass(RefCountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var connectable = this.connectable;\n      connectable._refCount++;\n      var refCounter = new RefCountSubscriber(subscriber, connectable);\n      var subscription = source.subscribe(refCounter);\n      if (!refCounter.closed) {\n        refCounter.connection = connectable.connect();\n      }\n      return subscription;\n    }\n  }]);\n  return RefCountOperator;\n}();\nvar RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(RefCountSubscriber, _Subscriber);\n  var _super3 = _createSuper(RefCountSubscriber);\n  function RefCountSubscriber(destination, connectable) {\n    var _this3;\n    _classCallCheck(this, RefCountSubscriber);\n    _this3 = _super3.call(this, destination);\n    _this3.connectable = connectable;\n    return _this3;\n  }\n  _createClass(RefCountSubscriber, [{\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n      if (!connectable) {\n        this.connection = null;\n        return;\n      }\n      this.connectable = null;\n      var refCount = connectable._refCount;\n      if (refCount <= 0) {\n        this.connection = null;\n        return;\n      }\n      connectable._refCount = refCount - 1;\n      if (refCount > 1) {\n        this.connection = null;\n        return;\n      }\n      var connection = this.connection;\n      var sharedConnection = connectable._connection;\n      this.connection = null;\n      if (sharedConnection && (!connection || sharedConnection === connection)) {\n        sharedConnection.unsubscribe();\n      }\n    }\n  }]);\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":"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","sourcesContent":["import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map"]},"metadata":{},"sourceType":"module"}