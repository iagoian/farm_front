{"ast":null,"code":"import _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nexport var MulticastOperator = /*#__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    _classCallCheck(this, MulticastOperator);\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n  _createClass(MulticastOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var selector = this.selector;\n      var subject = this.subjectFactory();\n      var subscription = selector(subject).subscribe(subscriber);\n      subscription.add(source.subscribe(subject));\n      return subscription;\n    }\n  }]);\n  return MulticastOperator;\n}();","map":{"version":3,"sources":["../../../src/internal/operators/multicast.ts"],"names":[],"mappings":";;AAIA,SAAgC,+BAA+B,QAAQ,qCAAqC;AA6B5G,OAAM,SAAU,SAAS,CAAO,uBAAwD,EACxD,QAAmD,EAAA;EACjF,OAAO,SAAS,yBAAyB,CAAC,MAAqB,EAAA;IAC7D,IAAI,cAAgC;IACpC,IAAI,OAAO,uBAAuB,KAAK,UAAU,EAAE;MACjD,cAAc,GAAqB,uBAAuB;KAC3D,MAAM;MACL,cAAc,GAAG,SAAS,cAAc,GAAA;QACtC,OAAmB,uBAAuB;MAC5C,CAAC;IACF;IAED,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;MAClC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACpE;IAED,IAAM,WAAW,GAAQ,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,+BAA+B,CAAC;IAC/E,WAAW,CAAC,MAAM,GAAG,MAAM;IAC3B,WAAW,CAAC,cAAc,GAAG,cAAc;IAE3C,OAAkC,WAAW;EAC/C,CAAC;AACH;AAEA,WAAa,iBAAiB;EAC5B,2BAAoB,cAAgC,EAChC,QAAkD,EAAA;IAAA;IADlD,IAAA,CAAA,cAAc,GAAd,cAAc;IACd,IAAA,CAAA,QAAQ,GAAR,QAAQ;EAC5B;EAAC;IAAA;IAAA,OACD,cAAK,UAAyB,EAAE,MAAW,EAAA;MACzC,IAAQ,QAAQ,GAAK,IAAI,CAAjB,QAAQ;MAChB,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE;MACrC,IAAM,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC;MAC5D,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;MAC3C,OAAO,YAAY;IACrB;EAAC;EAAA;AAAA","sourcesContent":["import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        let subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        const connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport class MulticastOperator {\n    constructor(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        const { selector } = this;\n        const subject = this.subjectFactory();\n        const subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    }\n}\n//# sourceMappingURL=multicast.js.map"]},"metadata":{},"sourceType":"module"}