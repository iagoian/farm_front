{"ast":null,"code":"import _assertThisInitialized from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n  var scheduler = async;\n  var windowCreationInterval = null;\n  var maxWindowSize = Number.POSITIVE_INFINITY;\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = Number(arguments[2]);\n  }\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = Number(arguments[1]);\n  }\n  return function windowTimeOperatorFunction(source) {\n    return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\nvar WindowTimeOperator = /*#__PURE__*/function () {\n  function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n    _classCallCheck(this, WindowTimeOperator);\n    this.windowTimeSpan = windowTimeSpan;\n    this.windowCreationInterval = windowCreationInterval;\n    this.maxWindowSize = maxWindowSize;\n    this.scheduler = scheduler;\n  }\n  _createClass(WindowTimeOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    }\n  }]);\n  return WindowTimeOperator;\n}();\nvar CountedSubject = /*#__PURE__*/function (_Subject) {\n  _inherits(CountedSubject, _Subject);\n  var _super = _createSuper(CountedSubject);\n  function CountedSubject() {\n    var _this;\n    _classCallCheck(this, CountedSubject);\n    _this = _super.apply(this, arguments);\n    _this._numberOfNextedValues = 0;\n    return _this;\n  }\n  _createClass(CountedSubject, [{\n    key: \"next\",\n    value: function next(value) {\n      this._numberOfNextedValues++;\n      _get(_getPrototypeOf(CountedSubject.prototype), \"next\", this).call(this, value);\n    }\n  }, {\n    key: \"numberOfNextedValues\",\n    get: function get() {\n      return this._numberOfNextedValues;\n    }\n  }]);\n  return CountedSubject;\n}(Subject);\nvar WindowTimeSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(WindowTimeSubscriber, _Subscriber);\n  var _super2 = _createSuper(WindowTimeSubscriber);\n  function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n    var _this2;\n    _classCallCheck(this, WindowTimeSubscriber);\n    _this2 = _super2.call(this, destination);\n    _this2.destination = destination;\n    _this2.windowTimeSpan = windowTimeSpan;\n    _this2.windowCreationInterval = windowCreationInterval;\n    _this2.maxWindowSize = maxWindowSize;\n    _this2.scheduler = scheduler;\n    _this2.windows = [];\n    var window = _this2.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      var closeState = {\n        subscriber: _assertThisInitialized(_this2),\n        window: window,\n        context: null\n      };\n      var creationState = {\n        windowTimeSpan: windowTimeSpan,\n        windowCreationInterval: windowCreationInterval,\n        subscriber: _assertThisInitialized(_this2),\n        scheduler: scheduler\n      };\n      _this2.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      _this2.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      var timeSpanOnlyState = {\n        subscriber: _assertThisInitialized(_this2),\n        window: window,\n        windowTimeSpan: windowTimeSpan\n      };\n      _this2.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n    return _this2;\n  }\n  _createClass(WindowTimeSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var windows = this.windows;\n      var len = windows.length;\n      for (var i = 0; i < len; i++) {\n        var window = windows[i];\n        if (!window.closed) {\n          window.next(value);\n          if (window.numberOfNextedValues >= this.maxWindowSize) {\n            this.closeWindow(window);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var windows = this.windows;\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n      this.destination.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var windows = this.windows;\n      while (windows.length > 0) {\n        var window = windows.shift();\n        if (!window.closed) {\n          window.complete();\n        }\n      }\n      this.destination.complete();\n    }\n  }, {\n    key: \"openWindow\",\n    value: function openWindow() {\n      var window = new CountedSubject();\n      this.windows.push(window);\n      var destination = this.destination;\n      destination.next(window);\n      return window;\n    }\n  }, {\n    key: \"closeWindow\",\n    value: function closeWindow(window) {\n      window.complete();\n      var windows = this.windows;\n      windows.splice(windows.indexOf(window), 1);\n    }\n  }]);\n  return WindowTimeSubscriber;\n}(Subscriber);\nfunction dispatchWindowTimeSpanOnly(state) {\n  var subscriber = state.subscriber,\n    windowTimeSpan = state.windowTimeSpan,\n    window = state.window;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n  var windowTimeSpan = state.windowTimeSpan,\n    subscriber = state.subscriber,\n    scheduler = state.scheduler,\n    windowCreationInterval = state.windowCreationInterval;\n  var window = subscriber.openWindow();\n  var action = this;\n  var context = {\n    action: action,\n    subscription: null\n  };\n  var timeSpanState = {\n    subscriber: subscriber,\n    window: window,\n    context: context\n  };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n  var subscriber = state.subscriber,\n    window = state.window,\n    context = state.context;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}","map":{"version":3,"sources":["../../../src/internal/operators/windowTime.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    let scheduler = async;\n    let windowCreationInterval = null;\n    let maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = Number(arguments[2]);\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = Number(arguments[1]);\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nclass WindowTimeOperator {\n    constructor(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    }\n}\nclass CountedSubject extends Subject {\n    constructor() {\n        super(...arguments);\n        this._numberOfNextedValues = 0;\n    }\n    next(value) {\n        this._numberOfNextedValues++;\n        super.next(value);\n    }\n    get numberOfNextedValues() {\n        return this._numberOfNextedValues;\n    }\n}\nclass WindowTimeSubscriber extends Subscriber {\n    constructor(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        super(destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        const window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            const closeState = { subscriber: this, window, context: null };\n            const creationState = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    _next(value) {\n        const windows = this.windows;\n        const len = windows.length;\n        for (let i = 0; i < len; i++) {\n            const window = windows[i];\n            if (!window.closed) {\n                window.next(value);\n                if (window.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window);\n                }\n            }\n        }\n    }\n    _error(err) {\n        const windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const windows = this.windows;\n        while (windows.length > 0) {\n            const window = windows.shift();\n            if (!window.closed) {\n                window.complete();\n            }\n        }\n        this.destination.complete();\n    }\n    openWindow() {\n        const window = new CountedSubject();\n        this.windows.push(window);\n        const destination = this.destination;\n        destination.next(window);\n        return window;\n    }\n    closeWindow(window) {\n        window.complete();\n        const windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    }\n}\nfunction dispatchWindowTimeSpanOnly(state) {\n    const { subscriber, windowTimeSpan, window } = state;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n    const window = subscriber.openWindow();\n    const action = this;\n    let context = { action, subscription: null };\n    const timeSpanState = { subscriber, window, context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    const { subscriber, window, context } = state;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map"]},"metadata":{},"sourceType":"module"}