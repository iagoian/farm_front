{"ast":null,"code":"import _get from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\nvar RetryWhenOperator = /*#__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    _classCallCheck(this, RetryWhenOperator);\n    this.notifier = notifier;\n    this.source = source;\n  }\n  _createClass(RetryWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n  }]);\n  return RetryWhenOperator;\n}();\nvar RetryWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(RetryWhenSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(RetryWhenSubscriber);\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this;\n    _classCallCheck(this, RetryWhenSubscriber);\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n  _createClass(RetryWhenSubscriber, [{\n    key: \"error\",\n    value: function error(err) {\n      if (!this.isStopped) {\n        var errors = this.errors;\n        var retries = this.retries;\n        var retriesSubscription = this.retriesSubscription;\n        if (!retries) {\n          errors = new Subject();\n          try {\n            var notifier = this.notifier;\n            retries = notifier(errors);\n          } catch (e) {\n            return _get(_getPrototypeOf(RetryWhenSubscriber.prototype), \"error\", this).call(this, e);\n          }\n          retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n        } else {\n          this.errors = undefined;\n          this.retriesSubscription = undefined;\n        }\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        errors.next(err);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var errors = this.errors,\n        retriesSubscription = this.retriesSubscription;\n      if (errors) {\n        errors.unsubscribe();\n        this.errors = undefined;\n      }\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = undefined;\n      }\n      this.retries = undefined;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n      this._unsubscribeAndRecycle();\n      this._unsubscribe = _unsubscribe;\n      this.source.subscribe(this);\n    }\n  }]);\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/retryWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,OAAO,QAAQ,YAAY;AAIpC,SAAS,qBAAqB,EAAE,cAAc,EAAE,qBAAqB,QAAQ,mBAAmB;AAgBhG,OAAM,SAAU,SAAS,CAAI,QAAsD,EAAA;EACjF,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;EAAA;AACxF;AAAC,IAEK,iBAAiB;EACrB,2BAAsB,QAAsD,EACtD,MAAqB,EAAA;IAAA;IADrB,IAAA,CAAA,QAAQ,GAAR,QAAQ;IACR,IAAA,CAAA,MAAM,GAAN,MAAM;EAC5B;EAAC;IAAA;IAAA,OAED,cAAK,UAAyB,EAAE,MAAW,EAAA;MACzC,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1F;EAAC;EAAA;AAAA;AAAA,IAQG,mBAA0B;EAAA;EAAA;EAM9B,6BAAY,WAA0B,EAClB,QAAsD,EACtD,MAAqB,EAAA;IAAA;IAAA;IACvC,0BAAM,WAAW;IAFC,MAAA,QAAQ,GAAR,QAAQ;IACR,MAAA,MAAM,GAAN,MAAM;IAAe;EAEzC;EAAC;IAAA;IAAA,OAED,eAAM,GAAQ,EAAA;MACZ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QAEnB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM;QACxB,IAAI,OAAO,GAAQ,IAAI,CAAC,OAAO;QAC/B,IAAI,mBAAmB,GAAG,IAAI,CAAC,mBAAmB;QAElD,IAAI,CAAC,OAAO,EAAE;UACZ,MAAM,GAAG,IAAI,OAAO,EAAE;UACtB,IAAI;YACF,IAAQ,QAAQ,GAAK,IAAI,CAAjB,QAAQ;YAChB,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC;WAC3B,CAAC,OAAO,CAAC,EAAE;YACV,sFAAmB,CAAC;UACrB;UACD,mBAAmB,GAAG,cAAc,CAAC,OAAO,EAAE,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;SAC/E,MAAM;UACL,IAAI,CAAC,MAAM,GAAG,SAAS;UACvB,IAAI,CAAC,mBAAmB,GAAG,SAAS;QACrC;QAED,IAAI,CAAC,sBAAsB,EAAE;QAE7B,IAAI,CAAC,MAAM,GAAG,MAAM;QACpB,IAAI,CAAC,OAAO,GAAG,OAAO;QACtB,IAAI,CAAC,mBAAmB,GAAG,mBAAmB;QAE9C,MAAO,CAAC,IAAI,CAAC,GAAG,CAAC;MAClB;IACH;EAAC;IAAA;IAAA,OAGD,wBAAY;MACV,IAAQ,MAAM,GAA0B,IAAI,CAApC,MAAM;QAAE,mBAAmB,GAAK,IAAI,CAA5B,mBAAmB;MACnC,IAAI,MAAM,EAAE;QACV,MAAM,CAAC,WAAW,EAAE;QACpB,IAAI,CAAC,MAAM,GAAG,SAAS;MACxB;MACD,IAAI,mBAAmB,EAAE;QACvB,mBAAmB,CAAC,WAAW,EAAE;QACjC,IAAI,CAAC,mBAAmB,GAAG,SAAS;MACrC;MACD,IAAI,CAAC,OAAO,GAAG,SAAS;IAC1B;EAAC;IAAA;IAAA,OAED,sBAAU;MACR,IAAQ,YAAY,GAAK,IAAI,CAArB,YAAY;MAEpB,IAAI,CAAC,YAAY,GAAG,IAAK;MACzB,IAAI,CAAC,sBAAsB,EAAE;MAC7B,IAAI,CAAC,YAAY,GAAG,YAAY;MAEhC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B;EAAC;EAAA;AAAA,EAjEqC,qBAA2B","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n//# sourceMappingURL=retryWhen.js.map"]},"metadata":{},"sourceType":"module"}