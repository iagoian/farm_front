{"ast":null,"code":"/**\n * @module ol/style/Fill\n */\nimport { getUid } from '../util.js';\nimport { asString } from '../color.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nvar Fill = function Fill(opt_options) {\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n   */\n  this.color_ = options.color !== undefined ? options.color : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.checksum_ = undefined;\n};\n\n/**\n * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n * @return {Fill} The cloned style.\n * @api\n */\nFill.prototype.clone = function clone() {\n  var color = this.getColor();\n  return new Fill({\n    color: Array.isArray(color) ? color.slice() : color || undefined\n  });\n};\n\n/**\n * Get the fill color.\n * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n * @api\n */\nFill.prototype.getColor = function getColor() {\n  return this.color_;\n};\n\n/**\n * Set the color.\n *\n * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n * @api\n */\nFill.prototype.setColor = function setColor(color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n\n/**\n * @return {string} The checksum.\n */\nFill.prototype.getChecksum = function getChecksum() {\n  if (this.checksum_ === undefined) {\n    var color = this.color_;\n    if (color) {\n      if (Array.isArray(color) || typeof color == 'string') {\n        this.checksum_ = 'f' + asString( /** @type {import(\"../color.js\").Color|string} */color);\n      } else {\n        this.checksum_ = getUid(this.color_);\n      }\n    } else {\n      this.checksum_ = 'f-';\n    }\n  }\n  return this.checksum_;\n};\nexport default Fill;","map":{"version":3,"sources":["../../../src/ol/style/Fill.js"],"names":["const"],"mappings":"AAAA;;;AAGA,SAAQ,MAAM,QAAO,YAAY;AACjC,SAAQ,QAAQ,QAAO,aAAa;;;;;;;;;;;;;;AAgBpC,IAAM,IAAI,GAIR,SAAA,IAAW,CAAC,WAAW,EAAE;EAEvBA,IAAM,OAAO,GAAG,WAAW,IAAI,CAAA,CAAE;;EAEjC;AACD;AACA;AACA;EACC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI;;EAEhE;AACD;AACA;AACA;EACC,IAAI,CAAC,SAAS,GAAG,SAAS;AAC5B,CAAA;;AAEA;AACD;AACA;AACA;AACA;AACD,IAAA,CAAA,SAAA,CAAE,KAAA,GAAA,SAAA,KAAA,GAAQ;EACNA,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;EAC7B,OAAO,IAAI,IAAI,CAAC;IACd,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,GAAG,KAAK,IAAI;EACzD,CAAC,CAAC;AACJ,CAAA;;AAEA;AACD;AACA;AACA;AACA;AACD,IAAA,CAAA,SAAA,CAAE,QAAA,GAAA,SAAA,QAAA,GAAW;EACT,OAAO,IAAI,CAAC,MAAM;AACpB,CAAA;;AAEA;AACD;AACA;AACA;AACA;AACA;AACD,IAAA,CAAA,SAAA,CAAE,QAAA,GAAA,SAAA,QAAA,CAAS,KAAK,EAAE;EACd,IAAI,CAAC,MAAM,GAAG,KAAK;EACnB,IAAI,CAAC,SAAS,GAAG,SAAS;AAC5B,CAAA;;AAEA;AACD;AACA;AACD,IAAA,CAAA,SAAA,CAAE,WAAA,GAAA,SAAA,WAAA,GAAc;EACZ,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;IAChCA,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM;IACzB,IAAI,KAAK,EAAE;MACT,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE;QACpD,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,QAAQ,EAAA,iDAAoD,KAAK,CAAE;MAC5F,CAAC,MAAM;QACL,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;MACtC;IACF,CAAC,MAAM;MACL,IAAI,CAAC,SAAS,GAAG,IAAI;IACvB;EACF;EAEA,OAAO,IAAI,CAAC,SAAS;AACvB,CAAC;AAGH,eAAe,IAAI","sourcesContent":["/**\n * @module ol/style/Fill\n */\nimport {getUid} from '../util.js';\nimport {asString} from '../color.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * @return {string} The checksum.\n   */\n  getChecksum() {\n    if (this.checksum_ === undefined) {\n      const color = this.color_;\n      if (color) {\n        if (Array.isArray(color) || typeof color == 'string') {\n          this.checksum_ = 'f' + asString(/** @type {import(\"../color.js\").Color|string} */ (color));\n        } else {\n          this.checksum_ = getUid(this.color_);\n        }\n      } else {\n        this.checksum_ = 'f-';\n      }\n    }\n\n    return this.checksum_;\n  }\n}\n\nexport default Fill;\n"]},"metadata":{},"sourceType":"module"}