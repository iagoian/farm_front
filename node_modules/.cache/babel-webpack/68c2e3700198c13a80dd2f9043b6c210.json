{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n    };\n  }\n  return function (source) {\n    return source.lift(new DelayWhenOperator(delayDurationSelector));\n  };\n}\nvar DelayWhenOperator = /*#__PURE__*/function () {\n  function DelayWhenOperator(delayDurationSelector) {\n    _classCallCheck(this, DelayWhenOperator);\n    this.delayDurationSelector = delayDurationSelector;\n  }\n  _createClass(DelayWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n  }]);\n  return DelayWhenOperator;\n}();\nvar DelayWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(DelayWhenSubscriber, _OuterSubscriber);\n  var _super = _createSuper(DelayWhenSubscriber);\n  function DelayWhenSubscriber(destination, delayDurationSelector) {\n    var _this;\n    _classCallCheck(this, DelayWhenSubscriber);\n    _this = _super.call(this, destination);\n    _this.delayDurationSelector = delayDurationSelector;\n    _this.completed = false;\n    _this.delayNotifierSubscriptions = [];\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(DelayWhenSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n      this.destination.next(outerValue);\n      this.removeSubscription(innerSub);\n      this.tryComplete();\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(error, innerSub) {\n      this._error(error);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var value = this.removeSubscription(innerSub);\n      if (value) {\n        this.destination.next(value);\n      }\n      this.tryComplete();\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      var index = this.index++;\n      try {\n        var delayNotifier = this.delayDurationSelector(value, index);\n        if (delayNotifier) {\n          this.tryDelay(delayNotifier, value);\n        }\n      } catch (err) {\n        this.destination.error(err);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.completed = true;\n      this.tryComplete();\n      this.unsubscribe();\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      subscription.unsubscribe();\n      var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n      if (subscriptionIdx !== -1) {\n        this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      }\n      return subscription.outerValue;\n    }\n  }, {\n    key: \"tryDelay\",\n    value: function tryDelay(delayNotifier, value) {\n      var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n      if (notifierSubscription && !notifierSubscription.closed) {\n        var destination = this.destination;\n        destination.add(notifierSubscription);\n        this.delayNotifierSubscriptions.push(notifierSubscription);\n      }\n    }\n  }, {\n    key: \"tryComplete\",\n    value: function tryComplete() {\n      if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n        this.destination.complete();\n      }\n    }\n  }]);\n  return DelayWhenSubscriber;\n}(OuterSubscriber);\nvar SubscriptionDelayObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(SubscriptionDelayObservable, _Observable);\n  var _super2 = _createSuper(SubscriptionDelayObservable);\n  function SubscriptionDelayObservable(source, subscriptionDelay) {\n    var _this2;\n    _classCallCheck(this, SubscriptionDelayObservable);\n    _this2 = _super2.call(this);\n    _this2.source = source;\n    _this2.subscriptionDelay = subscriptionDelay;\n    return _this2;\n  }\n  _createClass(SubscriptionDelayObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n  }]);\n  return SubscriptionDelayObservable;\n}(Observable);\nvar SubscriptionDelaySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(SubscriptionDelaySubscriber, _Subscriber);\n  var _super3 = _createSuper(SubscriptionDelaySubscriber);\n  function SubscriptionDelaySubscriber(parent, source) {\n    var _this3;\n    _classCallCheck(this, SubscriptionDelaySubscriber);\n    _this3 = _super3.call(this);\n    _this3.parent = parent;\n    _this3.source = source;\n    _this3.sourceSubscribed = false;\n    return _this3;\n  }\n  _createClass(SubscriptionDelaySubscriber, [{\n    key: \"_next\",\n    value: function _next(unused) {\n      this.subscribeToSource();\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.unsubscribe();\n      this.parent.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.unsubscribe();\n      this.subscribeToSource();\n    }\n  }, {\n    key: \"subscribeToSource\",\n    value: function subscribeToSource() {\n      if (!this.sourceSubscribed) {\n        this.sourceSubscribed = true;\n        this.unsubscribe();\n        this.source.subscribe(this.parent);\n      }\n    }\n  }]);\n  return SubscriptionDelaySubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/delayWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n    }\n    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\nclass DelayWhenOperator {\n    constructor(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n}\nclass DelayWhenSubscriber extends OuterSubscriber {\n    constructor(destination, delayDurationSelector) {\n        super(destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.index = 0;\n    }\n    notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        const value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    }\n    _next(value) {\n        const index = this.index++;\n        try {\n            const delayNotifier = this.delayDurationSelector(value, index);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.completed = true;\n        this.tryComplete();\n        this.unsubscribe();\n    }\n    removeSubscription(subscription) {\n        subscription.unsubscribe();\n        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        if (subscriptionIdx !== -1) {\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n        }\n        return subscription.outerValue;\n    }\n    tryDelay(delayNotifier, value) {\n        const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            const destination = this.destination;\n            destination.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n    }\n    tryComplete() {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    }\n}\nclass SubscriptionDelayObservable extends Observable {\n    constructor(source, subscriptionDelay) {\n        super();\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    _subscribe(subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n}\nclass SubscriptionDelaySubscriber extends Subscriber {\n    constructor(parent, source) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    _next(unused) {\n        this.subscribeToSource();\n    }\n    _error(err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    }\n    _complete() {\n        this.unsubscribe();\n        this.subscribeToSource();\n    }\n    subscribeToSource() {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    }\n}\n//# sourceMappingURL=delayWhen.js.map"]},"metadata":{},"sourceType":"module"}