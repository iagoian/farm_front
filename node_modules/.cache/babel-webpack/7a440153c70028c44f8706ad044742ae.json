{"ast":null,"code":"import _get from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\nvar RepeatWhenOperator = /*#__PURE__*/function () {\n  function RepeatWhenOperator(notifier) {\n    _classCallCheck(this, RepeatWhenOperator);\n    this.notifier = notifier;\n  }\n  _createClass(RepeatWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n  }]);\n  return RepeatWhenOperator;\n}();\nvar RepeatWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(RepeatWhenSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(RepeatWhenSubscriber);\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    var _this;\n    _classCallCheck(this, RepeatWhenSubscriber);\n    _this = _super.call(this, destination);\n    _this.notifier = notifier;\n    _this.source = source;\n    _this.sourceIsBeingSubscribedTo = true;\n    return _this;\n  }\n  _createClass(RepeatWhenSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.sourceIsBeingSubscribedTo = true;\n      this.source.subscribe(this);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.sourceIsBeingSubscribedTo === false) {\n        return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n      }\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.sourceIsBeingSubscribedTo = false;\n      if (!this.isStopped) {\n        if (!this.retries) {\n          this.subscribeToRetries();\n        }\n        if (!this.retriesSubscription || this.retriesSubscription.closed) {\n          return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n        }\n        this._unsubscribeAndRecycle();\n        this.notifications.next(undefined);\n      }\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var notifications = this.notifications,\n        retriesSubscription = this.retriesSubscription;\n      if (notifications) {\n        notifications.unsubscribe();\n        this.notifications = undefined;\n      }\n      if (retriesSubscription) {\n        retriesSubscription.unsubscribe();\n        this.retriesSubscription = undefined;\n      }\n      this.retries = undefined;\n    }\n  }, {\n    key: \"_unsubscribeAndRecycle\",\n    value: function _unsubscribeAndRecycle() {\n      var _unsubscribe = this._unsubscribe;\n      this._unsubscribe = null;\n      _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"_unsubscribeAndRecycle\", this).call(this);\n      this._unsubscribe = _unsubscribe;\n      return this;\n    }\n  }, {\n    key: \"subscribeToRetries\",\n    value: function subscribeToRetries() {\n      this.notifications = new Subject();\n      var retries;\n      try {\n        var notifier = this.notifier;\n        retries = notifier(this.notifications);\n      } catch (e) {\n        return _get(_getPrototypeOf(RepeatWhenSubscriber.prototype), \"complete\", this).call(this);\n      }\n      this.retries = retries;\n      this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n  }]);\n  return RepeatWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,OAAO,QAAQ,YAAY;AAIpC,SAAS,qBAAqB,EAAE,cAAc,EAAE,qBAAqB,QAAQ,mBAAmB;AAgChG,OAAM,SAAU,UAAU,CAAI,QAA6D,EAAA;EACzF,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,QAAQ,CAAC,CAAC;EAAA;AACjF;AAAC,IAEK,kBAAkB;EACtB,4BAAsB,QAA6D,EAAA;IAAA;IAA7D,IAAA,CAAA,QAAQ,GAAR,QAAQ;EAC9B;EAAC;IAAA;IAAA,OAED,cAAK,UAAyB,EAAE,MAAW,EAAA;MACzC,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,oBAAoB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACtF;EAAC;EAAA;AAAA;AAAA,IAQG,oBAA2B;EAAA;EAAA;EAO/B,8BAAY,WAA0B,EAClB,QAA6D,EAC7D,MAAqB,EAAA;IAAA;IAAA;IACvC,0BAAM,WAAW;IAFC,MAAA,QAAQ,GAAR,QAAQ;IACR,MAAA,MAAM,GAAN,MAAM;IAJlB,MAAA,yBAAyB,GAAY,IAAI;IAAC;EAMlD;EAAC;IAAA;IAAA,OAED,sBAAU;MACR,IAAI,CAAC,yBAAyB,GAAG,IAAI;MACrC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;IAC7B;EAAC;IAAA;IAAA,OAED,0BAAc;MACZ,IAAI,IAAI,CAAC,yBAAyB,KAAK,KAAK,EAAE;QAC5C;MACD;IACH;EAAC;IAAA;IAAA,OAED,oBAAQ;MACN,IAAI,CAAC,yBAAyB,GAAG,KAAK;MAEtC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QACnB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;UACjB,IAAI,CAAC,kBAAkB,EAAE;QAC1B;QACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE;UAChE;QACD;QAED,IAAI,CAAC,sBAAsB,EAAE;QAC7B,IAAI,CAAC,aAAc,CAAC,IAAI,CAAC,SAAS,CAAC;MACpC;IACH;EAAC;IAAA;IAAA,OAGD,wBAAY;MACV,IAAQ,aAAa,GAA0B,IAAI,CAA3C,aAAa;QAAE,mBAAmB,GAAK,IAAI,CAA5B,mBAAmB;MAC1C,IAAI,aAAa,EAAE;QACjB,aAAa,CAAC,WAAW,EAAE;QAC3B,IAAI,CAAC,aAAa,GAAG,SAAS;MAC/B;MACD,IAAI,mBAAmB,EAAE;QACvB,mBAAmB,CAAC,WAAW,EAAE;QACjC,IAAI,CAAC,mBAAmB,GAAG,SAAS;MACrC;MACD,IAAI,CAAC,OAAO,GAAG,SAAS;IAC1B;EAAC;IAAA;IAAA,OAGD,kCAAsB;MACpB,IAAQ,YAAY,GAAK,IAAI,CAArB,YAAY;MAEpB,IAAI,CAAC,YAAY,GAAG,IAAK;MACzB;MACA,IAAI,CAAC,YAAY,GAAG,YAAY;MAEhC,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAEO,8BAAkB;MACxB,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,EAAE;MAClC,IAAI,OAAO;MACX,IAAI;QACF,IAAQ,QAAQ,GAAK,IAAI,CAAjB,QAAQ;QAChB,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC;OACvC,CAAC,OAAO,CAAC,EAAE;QACV;MACD;MACD,IAAI,CAAC,OAAO,GAAG,OAAO;MACtB,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC,OAAO,EAAE,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACrF;EAAC;EAAA;AAAA,EA5EsC,qBAA2B","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n    return (source) => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n}\nclass RepeatWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    notifyNext() {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    }\n    notifyComplete() {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return super.complete();\n        }\n    }\n    complete() {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return super.complete();\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next(undefined);\n        }\n    }\n    _unsubscribe() {\n        const { notifications, retriesSubscription } = this;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    _unsubscribeAndRecycle() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        super._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        return this;\n    }\n    subscribeToRetries() {\n        this.notifications = new Subject();\n        let retries;\n        try {\n            const { notifier } = this;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return super.complete();\n        }\n        this.retries = retries;\n        this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n}\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"module"}