{"ast":null,"code":"/**\n * @module ol/geom/GeometryCollection\n */\nimport { listen, unlisten } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { createOrUpdateEmpty, closestSquaredDistanceXY, extend, getCenter } from '../extent.js';\nimport Geometry from './Geometry.js';\nimport GeometryType from './GeometryType.js';\nimport { clear } from '../obj.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry} objects.\n *\n * @api\n */\nvar GeometryCollection = /*@__PURE__*/function (Geometry) {\n  function GeometryCollection(opt_geometries) {\n    Geometry.call(this);\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = opt_geometries ? opt_geometries : null;\n    this.listenGeometriesChange_();\n  }\n  if (Geometry) GeometryCollection.__proto__ = Geometry;\n  GeometryCollection.prototype = Object.create(Geometry && Geometry.prototype);\n  GeometryCollection.prototype.constructor = GeometryCollection;\n\n  /**\n   * @private\n   */\n  GeometryCollection.prototype.unlistenGeometriesChange_ = function unlistenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      unlisten(this.geometries_[i], EventType.CHANGE, this.changed, this);\n    }\n  };\n\n  /**\n   * @private\n   */\n  GeometryCollection.prototype.listenGeometriesChange_ = function listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      listen(this.geometries_[i], EventType.CHANGE, this.changed, this);\n    }\n  };\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @override\n   * @api\n   */\n  GeometryCollection.prototype.clone = function clone() {\n    var geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    return geometryCollection;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeometryCollection.prototype.closestPointXY = function closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n    }\n    return minSquaredDistance;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeometryCollection.prototype.containsXY = function containsXY(x, y) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeometryCollection.prototype.computeExtent = function computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  };\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  GeometryCollection.prototype.getGeometries = function getGeometries() {\n    return cloneGeometries(this.geometries_);\n  };\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  GeometryCollection.prototype.getGeometriesArray = function getGeometriesArray() {\n    return this.geometries_;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeometryCollection.prototype.getSimplifiedGeometry = function getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n    var key = squaredTolerance.toString();\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      var simplifiedGeometries = [];\n      var geometries = this.geometries_;\n      var simplified = false;\n      for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        var geometry = geometries[i];\n        var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n        simplifiedGeometries.push(simplifiedGeometry);\n        if (simplifiedGeometry !== geometry) {\n          simplified = true;\n        }\n      }\n      if (simplified) {\n        var simplifiedGeometryCollection = new GeometryCollection(null);\n        simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n        this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;\n        return simplifiedGeometryCollection;\n      } else {\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  GeometryCollection.prototype.getType = function getType() {\n    return GeometryType.GEOMETRY_COLLECTION;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  GeometryCollection.prototype.intersectsExtent = function intersectsExtent(extent) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  GeometryCollection.prototype.isEmpty = function isEmpty() {\n    return this.geometries_.length === 0;\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  GeometryCollection.prototype.rotate = function rotate(angle, anchor) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  GeometryCollection.prototype.scale = function scale(sx, opt_sy, opt_anchor) {\n    var anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n    this.changed();\n  };\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  GeometryCollection.prototype.setGeometries = function setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  };\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  GeometryCollection.prototype.setGeometriesArray = function setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  GeometryCollection.prototype.applyTransform = function applyTransform(transformFn) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  GeometryCollection.prototype.translate = function translate(deltaX, deltaY) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeometryCollection.prototype.disposeInternal = function disposeInternal() {\n    this.unlistenGeometriesChange_();\n    Geometry.prototype.disposeInternal.call(this);\n  };\n  return GeometryCollection;\n}(Geometry);\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  var clonedGeometries = [];\n  for (var i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\nexport default GeometryCollection;","map":{"version":3,"sources":["../../../src/ol/geom/GeometryCollection.js"],"names":["super","let","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/geom/GeometryCollection\n */\nimport {listen, unlisten} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {createOrUpdateEmpty, closestSquaredDistanceXY, extend, getCenter} from '../extent.js';\nimport Geometry from './Geometry.js';\nimport GeometryType from './GeometryType.js';\nimport {clear} from '../obj.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n\n  /**\n   * @param {Array<Geometry>=} opt_geometries Geometries.\n   */\n  constructor(opt_geometries) {\n\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = opt_geometries ? opt_geometries : null;\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      unlisten(\n        this.geometries_[i], EventType.CHANGE,\n        this.changed, this);\n    }\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      listen(\n        this.geometries_[i], EventType.CHANGE,\n        this.changed, this);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    return geometryCollection;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x, y, closestPoint, minSquaredDistance);\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision != this.getRevision()) {\n      clear(this.simplifiedGeometryCache);\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (squaredTolerance < 0 ||\n        (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n         squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n      return this;\n    }\n    const key = squaredTolerance.toString();\n    if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n      return this.simplifiedGeometryCache[key];\n    } else {\n      const simplifiedGeometries = [];\n      const geometries = this.geometries_;\n      let simplified = false;\n      for (let i = 0, ii = geometries.length; i < ii; ++i) {\n        const geometry = geometries[i];\n        const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n        simplifiedGeometries.push(simplifiedGeometry);\n        if (simplifiedGeometry !== geometry) {\n          simplified = true;\n        }\n      }\n      if (simplified) {\n        const simplifiedGeometryCollection = new GeometryCollection(null);\n        simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n        this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;\n        return simplifiedGeometryCollection;\n      } else {\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.GEOMETRY_COLLECTION;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    let anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\n\nexport default GeometryCollection;\n"]},"metadata":{},"sourceType":"module"}