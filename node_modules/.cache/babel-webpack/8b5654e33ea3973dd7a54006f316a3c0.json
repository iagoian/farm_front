{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nexport var MergeMapOperator = /*#__PURE__*/function () {\n  function MergeMapOperator(project) {\n    var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n    _classCallCheck(this, MergeMapOperator);\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n  _createClass(MergeMapOperator, [{\n    key: \"call\",\n    value: function call(observer, source) {\n      return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n  }]);\n  return MergeMapOperator;\n}();\nexport var MergeMapSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(MergeMapSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(MergeMapSubscriber);\n  function MergeMapSubscriber(destination, project) {\n    var _this;\n    var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n    _classCallCheck(this, MergeMapSubscriber);\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(MergeMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        this._tryNext(value);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_tryNext\",\n    value: function _tryNext(value) {\n      var result;\n      var index = this.index++;\n      try {\n        result = this.project(value, index);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n      this.active++;\n      this._innerSub(result);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (this.active === 0 && this.buffer.length === 0) {\n        this.destination.complete();\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\nexport var flatMap = mergeMap;","map":{"version":3,"sources":["../../../src/internal/operators/mergeMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\nexport const flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map"]},"metadata":{},"sourceType":"module"}