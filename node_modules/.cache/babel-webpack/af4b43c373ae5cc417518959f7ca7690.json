{"ast":null,"code":"/**\n * @module ol/style/Style\n */\n\n/**\n * Feature styles.\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n */\nimport { assert } from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\n\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State)}\n * RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n * @api\n */\nvar Style = function Style(opt_options) {\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   */\n  this.geometry_ = null;\n\n  /**\n   * @private\n   * @type {!GeometryFunction}\n   */\n  this.geometryFunction_ = defaultGeometryFunction;\n  if (options.geometry !== undefined) {\n    this.setGeometry(options.geometry);\n  }\n\n  /**\n   * @private\n   * @type {import(\"./Fill.js\").default}\n   */\n  this.fill_ = options.fill !== undefined ? options.fill : null;\n\n  /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n  this.image_ = options.image !== undefined ? options.image : null;\n\n  /**\n   * @private\n   * @type {RenderFunction|null}\n   */\n  this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n  /**\n   * @private\n   * @type {import(\"./Stroke.js\").default}\n   */\n  this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n  /**\n   * @private\n   * @type {import(\"./Text.js\").default}\n   */\n  this.text_ = options.text !== undefined ? options.text : null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.zIndex_ = options.zIndex;\n};\n\n/**\n * Clones the style.\n * @return {Style} The cloned style.\n * @api\n */\nStyle.prototype.clone = function clone() {\n  var geometry = this.getGeometry();\n  if (geometry && typeof geometry === 'object') {\n    geometry = /** @type {import(\"../geom/Geometry.js\").default} */geometry.clone();\n  }\n  return new Style({\n    geometry: geometry,\n    fill: this.getFill() ? this.getFill().clone() : undefined,\n    image: this.getImage() ? this.getImage().clone() : undefined,\n    stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n    text: this.getText() ? this.getText().clone() : undefined,\n    zIndex: this.getZIndex()\n  });\n};\n\n/**\n * Get the custom renderer function that was configured with\n * {@link #setRenderer} or the `renderer` constructor option.\n * @return {RenderFunction|null} Custom renderer function.\n * @api\n */\nStyle.prototype.getRenderer = function getRenderer() {\n  return this.renderer_;\n};\n\n/**\n * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n * and `image` options of the style will be ignored.\n * @param {RenderFunction|null} renderer Custom renderer function.\n * @api\n */\nStyle.prototype.setRenderer = function setRenderer(renderer) {\n  this.renderer_ = renderer;\n};\n\n/**\n * Get the geometry to be rendered.\n * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n * Feature property or geometry or function that returns the geometry that will\n * be rendered with this style.\n * @api\n */\nStyle.prototype.getGeometry = function getGeometry() {\n  return this.geometry_;\n};\n\n/**\n * Get the function used to generate a geometry for rendering.\n * @return {!GeometryFunction} Function that is called with a feature\n * and returns the geometry to render instead of the feature's geometry.\n * @api\n */\nStyle.prototype.getGeometryFunction = function getGeometryFunction() {\n  return this.geometryFunction_;\n};\n\n/**\n * Get the fill style.\n * @return {import(\"./Fill.js\").default} Fill style.\n * @api\n */\nStyle.prototype.getFill = function getFill() {\n  return this.fill_;\n};\n\n/**\n * Set the fill style.\n * @param {import(\"./Fill.js\").default} fill Fill style.\n * @api\n */\nStyle.prototype.setFill = function setFill(fill) {\n  this.fill_ = fill;\n};\n\n/**\n * Get the image style.\n * @return {import(\"./Image.js\").default} Image style.\n * @api\n */\nStyle.prototype.getImage = function getImage() {\n  return this.image_;\n};\n\n/**\n * Set the image style.\n * @param {import(\"./Image.js\").default} image Image style.\n * @api\n */\nStyle.prototype.setImage = function setImage(image) {\n  this.image_ = image;\n};\n\n/**\n * Get the stroke style.\n * @return {import(\"./Stroke.js\").default} Stroke style.\n * @api\n */\nStyle.prototype.getStroke = function getStroke() {\n  return this.stroke_;\n};\n\n/**\n * Set the stroke style.\n * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n * @api\n */\nStyle.prototype.setStroke = function setStroke(stroke) {\n  this.stroke_ = stroke;\n};\n\n/**\n * Get the text style.\n * @return {import(\"./Text.js\").default} Text style.\n * @api\n */\nStyle.prototype.getText = function getText() {\n  return this.text_;\n};\n\n/**\n * Set the text style.\n * @param {import(\"./Text.js\").default} text Text style.\n * @api\n */\nStyle.prototype.setText = function setText(text) {\n  this.text_ = text;\n};\n\n/**\n * Get the z-index for the style.\n * @return {number|undefined} ZIndex.\n * @api\n */\nStyle.prototype.getZIndex = function getZIndex() {\n  return this.zIndex_;\n};\n\n/**\n * Set a geometry that is rendered instead of the feature's geometry.\n *\n * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n *   Feature property or geometry or function returning a geometry to render\n *   for this style.\n * @api\n */\nStyle.prototype.setGeometry = function setGeometry(geometry) {\n  if (typeof geometry === 'function') {\n    this.geometryFunction_ = geometry;\n  } else if (typeof geometry === 'string') {\n    this.geometryFunction_ = function (feature) {\n      return (/** @type {import(\"../geom/Geometry.js\").default} */feature.get(geometry)\n      );\n    };\n  } else if (!geometry) {\n    this.geometryFunction_ = defaultGeometryFunction;\n  } else if (geometry !== undefined) {\n    this.geometryFunction_ = function () {\n      return (/** @type {import(\"../geom/Geometry.js\").default} */geometry\n      );\n    };\n  }\n  this.geometry_ = geometry;\n};\n\n/**\n * Set the z-index.\n *\n * @param {number|undefined} zIndex ZIndex.\n * @api\n */\nStyle.prototype.setZIndex = function setZIndex(zIndex) {\n  this.zIndex_ = zIndex;\n};\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  var styleFunction;\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    var styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */obj.getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`\n      var style = /** @type {Style} */obj;\n      styles = [style];\n    }\n    styleFunction = function styleFunction() {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>}\n */\nvar defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    var fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    var stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [new Style({\n      image: new CircleStyle({\n        fill: fill,\n        stroke: stroke,\n        radius: 5\n      }),\n      fill: fill,\n      stroke: stroke\n    })];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  var styles = {};\n  var white = [255, 255, 255, 1];\n  var blue = [0, 153, 255, 1];\n  var width = 3;\n  styles[GeometryType.POLYGON] = [new Style({\n    fill: new Fill({\n      color: [255, 255, 255, 0.5]\n    })\n  })];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n  styles[GeometryType.LINE_STRING] = [new Style({\n    stroke: new Stroke({\n      color: white,\n      width: width + 2\n    })\n  }), new Style({\n    stroke: new Stroke({\n      color: blue,\n      width: width\n    })\n  })];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING]);\n  styles[GeometryType.POINT] = [new Style({\n    image: new CircleStyle({\n      radius: width * 2,\n      fill: new Fill({\n        color: blue\n      }),\n      stroke: new Stroke({\n        color: white,\n        width: width / 2\n      })\n    }),\n    zIndex: Infinity\n  })];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[GeometryType.POLYGON].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\nexport default Style;","map":{"version":3,"sources":["../../../src/ol/style/Style.js"],"names":["const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/Style\n */\n\n/**\n * Feature styles.\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *\n *  var fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)'\n *  });\n *  var stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25\n *  });\n *  var styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5\n *      }),\n *      fill: fill,\n *      stroke: stroke\n *    })\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Fill, Stroke, Circle, Style} from 'ol/style';\n *  import GeometryType from 'ol/geom/GeometryType';\n *\n *  var white = [255, 255, 255, 1];\n *  var blue = [0, 153, 255, 1];\n *  var width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5]\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] =\n *      styles[GeometryType.POLYGON];\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2\n *      })\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width\n *      })\n *    })\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] =\n *      styles[GeometryType.LINE_STRING];\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2\n *        })\n *      }),\n *      zIndex: Infinity\n *    })\n *  ];\n *  styles[GeometryType.MULTI_POINT] =\n *      styles[GeometryType.POINT];\n *  styles[GeometryType.GEOMETRY_COLLECTION] =\n *      styles[GeometryType.POLYGON].concat(\n *          styles[GeometryType.LINE_STRING],\n *          styles[GeometryType.POINT]\n *      );\n * ```\n */\nimport {assert} from '../asserts.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\n\n\n/**\n * A function that takes an {@link module:ol/Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style} or an array of them. This way e.g. a\n * vector layer can be styled.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature} as argument and returns an\n * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State)}\n * RenderFunction\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n * @api\n */\nclass Style {\n  /**\n   * @param {Options=} opt_options Style options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n       * @private\n       * @type {import(\"./Image.js\").default}\n       */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry).clone();\n    }\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex()\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function(feature) {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */ (feature.get(geometry))\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function() {\n        return (\n          /** @type {import(\"../geom/Geometry.js\").default} */ (geometry)\n        );\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */ (obj).getZIndex === 'function',\n        41); // Expected an `Style` or an array of `Style`\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function() {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n\n/**\n * @type {Array<Style>}\n */\nlet defaultStyles = null;\n\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)'\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5\n        }),\n        fill: fill,\n        stroke: stroke\n      })\n    ];\n  }\n  return defaultStyles;\n}\n\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles[GeometryType.POLYGON] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5]\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_POLYGON] =\n      styles[GeometryType.POLYGON];\n\n  styles[GeometryType.LINE_STRING] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2\n      })\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width\n      })\n    })\n  ];\n  styles[GeometryType.MULTI_LINE_STRING] =\n      styles[GeometryType.LINE_STRING];\n\n  styles[GeometryType.CIRCLE] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING]\n      );\n\n\n  styles[GeometryType.POINT] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2\n        })\n      }),\n      zIndex: Infinity\n    })\n  ];\n  styles[GeometryType.MULTI_POINT] =\n      styles[GeometryType.POINT];\n\n  styles[GeometryType.GEOMETRY_COLLECTION] =\n      styles[GeometryType.POLYGON].concat(\n        styles[GeometryType.LINE_STRING],\n        styles[GeometryType.POINT]\n      );\n\n  return styles;\n}\n\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n"]},"metadata":{},"sourceType":"module"}