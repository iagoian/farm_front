{"ast":null,"code":"import _get from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\nvar BufferWhenOperator = /*#__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    _classCallCheck(this, BufferWhenOperator);\n    this.closingSelector = closingSelector;\n  }\n  _createClass(BufferWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n  }]);\n  return BufferWhenOperator;\n}();\nvar BufferWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(BufferWhenSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(BufferWhenSubscriber);\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this;\n    _classCallCheck(this, BufferWhenSubscriber);\n    _this = _super.call(this, destination);\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n    _this.openBuffer();\n    return _this;\n  }\n  _createClass(BufferWhenSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.buffer.push(value);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var buffer = this.buffer;\n      if (buffer) {\n        this.destination.next(buffer);\n      }\n      _get(_getPrototypeOf(BufferWhenSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.buffer = undefined;\n      this.subscribing = false;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.openBuffer();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.subscribing) {\n        this.complete();\n      } else {\n        this.openBuffer();\n      }\n    }\n  }, {\n    key: \"openBuffer\",\n    value: function openBuffer() {\n      var closingSubscription = this.closingSubscription;\n      if (closingSubscription) {\n        this.remove(closingSubscription);\n        closingSubscription.unsubscribe();\n      }\n      var buffer = this.buffer;\n      if (this.buffer) {\n        this.destination.next(buffer);\n      }\n      this.buffer = [];\n      var closingNotifier;\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector();\n      } catch (err) {\n        return this.error(err);\n      }\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n      this.subscribing = false;\n    }\n  }]);\n  return BufferWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/bufferWhen.ts"],"names":[],"mappings":";;;;;;AAGA,SAAS,YAAY,QAAQ,iBAAiB;AAE9C,SAAS,qBAAqB,EAAE,cAAc,EAAE,qBAAqB,QAAQ,mBAAmB;AA4ChG,OAAM,SAAU,UAAU,CAAI,eAAsC,EAAA;EAClE,OAAO,UAAU,MAAqB,EAAA;IACpC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,eAAe,CAAC,CAAC;EAC7D,CAAC;AACH;AAAC,IAEK,kBAAkB;EAEtB,4BAAoB,eAAsC,EAAA;IAAA;IAAtC,IAAA,CAAA,eAAe,GAAf,eAAe;EACnC;EAAC;IAAA;IAAA,OAED,cAAK,UAA2B,EAAE,MAAW,EAAA;MAC3C,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,oBAAoB,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACrF;EAAC;EAAA;AAAA;AAAA,IAQG,oBAAwB;EAAA;EAAA;EAK5B,8BAAY,WAA4B,EAAU,eAAsC,EAAA;IAAA;IAAA;IACtF,0BAAM,WAAW;IAD+B,MAAA,eAAe,GAAf,eAAe;IAHzD,MAAA,WAAW,GAAY,KAAK;IAKlC,MAAK,UAAU,EAAE;IAAC;EACpB;EAAC;IAAA;IAAA,OAES,eAAM,KAAQ,EAAA;MACtB,IAAI,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IAC1B;EAAC;IAAA;IAAA,OAES,qBAAS;MACjB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM;MAC1B,IAAI,MAAM,EAAE;QACV,IAAI,CAAC,WAAW,CAAC,IAAK,CAAC,MAAM,CAAC;MAC/B;MACD;IACF;EAAC;IAAA;IAAA,OAGD,wBAAY;MACV,IAAI,CAAC,MAAM,GAAG,SAAS;MACvB,IAAI,CAAC,WAAW,GAAG,KAAK;IAC1B;EAAC;IAAA;IAAA,OAED,sBAAU;MACR,IAAI,CAAC,UAAU,EAAE;IACnB;EAAC;IAAA;IAAA,OAED,0BAAc;MACZ,IAAI,IAAI,CAAC,WAAW,EAAE;QACpB,IAAI,CAAC,QAAQ,EAAE;OAChB,MAAM;QACL,IAAI,CAAC,UAAU,EAAE;MAClB;IACH;EAAC;IAAA;IAAA,OAED,sBAAU;MACR,IAAM,mBAAmB,GAAK,IAAI,CAA5B,mBAAmB;MAEzB,IAAI,mBAAmB,EAAE;QACvB,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC;QAChC,mBAAmB,CAAC,WAAW,EAAE;MAClC;MAED,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM;MAC1B,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,IAAI,CAAC,WAAW,CAAC,IAAK,CAAC,MAAM,CAAC;MAC/B;MAED,IAAI,CAAC,MAAM,GAAG,EAAE;MAEhB,IAAI,eAAe;MACnB,IAAI;QACF,IAAQ,eAAe,GAAK,IAAI,CAAxB,eAAe;QACvB,eAAe,GAAG,eAAe,EAAE;OACpC,CAAC,OAAO,GAAG,EAAE;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;MACvB;MACD,mBAAmB,GAAG,IAAI,YAAY,EAAE;MACxC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB;MAC9C,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC;MAC7B,IAAI,CAAC,WAAW,GAAG,IAAI;MACvB,mBAAmB,CAAC,GAAG,CAAC,cAAc,CAAC,eAAe,EAAE,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;MACzF,IAAI,CAAC,WAAW,GAAG,KAAK;IAC1B;EAAC;EAAA;AAAA,EApEmC,qBAA6B","sourcesContent":["import { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nclass BufferWhenOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass BufferWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    _complete() {\n        const buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.buffer = undefined;\n        this.subscribing = false;\n    }\n    notifyNext() {\n        this.openBuffer();\n    }\n    notifyComplete() {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    }\n    openBuffer() {\n        let { closingSubscription } = this;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        const buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (err) {\n            return this.error(err);\n        }\n        closingSubscription = new Subscription();\n        this.closingSubscription = closingSubscription;\n        this.add(closingSubscription);\n        this.subscribing = true;\n        closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n        this.subscribing = false;\n    }\n}\n//# sourceMappingURL=bufferWhen.js.map"]},"metadata":{},"sourceType":"module"}