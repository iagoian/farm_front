{"ast":null,"code":"import { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n  return new Observable(function (subscriber) {\n    var resource;\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    var result;\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    var source = result ? from(result) : EMPTY;\n    var subscription = source.subscribe(subscriber);\n    return function () {\n      subscription.unsubscribe();\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/using.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,eAAe;AAE1C,SAAS,IAAI,QAAQ,QAAQ;AAC7B,SAAS,KAAK,QAAQ,SAAS;AA8B/B,OAAM,SAAU,KAAK,CAAI,eAA4C,EAC5C,iBAAiF,EAAA;EACxG,OAAO,IAAI,UAAU,CAAI,UAAA,UAAU,EAAG;IACpC,IAAI,QAA+B;IAEnC,IAAI;MACF,QAAQ,GAAG,eAAe,EAAE;KAC7B,CAAC,OAAO,GAAG,EAAE;MACZ,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;MACrB,OAAO,SAAS;IACjB;IAED,IAAI,MAAiC;IACrC,IAAI;MACF,MAAM,GAAG,iBAAiB,CAAC,QAAQ,CAAC;KACrC,CAAC,OAAO,GAAG,EAAE;MACZ,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;MACrB,OAAO,SAAS;IACjB;IAED,IAAM,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK;IAC5C,IAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC;IACjD,OAAO,YAAK;MACV,YAAY,CAAC,WAAW,EAAE;MAC1B,IAAI,QAAQ,EAAE;QACZ,QAAQ,CAAC,WAAW,EAAE;MACvB;IACH,CAAC;EACH,CAAC,CAAC;AACJ","sourcesContent":["import { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n    return new Observable(subscriber => {\n        let resource;\n        try {\n            resource = resourceFactory();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        let result;\n        try {\n            result = observableFactory(resource);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        const source = result ? from(result) : EMPTY;\n        const subscription = source.subscribe(subscriber);\n        return () => {\n            subscription.unsubscribe();\n            if (resource) {\n                resource.unsubscribe();\n            }\n        };\n    });\n}\n//# sourceMappingURL=using.js.map"]},"metadata":{},"sourceType":"module"}