{"ast":null,"code":"import _get from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function switchMap(project, resultSelector) {\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(switchMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n  return function (source) {\n    return source.lift(new SwitchMapOperator(project));\n  };\n}\nvar SwitchMapOperator = /*#__PURE__*/function () {\n  function SwitchMapOperator(project) {\n    _classCallCheck(this, SwitchMapOperator);\n    this.project = project;\n  }\n  _createClass(SwitchMapOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n  }]);\n  return SwitchMapOperator;\n}();\nvar SwitchMapSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(SwitchMapSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(SwitchMapSubscriber);\n  function SwitchMapSubscriber(destination, project) {\n    var _this;\n    _classCallCheck(this, SwitchMapSubscriber);\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(SwitchMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var result;\n      var index = this.index++;\n      try {\n        result = this.project(value, index);\n      } catch (error) {\n        this.destination.error(error);\n        return;\n      }\n      this._innerSub(result);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(result) {\n      var innerSubscription = this.innerSubscription;\n      if (innerSubscription) {\n        innerSubscription.unsubscribe();\n      }\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      this.innerSubscription = innerSubscribe(result, innerSubscriber);\n      if (this.innerSubscription !== innerSubscriber) {\n        destination.add(this.innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var innerSubscription = this.innerSubscription;\n      if (!innerSubscription || innerSubscription.closed) {\n        _get(_getPrototypeOf(SwitchMapSubscriber.prototype), \"_complete\", this).call(this);\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.innerSubscription = undefined;\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      this.innerSubscription = undefined;\n      if (this.isStopped) {\n        _get(_getPrototypeOf(SwitchMapSubscriber.prototype), \"_complete\", this).call(this);\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.destination.next(innerValue);\n    }\n  }]);\n  return SwitchMapSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/switchMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new SwitchMapOperator(project));\n}\nclass SwitchMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n}\nclass SwitchMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.index = 0;\n    }\n    _next(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result);\n    }\n    _innerSub(result) {\n        const innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        this.innerSubscription = innerSubscribe(result, innerSubscriber);\n        if (this.innerSubscription !== innerSubscriber) {\n            destination.add(this.innerSubscription);\n        }\n    }\n    _complete() {\n        const { innerSubscription } = this;\n        if (!innerSubscription || innerSubscription.closed) {\n            super._complete();\n        }\n        this.unsubscribe();\n    }\n    _unsubscribe() {\n        this.innerSubscription = undefined;\n    }\n    notifyComplete() {\n        this.innerSubscription = undefined;\n        if (this.isStopped) {\n            super._complete();\n        }\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=switchMap.js.map"]},"metadata":{},"sourceType":"module"}