{"ast":null,"code":"import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function subscribeTo(result) {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\".concat(result, \"'\");\n    var msg = \"You provided \".concat(value, \" where a stream was expected.\") + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};","map":{"version":3,"sources":["../../../src/internal/util/subscribeTo.ts"],"names":[],"mappings":"AACA,SAAS,gBAAgB,QAAQ,oBAAoB;AACrD,SAAS,kBAAkB,QAAQ,sBAAsB;AACzD,SAAS,mBAAmB,QAAQ,uBAAuB;AAC3D,SAAS,qBAAqB,QAAQ,yBAAyB;AAC/D,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,QAAQ,QAAQ,YAAY;AACrC,SAAS,QAAQ,IAAI,eAAe,QAAQ,oBAAoB;AAChE,SAAS,UAAU,IAAI,iBAAiB,QAAQ,sBAAsB;AAItE,OAAO,IAAM,WAAW,GAAG,SAAd,WAAW,CAAO,MAA0B,EAAwD;EAC/G,IAAI,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,CAAC,iBAAiB,CAAC,KAAK,UAAU,EAAE;IAC/D,OAAO,qBAAqB,CAAC,MAAa,CAAC;GAC5C,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,EAAE;IAC9B,OAAO,gBAAgB,CAAC,MAAM,CAAC;GAChC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;IAC5B,OAAO,kBAAkB,CAAC,MAAsB,CAAC;GAClD,MAAM,IAAI,CAAC,CAAC,MAAM,IAAI,OAAO,MAAM,CAAC,eAAe,CAAC,KAAK,UAAU,EAAE;IACpE,OAAO,mBAAmB,CAAC,MAAa,CAAC;GAC1C,MAAM;IACL,IAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,mBAAmB,cAAO,MAAM,MAAG;IACpE,IAAM,GAAG,GAAG,uBAAgB,KAAK,qCAC7B,8DAA8D;IAClE,MAAM,IAAI,SAAS,CAAC,GAAG,CAAC;EACzB;AACH,CAAC","sourcesContent":["import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map"]},"metadata":{},"sourceType":"module"}