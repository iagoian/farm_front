{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return function (source) {\n      return source.pipe(exhaustMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n  return function (source) {\n    return source.lift(new ExhaustMapOperator(project));\n  };\n}\nvar ExhaustMapOperator = /*#__PURE__*/function () {\n  function ExhaustMapOperator(project) {\n    _classCallCheck(this, ExhaustMapOperator);\n    this.project = project;\n  }\n  _createClass(ExhaustMapOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    }\n  }]);\n  return ExhaustMapOperator;\n}();\nvar ExhaustMapSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(ExhaustMapSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(ExhaustMapSubscriber);\n  function ExhaustMapSubscriber(destination, project) {\n    var _this;\n    _classCallCheck(this, ExhaustMapSubscriber);\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.hasSubscription = false;\n    _this.hasCompleted = false;\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(ExhaustMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (!this.hasSubscription) {\n        this.tryNext(value);\n      }\n    }\n  }, {\n    key: \"tryNext\",\n    value: function tryNext(value) {\n      var result;\n      var index = this.index++;\n      try {\n        result = this.project(value, index);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n      this.hasSubscription = true;\n      this._innerSub(result);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(result) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(result, innerSubscriber);\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (!this.hasSubscription) {\n        this.destination.complete();\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.destination.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      this.hasSubscription = false;\n      if (this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n  return ExhaustMapSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/exhaustMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        return (source) => source.pipe(exhaustMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new ExhaustMapOperator(project));\n}\nclass ExhaustMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    }\n}\nclass ExhaustMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    _next(value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    }\n    tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.hasSubscription = true;\n        this._innerSub(result);\n    }\n    _innerSub(result) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(result, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n    notifyError(err) {\n        this.destination.error(err);\n    }\n    notifyComplete() {\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=exhaustMap.js.map"]},"metadata":{},"sourceType":"module"}