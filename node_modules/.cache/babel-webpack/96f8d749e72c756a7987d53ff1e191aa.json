{"ast":null,"code":"/**\n * @module ol/interaction/KeyboardPan\n */\nimport { rotate as rotateCoordinate } from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport Interaction, { pan } from './Interaction.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nvar KeyboardPan = /*@__PURE__*/function (Interaction) {\n  function KeyboardPan(opt_options) {\n    Interaction.call(this, {\n      handleEvent: handleEvent\n    });\n    var options = opt_options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n  if (Interaction) KeyboardPan.__proto__ = Interaction;\n  KeyboardPan.prototype = Object.create(Interaction && Interaction.prototype);\n  KeyboardPan.prototype.constructor = KeyboardPan;\n  return KeyboardPan;\n}(Interaction);\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardPan}\n */\nfunction handleEvent(mapBrowserEvent) {\n  var stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    var keyEvent = /** @type {KeyboardEvent} */mapBrowserEvent.originalEvent;\n    var keyCode = keyEvent.keyCode;\n    if (this.condition_(mapBrowserEvent) && (keyCode == KeyCode.DOWN || keyCode == KeyCode.LEFT || keyCode == KeyCode.RIGHT || keyCode == KeyCode.UP)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      var deltaX = 0,\n        deltaY = 0;\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n      var delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\nexport default KeyboardPan;","map":{"version":3,"sources":["../../../src/ol/interaction/KeyboardPan.js"],"names":["super","const","let"],"mappings":"AAAA;;;AAGA,SAAQ,MAAM,IAAI,gBAAgB,QAAO,kBAAkB;AAC3D,OAAO,SAAS,MAAM,wBAAwB;AAC9C,OAAO,OAAO,MAAM,sBAAsB;AAC1C,SAAQ,cAAc,EAAE,iBAAiB,QAAO,wBAAwB;AACxE,OAAO,WAAW,IAAG,GAAG,QAAO,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BjD,IAAM,WAAW,GAAoB,aAAA,UAAA,WAAA,EAAA;EAInC,SAAA,WAAW,CAAC,WAAW,EAAE;IAEvBA,WAAAA,CAAAA,IAAK,CAAA,IAAA,EAAC;MACJ,WAAW,EAAE;KACd,CAAC;IAEFC,IAAM,OAAO,GAAG,WAAW,IAAI,CAAA,CAAE;;;;;;;IAOjC,IAAI,CAAC,iBAAiB,GAAG,UAAS,eAAe,EAAE;MACjD,OAAO,cAAc,CAAC,eAAe,CAAC,IACpC,iBAAiB,CAAC,eAAe,CAAC;KACrC;;;;;;IAMD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,KAAK,SAAS,GAC/C,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB;;;;;;IAM5C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,KAAK,SAAS,GAAG,OAAO,CAAC,QAAQ,GAAG,GAAG;;;;;;IAMxE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,UAAU,KAAK,SAAS,GACjD,OAAO,CAAC,UAAU,GAAG,GAAG;;;;EAE3B,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,WAAA;;EA1CuB,WAAA,CAAA;;;;;;;;;;AAuD1B,SAAS,WAAW,CAAC,eAAe,EAAE;EACpCC,IAAI,SAAS,GAAG,KAAK;EACrB,IAAI,eAAe,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,EAAE;IAC7CD,IAAM,QAAQ,GAAA,4BAAiC,eAAe,CAAC,aAAc;IAC7EA,IAAM,OAAO,GAAG,QAAQ,CAAC,OAAO;IAChC,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,KAC/B,OAAO,IAAI,OAAO,CAAC,IAAI,IACxB,OAAO,IAAI,OAAO,CAAC,IAAI,IACvB,OAAO,IAAI,OAAO,CAAC,KAAK,IACxB,OAAO,IAAI,OAAO,CAAC,EAAE,CAAC,EAAE;MAC1BA,IAAM,GAAG,GAAG,eAAe,CAAC,GAAG;MAC/BA,IAAM,IAAI,GAAG,GAAG,CAAC,OAAO,EAAE;MAC1BA,IAAM,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,WAAW;MAC7DC,IAAI,MAAM,GAAG,CAAC;QAAE,MAAM,GAAG,CAAC;MAC1B,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;QAC3B,MAAM,GAAG,CAAC,aAAa;OACxB,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;QAClC,MAAM,GAAG,CAAC,aAAa;OACxB,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE;QACnC,MAAM,GAAG,aAAa;OACvB,MAAM;QACL,MAAM,GAAG,aAAa;MACvB;MACDD,IAAM,KAAK,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC;MAC9B,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;MAC3C,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC;MAChC,eAAe,CAAC,cAAc,EAAE;MAChC,SAAS,GAAG,IAAI;IACjB;EACF;EACD,OAAO,CAAC,SAAS;AAClB;AAED,eAAe,WAAW","sourcesContent":["/**\n * @module ol/interaction/KeyboardPan\n */\nimport {rotate as rotateCoordinate} from '../coordinate.js';\nimport EventType from '../events/EventType.js';\nimport KeyCode from '../events/KeyCode.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport Interaction, {pan} from './Interaction.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition~noModifierKeys} and\n * {@link module:ol/events/condition~targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    super({\n      handleEvent: handleEvent\n    });\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function(mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) &&\n        targetNotEditable(mapBrowserEvent);\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition !== undefined ?\n      options.condition : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ = options.pixelDelta !== undefined ?\n      options.pixelDelta : 128;\n\n  }\n\n}\n\n\n/**\n * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a\n * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n * pressed).\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} `false` to stop event propagation.\n * @this {KeyboardPan}\n */\nfunction handleEvent(mapBrowserEvent) {\n  let stopEvent = false;\n  if (mapBrowserEvent.type == EventType.KEYDOWN) {\n    const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);\n    const keyCode = keyEvent.keyCode;\n    if (this.condition_(mapBrowserEvent) &&\n        (keyCode == KeyCode.DOWN ||\n        keyCode == KeyCode.LEFT ||\n        keyCode == KeyCode.RIGHT ||\n        keyCode == KeyCode.UP)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n      let deltaX = 0, deltaY = 0;\n      if (keyCode == KeyCode.DOWN) {\n        deltaY = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.LEFT) {\n        deltaX = -mapUnitsDelta;\n      } else if (keyCode == KeyCode.RIGHT) {\n        deltaX = mapUnitsDelta;\n      } else {\n        deltaY = mapUnitsDelta;\n      }\n      const delta = [deltaX, deltaY];\n      rotateCoordinate(delta, view.getRotation());\n      pan(view, delta, this.duration_);\n      mapBrowserEvent.preventDefault();\n      stopEvent = true;\n    }\n  }\n  return !stopEvent;\n}\n\nexport default KeyboardPan;\n"]},"metadata":{},"sourceType":"module"}