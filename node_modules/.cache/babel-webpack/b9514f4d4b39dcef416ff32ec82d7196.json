{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n  return function (source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\nvar TakeOperator = /*#__PURE__*/function () {\n  function TakeOperator(total) {\n    _classCallCheck(this, TakeOperator);\n    this.total = total;\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n  _createClass(TakeOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n  }]);\n  return TakeOperator;\n}();\nvar TakeSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(TakeSubscriber, _Subscriber);\n  var _super = _createSuper(TakeSubscriber);\n  function TakeSubscriber(destination, total) {\n    var _this;\n    _classCallCheck(this, TakeSubscriber);\n    _this = _super.call(this, destination);\n    _this.total = total;\n    _this.count = 0;\n    return _this;\n  }\n  _createClass(TakeSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var total = this.total;\n      var count = ++this.count;\n      if (count <= total) {\n        this.destination.next(value);\n        if (count === total) {\n          this.destination.complete();\n          this.unsubscribe();\n        }\n      }\n    }\n  }]);\n  return TakeSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/take.ts"],"names":[],"mappings":";;;;AACA,SAAS,UAAU,QAAQ,eAAe;AAC1C,SAAS,uBAAuB,QAAQ,iCAAiC;AACzE,SAAS,KAAK,QAAQ,qBAAqB;AAkD3C,OAAM,SAAU,IAAI,CAAI,KAAa,EAAA;EACnC,OAAO,UAAC,MAAqB,EAAI;IAC/B,IAAI,KAAK,KAAK,CAAC,EAAE;MACf,OAAO,KAAK,EAAE;KACf,MAAM;MACL,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;IAC5C;EACH,CAAC;AACH;AAAC,IAEK,YAAY;EAChB,sBAAoB,KAAa,EAAA;IAAA;IAAb,IAAA,CAAA,KAAK,GAAL,KAAK;IACvB,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;MAClB,MAAM,IAAI,uBAAuB;IAClC;EACH;EAAC;IAAA;IAAA,OAED,cAAK,UAAyB,EAAE,MAAW,EAAA;MACzC,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrE;EAAC;EAAA;AAAA;AAAA,IAQG,cAAkB;EAAA;EAAA;EAGtB,wBAAY,WAA0B,EAAU,KAAa,EAAA;IAAA;IAAA;IAC3D,0BAAM,WAAW;IAD6B,MAAA,KAAK,GAAL,KAAK;IAF7C,MAAA,KAAK,GAAW,CAAC;IAAC;EAI1B;EAAC;IAAA;IAAA,OAES,eAAM,KAAQ,EAAA;MACtB,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK;MACxB,IAAM,KAAK,GAAG,EAAE,IAAI,CAAC,KAAK;MAC1B,IAAI,KAAK,IAAI,KAAK,EAAE;QAClB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;QAC5B,IAAI,KAAK,KAAK,KAAK,EAAE;UACnB,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;UAC3B,IAAI,CAAC,WAAW,EAAE;QACnB;MACF;IACH;EAAC;EAAA;AAAA,EAjB6B,UAAa","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=take.js.map"]},"metadata":{},"sourceType":"module"}