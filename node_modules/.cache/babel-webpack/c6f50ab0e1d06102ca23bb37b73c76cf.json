{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\nfunction shareReplayOperator(_ref) {\n  var _ref$bufferSize = _ref.bufferSize,\n    bufferSize = _ref$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref$bufferSize,\n    _ref$windowTime = _ref.windowTime,\n    windowTime = _ref$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref$windowTime,\n    useRefCount = _ref.refCount,\n    scheduler = _ref.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n      if (isComplete) {\n        subscription = undefined;\n      }\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n      innerSub = undefined;\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/shareReplay.ts"],"names":[],"mappings":"AACA,SAAS,aAAa,QAAQ,kBAAkB;AAiEhD,OAAM,SAAU,WAAW,CACzB,kBAA+C,EAC/C,UAAmB,EACnB,SAAyB,EAAA;EAEzB,IAAI,MAAyB;EAC7B,IAAI,kBAAkB,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE;IAChE,MAAM,GAAG,kBAAuC;GACjD,MAAM;IACL,MAAM,GAAG;MACP,UAAU,EAAE,kBAAwC;MACpD,UAAU,EAAV,UAAU;MACV,QAAQ,EAAE,KAAK;MACf,SAAS,EAAT;KACD;EACF;EACD,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;EAAA;AAC5E;AAEA,SAAS,mBAAmB,OAKR;EAAA,2BAJlB,UAAU;IAAV,UAAU,gCAAG,MAAM,CAAC,iBAAiB;IAAA,uBACrC,UAAU;IAAV,UAAU,gCAAG,MAAM,CAAC,iBAAiB;IAC3B,WAAW,QAArB,QAAQ;IACR,SAAS,QAAT,SAAS;EAET,IAAI,OAAqC;EACzC,IAAI,QAAQ,GAAG,CAAC;EAChB,IAAI,YAAsC;EAC1C,IAAI,QAAQ,GAAG,KAAK;EACpB,IAAI,UAAU,GAAG,KAAK;EAEtB,OAAO,SAAS,oBAAoB,CAElC,MAAqB,EAAA;IAErB,QAAQ,EAAE;IACV,IAAI,QAAsB;IAC1B,IAAI,CAAC,OAAO,IAAI,QAAQ,EAAE;MACxB,QAAQ,GAAG,KAAK;MAChB,OAAO,GAAG,IAAI,aAAa,CAAI,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC;MACjE,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;MAClC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC;QAC9B,IAAI,gBAAC,KAAK,EAAA;UACR,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;QACrB,CAAC;QACD,KAAK,iBAAC,GAAG,EAAA;UACP,QAAQ,GAAG,IAAI;UACf,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;QACpB,CAAC;QACD,QAAQ,sBAAA;UACN,UAAU,GAAG,IAAI;UACjB,YAAY,GAAG,SAAS;UACxB,OAAO,CAAC,QAAQ,EAAE;QACpB;OACD,CAAC;MAMF,IAAI,UAAU,EAAE;QACd,YAAY,GAAG,SAAS;MACzB;KACF,MAAM;MACL,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;IACnC;IAED,IAAI,CAAC,GAAG,CAAC,YAAK;MACZ,QAAQ,EAAE;MACV,QAAQ,CAAC,WAAW,EAAE;MACtB,QAAQ,GAAG,SAAS;MACpB,IAAI,YAAY,IAAI,CAAC,UAAU,IAAI,WAAW,IAAI,QAAQ,KAAK,CAAC,EAAE;QAChE,YAAY,CAAC,WAAW,EAAE;QAC1B,YAAY,GAAG,SAAS;QACxB,OAAO,GAAG,SAAS;MACpB;IACH,CAAC,CAAC;EACJ,CAAC;AACH","sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime,\n            refCount: false,\n            scheduler,\n        };\n    }\n    return (source) => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler, }) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        let innerSub;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            innerSub = subject.subscribe(this);\n            subscription = source.subscribe({\n                next(value) {\n                    subject.next(value);\n                },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n            if (isComplete) {\n                subscription = undefined;\n            }\n        }\n        else {\n            innerSub = subject.subscribe(this);\n        }\n        this.add(() => {\n            refCount--;\n            innerSub.unsubscribe();\n            innerSub = undefined;\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map"]},"metadata":{},"sourceType":"module"}