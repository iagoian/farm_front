{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function scheduleObservable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    sub.add(scheduler.schedule(function () {\n      var observable = input[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next: function next(value) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.next(value);\n          }));\n        },\n        error: function error(err) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.error(err);\n          }));\n        },\n        complete: function complete() {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.complete();\n          }));\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"sources":["../../../src/internal/scheduled/scheduleObservable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,eAAe;AAC1C,SAAS,YAAY,QAAQ,iBAAiB;AAC9C,SAAS,UAAU,IAAI,iBAAiB,QAAQ,sBAAsB;AAGtE,OAAM,SAAU,kBAAkB,CAAI,KAA2B,EAAE,SAAwB,EAAA;EACzF,OAAO,IAAI,UAAU,CAAI,UAAA,UAAU,EAAG;IACpC,IAAM,GAAG,GAAG,IAAI,YAAY,EAAE;IAC9B,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAK;MAC9B,IAAM,UAAU,GAAoB,KAAK,CAAC,iBAAiB,CAAC,EAAE;MAC9D,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC;QAC3B,IAAI,gBAAC,KAAK,EAAA;UAAI,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC;YAAA,OAAM,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;UAAA,EAAC,CAAC;QAAE,CAAC;QAC1E,KAAK,iBAAC,GAAG,EAAA;UAAI,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC;YAAA,OAAM,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;UAAA,EAAC,CAAC;QAAE,CAAC;QACxE,QAAQ,sBAAA;UAAK,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC;YAAA,OAAM,UAAU,CAAC,QAAQ,EAAE;UAAA,EAAC,CAAC;QAAE;OACxE,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,GAAG;EACZ,CAAC,CAAC;AACJ","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function scheduleObservable(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        sub.add(scheduler.schedule(() => {\n            const observable = input[Symbol_observable]();\n            sub.add(observable.subscribe({\n                next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n                error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n                complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleObservable.js.map"]},"metadata":{},"sourceType":"module"}