{"ast":null,"code":"/**\n * @module ol/pointer/TouchSource\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport { remove } from '../array.js';\nimport EventSource from './EventSource.js';\nimport { POINTER_ID } from './MouseSource.js';\n\n/**\n * @type {number}\n */\nvar CLICK_COUNT_TIMEOUT = 200;\n\n/**\n * @type {string}\n */\nvar POINTER_TYPE = 'touch';\n\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchstart(inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n}\n\n/**\n * Handler for `touchmove`.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchmove(inEvent) {\n  this.processTouches_(inEvent, this.moveOverOut_);\n}\n\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The event.\n */\nfunction touchend(inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n}\n\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchcancel(inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n}\nvar TouchSource = /*@__PURE__*/function (EventSource) {\n  function TouchSource(dispatcher, mouseSource) {\n    var mapping = {\n      'touchstart': touchstart,\n      'touchmove': touchmove,\n      'touchend': touchend,\n      'touchcancel': touchcancel\n    };\n    EventSource.call(this, dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n\n    /**\n     * @const\n     * @type {import(\"./MouseSource.js\").default}\n     */\n    this.mouseSource = mouseSource;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.firstTouchId_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.clickCount_ = 0;\n\n    /**\n     * @private\n     * @type {?}\n     */\n    this.resetId_;\n\n    /**\n     * Mouse event timeout: This should be long enough to\n     * ignore compat mouse events made by touch.\n     * @private\n     * @type {number}\n     */\n    this.dedupTimeout_ = 2500;\n  }\n  if (EventSource) TouchSource.__proto__ = EventSource;\n  TouchSource.prototype = Object.create(EventSource && EventSource.prototype);\n  TouchSource.prototype.constructor = TouchSource;\n\n  /**\n   * @private\n   * @param {Touch} inTouch The in touch.\n   * @return {boolean} True, if this is the primary touch.\n   */\n  TouchSource.prototype.isPrimaryTouch_ = function isPrimaryTouch_(inTouch) {\n    return this.firstTouchId_ === inTouch.identifier;\n  };\n\n  /**\n   * Set primary touch if there are no pointers, or the only pointer is the mouse.\n   * @param {Touch} inTouch The in touch.\n   * @private\n   */\n  TouchSource.prototype.setPrimaryTouch_ = function setPrimaryTouch_(inTouch) {\n    var count = Object.keys(this.pointerMap).length;\n    if (count === 0 || count === 1 && POINTER_ID.toString() in this.pointerMap) {\n      this.firstTouchId_ = inTouch.identifier;\n      this.cancelResetClickCount_();\n    }\n  };\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  TouchSource.prototype.removePrimaryPointer_ = function removePrimaryPointer_(inPointer) {\n    if (inPointer.isPrimary) {\n      this.firstTouchId_ = undefined;\n      this.resetClickCount_();\n    }\n  };\n\n  /**\n   * @private\n   */\n  TouchSource.prototype.resetClickCount_ = function resetClickCount_() {\n    this.resetId_ = setTimeout(this.resetClickCountHandler_.bind(this), CLICK_COUNT_TIMEOUT);\n  };\n\n  /**\n   * @private\n   */\n  TouchSource.prototype.resetClickCountHandler_ = function resetClickCountHandler_() {\n    this.clickCount_ = 0;\n    this.resetId_ = undefined;\n  };\n\n  /**\n   * @private\n   */\n  TouchSource.prototype.cancelResetClickCount_ = function cancelResetClickCount_() {\n    if (this.resetId_ !== undefined) {\n      clearTimeout(this.resetId_);\n    }\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent Browser event\n   * @param {Touch} inTouch Touch event\n   * @return {PointerEvent} A pointer object.\n   */\n  TouchSource.prototype.touchToPointer_ = function touchToPointer_(browserEvent, inTouch) {\n    var e = this.dispatcher.cloneEvent(browserEvent, inTouch);\n    // Spec specifies that pointerId 1 is reserved for Mouse.\n    // Touch identifiers can start at 0.\n    // Add 2 to the touch identifier for compatibility.\n    e.pointerId = inTouch.identifier + 2;\n    // TODO: check if this is necessary?\n    //e.target = findTarget(e);\n    e.bubbles = true;\n    e.cancelable = true;\n    e.detail = this.clickCount_;\n    e.button = 0;\n    e.buttons = 1;\n    e.width = inTouch.radiusX || 0;\n    e.height = inTouch.radiusY || 0;\n    e.pressure = inTouch.force || 0.5;\n    e.isPrimary = this.isPrimaryTouch_(inTouch);\n    e.pointerType = POINTER_TYPE;\n\n    // make sure that the properties that are different for\n    // each `Touch` object are not copied from the BrowserEvent object\n    e.clientX = inTouch.clientX;\n    e.clientY = inTouch.clientY;\n    e.screenX = inTouch.screenX;\n    e.screenY = inTouch.screenY;\n    return e;\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} inEvent Touch event\n   * @param {function(TouchEvent, PointerEvent)} inFunction In function.\n   */\n  TouchSource.prototype.processTouches_ = function processTouches_(inEvent, inFunction) {\n    var touches = Array.prototype.slice.call(inEvent.changedTouches);\n    var count = touches.length;\n    function preventDefault() {\n      inEvent.preventDefault();\n    }\n    for (var i = 0; i < count; ++i) {\n      var pointer = this.touchToPointer_(inEvent, touches[i]);\n      // forward touch preventDefaults\n      pointer.preventDefault = preventDefault;\n      inFunction.call(this, inEvent, pointer);\n    }\n  };\n\n  /**\n   * @private\n   * @param {TouchList} touchList The touch list.\n   * @param {number} searchId Search identifier.\n   * @return {boolean} True, if the `Touch` with the given id is in the list.\n   */\n  TouchSource.prototype.findTouch_ = function findTouch_(touchList, searchId) {\n    var l = touchList.length;\n    for (var i = 0; i < l; i++) {\n      var touch = touchList[i];\n      if (touch.identifier === searchId) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * In some instances, a touchstart can happen without a touchend. This\n   * leaves the pointermap in a broken state.\n   * Therefore, on every touchstart, we remove the touches that did not fire a\n   * touchend event.\n   * To keep state globally consistent, we fire a pointercancel for\n   * this \"abandoned\" touch\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  TouchSource.prototype.vacuumTouches_ = function vacuumTouches_(inEvent) {\n    var touchList = inEvent.touches;\n    // pointerMap.getCount() should be < touchList.length here,\n    // as the touchstart has not been processed yet.\n    var keys = Object.keys(this.pointerMap);\n    var count = keys.length;\n    if (count >= touchList.length) {\n      var d = [];\n      for (var i = 0; i < count; ++i) {\n        var key = Number(keys[i]);\n        var value = this.pointerMap[key];\n        // Never remove pointerId == 1, which is mouse.\n        // Touch identifiers are 2 smaller than their pointerId, which is the\n        // index in pointermap.\n        if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {\n          d.push(value.out);\n        }\n      }\n      for (var i$1 = 0; i$1 < d.length; ++i$1) {\n        this.cancelOut_(inEvent, d[i$1]);\n      }\n    }\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  TouchSource.prototype.overDown_ = function overDown_(browserEvent, inPointer) {\n    this.pointerMap[inPointer.pointerId] = {\n      target: inPointer.target,\n      out: inPointer,\n      outTarget: inPointer.target\n    };\n    this.dispatcher.over(inPointer, browserEvent);\n    this.dispatcher.enter(inPointer, browserEvent);\n    this.dispatcher.down(inPointer, browserEvent);\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  TouchSource.prototype.moveOverOut_ = function moveOverOut_(browserEvent, inPointer) {\n    var event = inPointer;\n    var pointer = this.pointerMap[event.pointerId];\n    // a finger drifted off the screen, ignore it\n    if (!pointer) {\n      return;\n    }\n    var outEvent = pointer.out;\n    var outTarget = pointer.outTarget;\n    this.dispatcher.move(event, browserEvent);\n    if (outEvent && outTarget !== event.target) {\n      outEvent.relatedTarget = event.target;\n      /** @type {Object} */\n      event.relatedTarget = outTarget;\n      // recover from retargeting by shadow\n      outEvent.target = outTarget;\n      if (event.target) {\n        this.dispatcher.leaveOut(outEvent, browserEvent);\n        this.dispatcher.enterOver(event, browserEvent);\n      } else {\n        // clean up case when finger leaves the screen\n        /** @type {Object} */\n        event.target = outTarget;\n        /** @type {Object} */\n        event.relatedTarget = null;\n        this.cancelOut_(browserEvent, event);\n      }\n    }\n    pointer.out = event;\n    pointer.outTarget = event.target;\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent An event.\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  TouchSource.prototype.upOut_ = function upOut_(browserEvent, inPointer) {\n    this.dispatcher.up(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  TouchSource.prototype.cancelOut_ = function cancelOut_(browserEvent, inPointer) {\n    this.dispatcher.cancel(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  };\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  TouchSource.prototype.cleanUpPointer_ = function cleanUpPointer_(inPointer) {\n    delete this.pointerMap[inPointer.pointerId];\n    this.removePrimaryPointer_(inPointer);\n  };\n\n  /**\n   * Prevent synth mouse events from creating pointer events.\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  TouchSource.prototype.dedupSynthMouse_ = function dedupSynthMouse_(inEvent) {\n    var lts = this.mouseSource.lastTouches;\n    var t = inEvent.changedTouches[0];\n    // only the primary finger will synth mouse events\n    if (this.isPrimaryTouch_(t)) {\n      // remember x/y of last touch\n      var lt = [t.clientX, t.clientY];\n      lts.push(lt);\n      setTimeout(function () {\n        // remove touch after timeout\n        remove(lts, lt);\n      }, this.dedupTimeout_);\n    }\n  };\n  return TouchSource;\n}(EventSource);\nexport default TouchSource;","map":{"version":3,"sources":["../../../src/ol/pointer/TouchSource.js"],"names":["const","super","let","i"],"mappings":"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","sourcesContent":["/**\n * @module ol/pointer/TouchSource\n */\n\n// Based on https://github.com/Polymer/PointerEvents\n\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nimport {remove} from '../array.js';\nimport EventSource from './EventSource.js';\nimport {POINTER_ID} from './MouseSource.js';\n\n\n/**\n * @type {number}\n */\nconst CLICK_COUNT_TIMEOUT = 200;\n\n/**\n * @type {string}\n */\nconst POINTER_TYPE = 'touch';\n\n/**\n * Handler for `touchstart`, triggers `pointerover`,\n * `pointerenter` and `pointerdown` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchstart(inEvent) {\n  this.vacuumTouches_(inEvent);\n  this.setPrimaryTouch_(inEvent.changedTouches[0]);\n  this.dedupSynthMouse_(inEvent);\n  this.clickCount_++;\n  this.processTouches_(inEvent, this.overDown_);\n}\n\n/**\n * Handler for `touchmove`.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchmove(inEvent) {\n  this.processTouches_(inEvent, this.moveOverOut_);\n}\n\n/**\n * Handler for `touchend`, triggers `pointerup`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The event.\n */\nfunction touchend(inEvent) {\n  this.dedupSynthMouse_(inEvent);\n  this.processTouches_(inEvent, this.upOut_);\n}\n\n/**\n * Handler for `touchcancel`, triggers `pointercancel`,\n * `pointerout` and `pointerleave` events.\n *\n * @this {TouchSource}\n * @param {TouchEvent} inEvent The in event.\n */\nfunction touchcancel(inEvent) {\n  this.processTouches_(inEvent, this.cancelOut_);\n}\n\n\nclass TouchSource extends EventSource {\n\n  /**\n   * @param {import(\"./PointerEventHandler.js\").default} dispatcher The event handler.\n   * @param {import(\"./MouseSource.js\").default} mouseSource Mouse source.\n   */\n  constructor(dispatcher, mouseSource) {\n    const mapping = {\n      'touchstart': touchstart,\n      'touchmove': touchmove,\n      'touchend': touchend,\n      'touchcancel': touchcancel\n    };\n    super(dispatcher, mapping);\n\n    /**\n     * @const\n     * @type {!Object<string, Event|Object>}\n     */\n    this.pointerMap = dispatcher.pointerMap;\n\n    /**\n     * @const\n     * @type {import(\"./MouseSource.js\").default}\n     */\n    this.mouseSource = mouseSource;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.firstTouchId_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.clickCount_ = 0;\n\n    /**\n     * @private\n     * @type {?}\n     */\n    this.resetId_;\n\n    /**\n     * Mouse event timeout: This should be long enough to\n     * ignore compat mouse events made by touch.\n     * @private\n     * @type {number}\n     */\n    this.dedupTimeout_ = 2500;\n  }\n\n  /**\n   * @private\n   * @param {Touch} inTouch The in touch.\n   * @return {boolean} True, if this is the primary touch.\n   */\n  isPrimaryTouch_(inTouch) {\n    return this.firstTouchId_ === inTouch.identifier;\n  }\n\n  /**\n   * Set primary touch if there are no pointers, or the only pointer is the mouse.\n   * @param {Touch} inTouch The in touch.\n   * @private\n   */\n  setPrimaryTouch_(inTouch) {\n    const count = Object.keys(this.pointerMap).length;\n    if (count === 0 || (count === 1 && POINTER_ID.toString() in this.pointerMap)) {\n      this.firstTouchId_ = inTouch.identifier;\n      this.cancelResetClickCount_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  removePrimaryPointer_(inPointer) {\n    if (inPointer.isPrimary) {\n      this.firstTouchId_ = undefined;\n      this.resetClickCount_();\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetClickCount_() {\n    this.resetId_ = setTimeout(\n      this.resetClickCountHandler_.bind(this),\n      CLICK_COUNT_TIMEOUT);\n  }\n\n  /**\n   * @private\n   */\n  resetClickCountHandler_() {\n    this.clickCount_ = 0;\n    this.resetId_ = undefined;\n  }\n\n  /**\n   * @private\n   */\n  cancelResetClickCount_() {\n    if (this.resetId_ !== undefined) {\n      clearTimeout(this.resetId_);\n    }\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent Browser event\n   * @param {Touch} inTouch Touch event\n   * @return {PointerEvent} A pointer object.\n   */\n  touchToPointer_(browserEvent, inTouch) {\n    const e = this.dispatcher.cloneEvent(browserEvent, inTouch);\n    // Spec specifies that pointerId 1 is reserved for Mouse.\n    // Touch identifiers can start at 0.\n    // Add 2 to the touch identifier for compatibility.\n    e.pointerId = inTouch.identifier + 2;\n    // TODO: check if this is necessary?\n    //e.target = findTarget(e);\n    e.bubbles = true;\n    e.cancelable = true;\n    e.detail = this.clickCount_;\n    e.button = 0;\n    e.buttons = 1;\n    e.width = inTouch.radiusX || 0;\n    e.height = inTouch.radiusY || 0;\n    e.pressure = inTouch.force || 0.5;\n    e.isPrimary = this.isPrimaryTouch_(inTouch);\n    e.pointerType = POINTER_TYPE;\n\n    // make sure that the properties that are different for\n    // each `Touch` object are not copied from the BrowserEvent object\n    e.clientX = inTouch.clientX;\n    e.clientY = inTouch.clientY;\n    e.screenX = inTouch.screenX;\n    e.screenY = inTouch.screenY;\n\n    return e;\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} inEvent Touch event\n   * @param {function(TouchEvent, PointerEvent)} inFunction In function.\n   */\n  processTouches_(inEvent, inFunction) {\n    const touches = Array.prototype.slice.call(inEvent.changedTouches);\n    const count = touches.length;\n    function preventDefault() {\n      inEvent.preventDefault();\n    }\n    for (let i = 0; i < count; ++i) {\n      const pointer = this.touchToPointer_(inEvent, touches[i]);\n      // forward touch preventDefaults\n      pointer.preventDefault = preventDefault;\n      inFunction.call(this, inEvent, pointer);\n    }\n  }\n\n  /**\n   * @private\n   * @param {TouchList} touchList The touch list.\n   * @param {number} searchId Search identifier.\n   * @return {boolean} True, if the `Touch` with the given id is in the list.\n   */\n  findTouch_(touchList, searchId) {\n    const l = touchList.length;\n    for (let i = 0; i < l; i++) {\n      const touch = touchList[i];\n      if (touch.identifier === searchId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * In some instances, a touchstart can happen without a touchend. This\n   * leaves the pointermap in a broken state.\n   * Therefore, on every touchstart, we remove the touches that did not fire a\n   * touchend event.\n   * To keep state globally consistent, we fire a pointercancel for\n   * this \"abandoned\" touch\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  vacuumTouches_(inEvent) {\n    const touchList = inEvent.touches;\n    // pointerMap.getCount() should be < touchList.length here,\n    // as the touchstart has not been processed yet.\n    const keys = Object.keys(this.pointerMap);\n    const count = keys.length;\n    if (count >= touchList.length) {\n      const d = [];\n      for (let i = 0; i < count; ++i) {\n        const key = Number(keys[i]);\n        const value = this.pointerMap[key];\n        // Never remove pointerId == 1, which is mouse.\n        // Touch identifiers are 2 smaller than their pointerId, which is the\n        // index in pointermap.\n        if (key != POINTER_ID && !this.findTouch_(touchList, key - 2)) {\n          d.push(value.out);\n        }\n      }\n      for (let i = 0; i < d.length; ++i) {\n        this.cancelOut_(inEvent, d[i]);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer object.\n   */\n  overDown_(browserEvent, inPointer) {\n    this.pointerMap[inPointer.pointerId] = {\n      target: inPointer.target,\n      out: inPointer,\n      outTarget: inPointer.target\n    };\n    this.dispatcher.over(inPointer, browserEvent);\n    this.dispatcher.enter(inPointer, browserEvent);\n    this.dispatcher.down(inPointer, browserEvent);\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  moveOverOut_(browserEvent, inPointer) {\n    const event = inPointer;\n    const pointer = this.pointerMap[event.pointerId];\n    // a finger drifted off the screen, ignore it\n    if (!pointer) {\n      return;\n    }\n    const outEvent = pointer.out;\n    const outTarget = pointer.outTarget;\n    this.dispatcher.move(event, browserEvent);\n    if (outEvent && outTarget !== event.target) {\n      outEvent.relatedTarget = event.target;\n      /** @type {Object} */ (event).relatedTarget = outTarget;\n      // recover from retargeting by shadow\n      outEvent.target = outTarget;\n      if (event.target) {\n        this.dispatcher.leaveOut(outEvent, browserEvent);\n        this.dispatcher.enterOver(event, browserEvent);\n      } else {\n        // clean up case when finger leaves the screen\n        /** @type {Object} */ (event).target = outTarget;\n        /** @type {Object} */ (event).relatedTarget = null;\n        this.cancelOut_(browserEvent, event);\n      }\n    }\n    pointer.out = event;\n    pointer.outTarget = event.target;\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent An event.\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  upOut_(browserEvent, inPointer) {\n    this.dispatcher.up(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  }\n\n  /**\n   * @private\n   * @param {TouchEvent} browserEvent The event.\n   * @param {PointerEvent} inPointer The in pointer.\n   */\n  cancelOut_(browserEvent, inPointer) {\n    this.dispatcher.cancel(inPointer, browserEvent);\n    this.dispatcher.out(inPointer, browserEvent);\n    this.dispatcher.leave(inPointer, browserEvent);\n    this.cleanUpPointer_(inPointer);\n  }\n\n  /**\n   * @private\n   * @param {PointerEvent} inPointer The inPointer object.\n   */\n  cleanUpPointer_(inPointer) {\n    delete this.pointerMap[inPointer.pointerId];\n    this.removePrimaryPointer_(inPointer);\n  }\n\n  /**\n   * Prevent synth mouse events from creating pointer events.\n   *\n   * @private\n   * @param {TouchEvent} inEvent The in event.\n   */\n  dedupSynthMouse_(inEvent) {\n    const lts = this.mouseSource.lastTouches;\n    const t = inEvent.changedTouches[0];\n    // only the primary finger will synth mouse events\n    if (this.isPrimaryTouch_(t)) {\n      // remember x/y of last touch\n      const lt = [t.clientX, t.clientY];\n      lts.push(lt);\n\n      setTimeout(function() {\n        // remove touch after timeout\n        remove(lts, lt);\n      }, this.dedupTimeout_);\n    }\n  }\n}\n\nexport default TouchSource;\n"]},"metadata":{},"sourceType":"module"}