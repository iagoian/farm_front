{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\nvar CountOperator = /*#__PURE__*/function () {\n  function CountOperator(predicate, source) {\n    _classCallCheck(this, CountOperator);\n    this.predicate = predicate;\n    this.source = source;\n  }\n  _createClass(CountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    }\n  }]);\n  return CountOperator;\n}();\nvar CountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(CountSubscriber, _Subscriber);\n  var _super = _createSuper(CountSubscriber);\n  function CountSubscriber(destination, predicate, source) {\n    var _this;\n    _classCallCheck(this, CountSubscriber);\n    _this = _super.call(this, destination);\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.count = 0;\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(CountSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.predicate) {\n        this._tryPredicate(value);\n      } else {\n        this.count++;\n      }\n    }\n  }, {\n    key: \"_tryPredicate\",\n    value: function _tryPredicate(value) {\n      var result;\n      try {\n        result = this.predicate(value, this.index++, this.source);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n      if (result) {\n        this.count++;\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.destination.next(this.count);\n      this.destination.complete();\n    }\n  }]);\n  return CountSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/count.ts"],"names":[],"mappings":";;;;AAGA,SAAS,UAAU,QAAQ,eAAe;AA6D1C,OAAM,SAAU,KAAK,CAAI,SAAuE,EAAA;EAC9F,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;EAAA;AACrF;AAAC,IAEK,aAAa;EACjB,uBAAoB,SAAuE,EACvE,MAAsB,EAAA;IAAA;IADtB,IAAA,CAAA,SAAS,GAAT,SAAS;IACT,IAAA,CAAA,MAAM,GAAN,MAAM;EAC1B;EAAC;IAAA;IAAA,OAED,cAAK,UAA8B,EAAE,MAAW,EAAA;MAC9C,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACvF;EAAC;EAAA;AAAA;AAAA,IAQG,eAAmB;EAAA;EAAA;EAIvB,yBAAY,WAA6B,EACrB,SAAuE,EACvE,MAAsB,EAAA;IAAA;IAAA;IACxC,0BAAM,WAAW;IAFC,MAAA,SAAS,GAAT,SAAS;IACT,MAAA,MAAM,GAAN,MAAM;IALlB,MAAA,KAAK,GAAW,CAAC;IACjB,MAAA,KAAK,GAAW,CAAC;IAAC;EAM1B;EAAC;IAAA;IAAA,OAES,eAAM,KAAQ,EAAA;MACtB,IAAI,IAAI,CAAC,SAAS,EAAE;QAClB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;OAC1B,MAAM;QACL,IAAI,CAAC,KAAK,EAAE;MACb;IACH;EAAC;IAAA;IAAA,OAEO,uBAAc,KAAQ,EAAA;MAC5B,IAAI,MAAW;MAEf,IAAI;QACF,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;OAC1D,CAAC,OAAO,GAAG,EAAE;QACZ,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;QAC3B;MACD;MAED,IAAI,MAAM,EAAE;QACV,IAAI,CAAC,KAAK,EAAE;MACb;IACH;EAAC;IAAA;IAAA,OAES,qBAAS;MACjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;MACjC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;IAC7B;EAAC;EAAA;AAAA,EApC8B,UAAa","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n    return (source) => source.lift(new CountOperator(predicate, source));\n}\nclass CountOperator {\n    constructor(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    }\n}\nclass CountSubscriber extends Subscriber {\n    constructor(destination, predicate, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    }\n    _tryPredicate(value) {\n        let result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    }\n    _complete() {\n        this.destination.next(this.count);\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=count.js.map"]},"metadata":{},"sourceType":"module"}