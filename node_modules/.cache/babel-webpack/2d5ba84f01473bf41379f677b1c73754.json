{"ast":null,"code":"/**\n * @module ol/proj/epsg3857\n */\nimport { cosh } from '../math.js';\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /*@__PURE__*/function (Projection) {\n  function EPSG3857Projection(code) {\n    Projection.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function getPointResolution(resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    });\n  }\n  if (Projection) EPSG3857Projection.__proto__ = Projection;\n  EPSG3857Projection.prototype = Object.create(Projection && Projection.prototype);\n  EPSG3857Projection.prototype.constructor = EPSG3857Projection;\n  return EPSG3857Projection;\n}(Projection);\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'), new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  var halfSize = HALF_SIZE;\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}","map":{"version":3,"sources":["../../../src/ol/proj/epsg3857.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/proj/epsg3857\n */\nimport {cosh} from '../math.js';\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [\n  -HALF_SIZE, -HALF_SIZE,\n  HALF_SIZE, HALF_SIZE\n];\n\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function(resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    });\n\n  }\n\n}\n\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),\n  new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\n\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  const halfSize = HALF_SIZE;\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = halfSize * input[i] / 180;\n    let y = RADIUS *\n        Math.log(Math.tan(Math.PI * (input[i + 1] + 90) / 360));\n    if (y > halfSize) {\n      y = halfSize;\n    } else if (y < -halfSize) {\n      y = -halfSize;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(\n      Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}