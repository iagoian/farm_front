{"ast":null,"code":"import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval() {\n  var period = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : async;\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n  return new Observable(function (subscriber) {\n    subscriber.add(scheduler.schedule(dispatch, period, {\n      subscriber: subscriber,\n      counter: 0,\n      period: period\n    }));\n    return subscriber;\n  });\n}\nfunction dispatch(state) {\n  var subscriber = state.subscriber,\n    counter = state.counter,\n    period = state.period;\n  subscriber.next(counter);\n  this.schedule({\n    subscriber: subscriber,\n    counter: counter + 1,\n    period: period\n  }, period);\n}","map":{"version":3,"sources":["../../../src/internal/observable/interval.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,eAAe;AAC1C,SAAS,KAAK,QAAQ,oBAAoB;AAE1C,SAAS,SAAS,QAAQ,mBAAmB;AAmD7C,OAAM,SAAU,QAAQ,GACiC;EAAA,IADhC,MAAM,uEAAG,CAAC;EAAA,IACV,SAAA,uEAA2B,KAAK;EACvD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE;IACpC,MAAM,GAAG,CAAC;EACX;EAED,IAAI,CAAC,SAAS,IAAI,OAAO,SAAS,CAAC,QAAQ,KAAK,UAAU,EAAE;IAC1D,SAAS,GAAG,KAAK;EAClB;EAED,OAAO,IAAI,UAAU,CAAS,UAAA,UAAU,EAAG;IACzC,UAAU,CAAC,GAAG,CACZ,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE;MAAE,UAAU,EAAV,UAAU;MAAE,OAAO,EAAE,CAAC;MAAE,MAAM,EAAN;IAAM,CAAE,CAAC,CACzE;IACD,OAAO,UAAU;EACnB,CAAC,CAAC;AACJ;AAEA,SAAS,QAAQ,CAAuC,KAAoB,EAAA;EAC1E,IAAQ,UAAU,GAAsB,KAAK,CAArC,UAAU;IAAE,OAAO,GAAa,KAAK,CAAzB,OAAO;IAAE,MAAM,GAAK,KAAK,CAAhB,MAAM;EACnC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;EACxB,IAAI,CAAC,QAAQ,CAAC;IAAE,UAAU,EAAV,UAAU;IAAE,OAAO,EAAE,OAAO,GAAG,CAAC;IAAE,MAAM,EAAN;EAAM,CAAE,EAAE,MAAM,CAAC;AACrE","sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map"]},"metadata":{},"sourceType":"module"}