{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function pairs(obj, scheduler) {\n  if (!scheduler) {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n      for (var i = 0; i < keys.length && !subscriber.closed; i++) {\n        var key = keys[i];\n        if (obj.hasOwnProperty(key)) {\n          subscriber.next([key, obj[key]]);\n        }\n      }\n      subscriber.complete();\n    });\n  } else {\n    return new Observable(function (subscriber) {\n      var keys = Object.keys(obj);\n      var subscription = new Subscription();\n      subscription.add(scheduler.schedule(dispatch, 0, {\n        keys: keys,\n        index: 0,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n      return subscription;\n    });\n  }\n}\nexport function dispatch(state) {\n  var keys = state.keys,\n    index = state.index,\n    subscriber = state.subscriber,\n    subscription = state.subscription,\n    obj = state.obj;\n  if (!subscriber.closed) {\n    if (index < keys.length) {\n      var key = keys[index];\n      subscriber.next([key, obj[key]]);\n      subscription.add(this.schedule({\n        keys: keys,\n        index: index + 1,\n        subscriber: subscriber,\n        subscription: subscription,\n        obj: obj\n      }));\n    } else {\n      subscriber.complete();\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/internal/observable/pairs.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,eAAe;AAG1C,SAAS,YAAY,QAAQ,iBAAiB;AAkD9C,OAAM,SAAU,KAAK,CAAI,GAAW,EAAE,SAAyB,EAAA;EAC7D,IAAI,CAAC,SAAS,EAAE;IACd,OAAO,IAAI,UAAU,CAAc,UAAA,UAAU,EAAG;MAC9C,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;MAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1D,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;QACnB,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;UAC3B,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACjC;MACF;MACD,UAAU,CAAC,QAAQ,EAAE;IACvB,CAAC,CAAC;GACH,MAAM;IACL,OAAO,IAAI,UAAU,CAAc,UAAA,UAAU,EAAG;MAC9C,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;MAC7B,IAAM,YAAY,GAAG,IAAI,YAAY,EAAE;MACvC,YAAY,CAAC,GAAG,CACd,SAAS,CAAC,QAAQ,CACf,QAAQ,EAAE,CAAC,EAAE;QAAE,IAAI,EAAJ,IAAI;QAAE,KAAK,EAAE,CAAC;QAAE,UAAU,EAAV,UAAU;QAAE,YAAY,EAAZ,YAAY;QAAE,GAAG,EAAH;MAAG,CAAE,CAAC,CAAC;MACrE,OAAO,YAAY;IACrB,CAAC,CAAC;EACH;AACH;AAGA,OAAM,SAAU,QAAQ,CACI,KAAsH,EAAA;EAChJ,IAAQ,IAAI,GAA2C,KAAK,CAApD,IAAI;IAAE,KAAK,GAAoC,KAAK,CAA9C,KAAK;IAAE,UAAU,GAAwB,KAAK,CAAvC,UAAU;IAAE,YAAY,GAAU,KAAK,CAA3B,YAAY;IAAE,GAAG,GAAK,KAAK,CAAb,GAAG;EAClD,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;IACtB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;MACvB,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;MACvB,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAChC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAAE,IAAI,EAAJ,IAAI;QAAE,KAAK,EAAE,KAAK,GAAG,CAAC;QAAE,UAAU,EAAV,UAAU;QAAE,YAAY,EAAZ,YAAY;QAAE,GAAG,EAAH;MAAG,CAAE,CAAC,CAAC;KAC3F,MAAM;MACL,UAAU,CAAC,QAAQ,EAAE;IACtB;EACF;AACH","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function pairs(obj, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscriber => {\n            const keys = Object.keys(obj);\n            for (let i = 0; i < keys.length && !subscriber.closed; i++) {\n                const key = keys[i];\n                if (obj.hasOwnProperty(key)) {\n                    subscriber.next([key, obj[key]]);\n                }\n            }\n            subscriber.complete();\n        });\n    }\n    else {\n        return new Observable(subscriber => {\n            const keys = Object.keys(obj);\n            const subscription = new Subscription();\n            subscription.add(scheduler.schedule(dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\n            return subscription;\n        });\n    }\n}\nexport function dispatch(state) {\n    const { keys, index, subscriber, subscription, obj } = state;\n    if (!subscriber.closed) {\n        if (index < keys.length) {\n            const key = keys[index];\n            subscriber.next([key, obj[key]]);\n            subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\n        }\n        else {\n            subscriber.complete();\n        }\n    }\n}\n//# sourceMappingURL=pairs.js.map"]},"metadata":{},"sourceType":"module"}