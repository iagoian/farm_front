{"ast":null,"code":"import { Observable } from '../Observable';\nexport function range() {\n  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var count = arguments.length > 1 ? arguments[1] : undefined;\n  var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n  return new Observable(function (subscriber) {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n    var index = 0;\n    var current = start;\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index: index,\n        count: count,\n        start: start,\n        subscriber: subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  var start = state.start,\n    index = state.index,\n    count = state.count,\n    subscriber = state.subscriber;\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n  subscriber.next(start);\n  if (subscriber.closed) {\n    return;\n  }\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"sources":["../../../src/internal/observable/range.ts"],"names":[],"mappings":"AACA,SAAS,UAAU,QAAQ,eAAe;AAoC1C,OAAM,SAAU,KAAK,GAE0B;EAAA,IAFzB,KAAA,uEAAgB,CAAC;EAAA,IACjB,KAAc;EAAA,IACd,SAAyB;EAC7C,OAAO,IAAI,UAAU,CAAS,UAAA,UAAU,EAAG;IACzC,IAAI,KAAK,KAAK,SAAS,EAAE;MACvB,KAAK,GAAG,KAAK;MACb,KAAK,GAAG,CAAC;IACV;IAED,IAAI,KAAK,GAAG,CAAC;IACb,IAAI,OAAO,GAAG,KAAK;IAEnB,IAAI,SAAS,EAAE;MACb,OAAO,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE;QACrC,KAAK,EAAL,KAAK;QAAE,KAAK,EAAL,KAAK;QAAE,KAAK,EAAL,KAAK;QAAE,UAAU,EAAV;OACtB,CAAC;KACH,MAAM;MACL,GAAG;QACD,IAAI,KAAK,EAAE,IAAI,KAAK,EAAE;UACpB,UAAU,CAAC,QAAQ,EAAE;UACrB;QACD;QACD,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAC1B,IAAI,UAAU,CAAC,MAAM,EAAE;UACrB;QACD;OACF,QAAQ,IAAI;IACd;IAED,OAAO,SAAS;EAClB,CAAC,CAAC;AACJ;AAGA,OAAM,SAAU,QAAQ,CAA6B,KAAU,EAAA;EAC7D,IAAQ,KAAK,GAA+B,KAAK,CAAzC,KAAK;IAAE,KAAK,GAAwB,KAAK,CAAlC,KAAK;IAAE,KAAK,GAAiB,KAAK,CAA3B,KAAK;IAAE,UAAU,GAAK,KAAK,CAApB,UAAU;EAEvC,IAAI,KAAK,IAAI,KAAK,EAAE;IAClB,UAAU,CAAC,QAAQ,EAAE;IACrB;EACD;EAED,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;EAEtB,IAAI,UAAU,CAAC,MAAM,EAAE;IACrB;EACD;EAED,KAAK,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC;EACvB,KAAK,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC;EAEvB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AACtB","sourcesContent":["import { Observable } from '../Observable';\nexport function range(start = 0, count, scheduler) {\n    return new Observable(subscriber => {\n        if (count === undefined) {\n            count = start;\n            start = 0;\n        }\n        let index = 0;\n        let current = start;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                index, count, start, subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(current++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n        return undefined;\n    });\n}\nexport function dispatch(state) {\n    const { start, index, count, subscriber } = state;\n    if (index >= count) {\n        subscriber.complete();\n        return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n        return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n}\n//# sourceMappingURL=range.js.map"]},"metadata":{},"sourceType":"module"}