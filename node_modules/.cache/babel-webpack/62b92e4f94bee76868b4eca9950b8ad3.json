{"ast":null,"code":"/**\n * @module ol/View\n */\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { getUid } from './util.js';\nimport { VOID } from './functions.js';\nimport { createExtent, none as centerNone } from './centerconstraint.js';\nimport BaseObject from './Object.js';\nimport { createSnapToResolutions, createSnapToPower } from './resolutionconstraint.js';\nimport { createSnapToZero, createSnapToN, none as rotationNone, disable } from './rotationconstraint.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { linearFindNearest } from './array.js';\nimport { assert } from './asserts.js';\nimport { add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual } from './coordinate.js';\nimport { inAndOut } from './easing.js';\nimport { getForViewAndSize, getCenter, getHeight, getWidth, isEmpty } from './extent.js';\nimport GeometryType from './geom/GeometryType.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\nimport { clamp, modulo } from './math.js';\nimport { assign } from './obj.js';\nimport { createProjection, METERS_PER_UNIT } from './proj.js';\nimport Units from './proj/Units.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean)} callback\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\n * the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean)} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. The coordinate system for the center is specified with the\n * `projection` option. Layer sources will not be fetched if this is not set,\n * but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * center, in other words, center cannot be set outside this extent.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view. The initial\n * resolution is determined using the {@link #constrainResolution} method.\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\n * resolution constraint.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remained fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But a View object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n  * @api\n */\nvar View = /*@__PURE__*/function (BaseObject) {\n  function View(opt_options) {\n    BaseObject.call(this);\n    var options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n    this.applyOptions_(options);\n  }\n  if (BaseObject) View.__proto__ = BaseObject;\n  View.prototype = Object.create(BaseObject && BaseObject.prototype);\n  View.prototype.constructor = View;\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  View.prototype.applyOptions_ = function applyOptions_(options) {\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = {};\n    properties[ViewProperty.CENTER] = options.center !== undefined ? options.center : null;\n    var resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n    var centerConstraint = createCenterConstraint(options);\n    var resolutionConstraint = resolutionConstraintInfo.constraint;\n    var rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n    if (options.resolution !== undefined) {\n      properties[ViewProperty.RESOLUTION] = options.resolution;\n    } else if (options.zoom !== undefined) {\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_);\n      if (this.resolutions_) {\n        // in case map zoom is out of min/max zoom range\n        properties[ViewProperty.RESOLUTION] = clamp(Number(this.getResolution() || properties[ViewProperty.RESOLUTION]), this.minResolution_, this.maxResolution_);\n      }\n    }\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n  };\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  View.prototype.getUpdatedOptions_ = function getUpdatedOptions_(newOptions) {\n    var options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenter();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n    return assign({}, options, newOptions);\n  };\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean))} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  View.prototype.animate = function animate(var_args) {\n    var arguments$1 = arguments;\n    var animationCount = arguments.length;\n    var callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      var state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenter(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    var start = Date.now();\n    var center = this.getCenter().slice();\n    var resolution = this.getResolution();\n    var rotation = this.getRotation();\n    var series = [];\n    for (var i = 0; i < animationCount; ++i) {\n      var options = /** @type {AnimationOptions} */arguments$1[i];\n      var animation = /** @type {Animation} */{\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut\n      };\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center;\n        center = animation.targetCenter;\n      }\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.constrainResolution(this.maxResolution_, options.zoom - this.minZoom_, 0);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n      animation.callback = callback;\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  };\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  View.prototype.getAnimating = function getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  };\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  View.prototype.getInteracting = function getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  };\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  View.prototype.cancelAnimations = function cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n      var series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n    }\n    this.animations_.length = 0;\n  };\n\n  /**\n   * Update all animations.\n   */\n  View.prototype.updateAnimations_ = function updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    var now = Date.now();\n    var more = false;\n    for (var i = this.animations_.length - 1; i >= 0; --i) {\n      var series = this.animations_[i];\n      var seriesComplete = true;\n      for (var j = 0, jj = series.length; j < jj; ++j) {\n        var animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        var elapsed = now - animation.start;\n        var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        var progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          var x0 = animation.sourceCenter[0];\n          var y0 = animation.sourceCenter[1];\n          var x1 = animation.targetCenter[0];\n          var y1 = animation.targetCenter[1];\n          var x = x0 + progress * (x1 - x0);\n          var y = y0 + progress * (y1 - y0);\n          this.set(ViewProperty.CENTER, [x, y]);\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER, this.calculateCenterZoom(resolution, animation.anchor));\n          }\n          this.set(ViewProperty.RESOLUTION, resolution);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER, this.calculateCenterRotate(rotation, animation.anchor));\n          }\n          this.set(ViewProperty.ROTATION, rotation);\n        }\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        var callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n    }\n  };\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  View.prototype.calculateCenterRotate = function calculateCenterRotate(rotation, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  };\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  View.prototype.calculateCenterZoom = function calculateCenterZoom(resolution, anchor) {\n    var center;\n    var currentCenter = this.getCenter();\n    var currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  };\n\n  /**\n   * @private\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  View.prototype.getSizeFromViewport_ = function getSizeFromViewport_() {\n    var size = [100, 100];\n    var selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\n    var element = document.querySelector(selector);\n    if (element) {\n      var metrics = getComputedStyle(element);\n      size[0] = parseInt(metrics.width, 10);\n      size[1] = parseInt(metrics.height, 10);\n    }\n    return size;\n  };\n\n  /**\n   * Get the constrained center of this view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Constrained center.\n   * @api\n   */\n  View.prototype.constrainCenter = function constrainCenter(center) {\n    return this.constraints_.center(center);\n  };\n\n  /**\n   * Get the constrained resolution of this view.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @param {number=} opt_direction Direction. Default is `0`.\n   * @return {number|undefined} Constrained resolution.\n   * @api\n   */\n  View.prototype.constrainResolution = function constrainResolution(resolution, opt_delta, opt_direction) {\n    var delta = opt_delta || 0;\n    var direction = opt_direction || 0;\n    return this.constraints_.resolution(resolution, delta, direction);\n  };\n\n  /**\n   * Get the constrained rotation of this view.\n   * @param {number|undefined} rotation Rotation.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @return {number|undefined} Constrained rotation.\n   * @api\n   */\n  View.prototype.constrainRotation = function constrainRotation(rotation, opt_delta) {\n    var delta = opt_delta || 0;\n    return this.constraints_.rotation(rotation, delta);\n  };\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getCenter = function getCenter() {\n    return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(ViewProperty.CENTER)\n    );\n  };\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  View.prototype.getConstraints = function getConstraints() {\n    return this.constraints_;\n  };\n\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  View.prototype.getHints = function getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  };\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  View.prototype.calculateExtent = function calculateExtent(opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var center = /** @type {!import(\"./coordinate.js\").Coordinate} */this.getCenter();\n    assert(center, 1); // The view center is not defined\n    var resolution = /** @type {!number} */this.getResolution();\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    var rotation = /** @type {!number} */this.getRotation();\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  };\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  View.prototype.getMaxResolution = function getMaxResolution() {\n    return this.maxResolution_;\n  };\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  View.prototype.getMinResolution = function getMinResolution() {\n    return this.minResolution_;\n  };\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  View.prototype.getMaxZoom = function getMaxZoom() {\n    return (/** @type {number} */this.getZoomForResolution(this.minResolution_)\n    );\n  };\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  View.prototype.setMaxZoom = function setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      maxZoom: zoom\n    }));\n  };\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  View.prototype.getMinZoom = function getMinZoom() {\n    return (/** @type {number} */this.getZoomForResolution(this.maxResolution_)\n    );\n  };\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  View.prototype.setMinZoom = function setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      minZoom: zoom\n    }));\n  };\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  View.prototype.getProjection = function getProjection() {\n    return this.projection_;\n  };\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getResolution = function getResolution() {\n    return (/** @type {number|undefined} */this.get(ViewProperty.RESOLUTION)\n    );\n  };\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  View.prototype.getResolutions = function getResolutions() {\n    return this.resolutions_;\n  };\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  View.prototype.getResolutionForExtent = function getResolutionForExtent(extent, opt_size) {\n    var size = opt_size || this.getSizeFromViewport_();\n    var xResolution = getWidth(extent) / size[0];\n    var yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  };\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  View.prototype.getResolutionForValueFunction = function getResolutionForValueFunction(opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        var resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  };\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.getRotation = function getRotation() {\n    return (/** @type {number} */this.get(ViewProperty.ROTATION)\n    );\n  };\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  View.prototype.getValueForResolutionFunction = function getValueForResolutionFunction(opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.maxResolution_;\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        var value = Math.log(maxResolution / resolution) / Math.log(power) / max;\n        return value;\n      }\n    );\n  };\n\n  /**\n   * @param {number} pixelRatio Pixel ratio for center rounding.\n   * @return {State} View state.\n   */\n  View.prototype.getState = function getState(pixelRatio) {\n    var center = /** @type {import(\"./coordinate.js\").Coordinate} */this.getCenter();\n    var projection = this.getProjection();\n    var resolution = /** @type {number} */this.getResolution();\n    var pixelResolution = resolution / pixelRatio;\n    var rotation = this.getRotation();\n    return (/** @type {State} */{\n        center: [Math.round(center[0] / pixelResolution) * pixelResolution, Math.round(center[1] / pixelResolution) * pixelResolution],\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        rotation: rotation,\n        zoom: this.getZoom()\n      }\n    );\n  };\n\n  /**\n   * Get the current zoom level.  If you configured your view with a resolutions\n   * array (this is rare), this method may return non-integer zoom levels (so\n   * the zoom level is not safe to use as an index into a resolutions array).\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  View.prototype.getZoom = function getZoom() {\n    var zoom;\n    var resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  };\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  View.prototype.getZoomForResolution = function getZoomForResolution(resolution) {\n    var offset = this.minZoom_ || 0;\n    var max, zoomFactor;\n    if (this.resolutions_) {\n      var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  };\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  View.prototype.getResolutionForZoom = function getResolutionForZoom(zoom) {\n    return (/** @type {number} */this.constrainResolution(this.maxResolution_, zoom - this.minZoom_, 0)\n    );\n  };\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  View.prototype.fit = function fit(geometryOrExtent, opt_options) {\n    var options = opt_options || {};\n    var size = options.size;\n    if (!size) {\n      size = this.getSizeFromViewport_();\n    }\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    var geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n      geometry = polygonFromExtent(geometryOrExtent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      geometryOrExtent = geometryOrExtent.getExtent();\n      geometry = polygonFromExtent(geometryOrExtent);\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\n    } else {\n      geometry = geometryOrExtent;\n    }\n    var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    var constrainResolution = options.constrainResolution !== undefined ? options.constrainResolution : true;\n    var nearest = options.nearest !== undefined ? options.nearest : false;\n    var minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.constrainResolution(this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n    } else {\n      minResolution = 0;\n    }\n    var coords = geometry.getFlatCoordinates();\n\n    // calculate rotated extent\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var minRotX = +Infinity;\n    var minRotY = +Infinity;\n    var maxRotX = -Infinity;\n    var maxRotY = -Infinity;\n    var stride = geometry.getStride();\n    for (var i = 0, ii = coords.length; i < ii; i += stride) {\n      var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    // calculate resolution\n    var resolution = this.getResolutionForExtent([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n    if (constrainResolution) {\n      var constrainedResolution = this.constrainResolution(resolution, 0, 0);\n      if (!nearest && constrainedResolution < resolution) {\n        constrainedResolution = this.constrainResolution(constrainedResolution, -1, 0);\n      }\n      resolution = constrainedResolution;\n    }\n\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerRotX = (minRotX + maxRotX) / 2;\n    var centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    var centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    var centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    var center = [centerX, centerY];\n    var callback = options.callback ? options.callback : VOID;\n    if (options.duration !== undefined) {\n      this.animate({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.setResolution(resolution);\n      this.setCenter(center);\n      animationCallback(callback, true);\n    }\n  };\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  View.prototype.centerOn = function centerOn(coordinate, size, position) {\n    // calculate rotated position\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    var resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerX = rotX * cosAngle - rotY * sinAngle;\n    var centerY = rotY * cosAngle + rotX * sinAngle;\n    this.setCenter([centerX, centerY]);\n  };\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  View.prototype.isDef = function isDef() {\n    return !!this.getCenter() && this.getResolution() !== undefined;\n  };\n\n  /**\n   * Rotate the view around a given coordinate.\n   * @param {number} rotation New rotation value for the view.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  View.prototype.rotate = function rotate(rotation, opt_anchor) {\n    if (opt_anchor !== undefined) {\n      var center = this.calculateCenterRotate(rotation, opt_anchor);\n      this.setCenter(center);\n    }\n    this.setRotation(rotation);\n  };\n\n  /**\n   * Set the center of the current view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setCenter = function setCenter(center) {\n    this.set(ViewProperty.CENTER, center);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * @param {ViewHint} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  View.prototype.setHint = function setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  };\n\n  /**\n   * Set the resolution for this view.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setResolution = function setResolution(resolution) {\n    this.set(ViewProperty.RESOLUTION, resolution);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * Set the rotation for this view.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.setRotation = function setRotation(rotation) {\n    this.set(ViewProperty.ROTATION, rotation);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  };\n\n  /**\n   * Zoom to a specific zoom level.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  View.prototype.setZoom = function setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  };\n  return View;\n}(BaseObject);\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    return createExtent(options.extent);\n  } else {\n    return centerNone;\n  }\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = createSnapToResolutions(resolutions);\n  } else {\n    // calculate the default min and max resolution\n    var projection = createProjection(options.projection, 'EPSG:3857');\n    var extent = projection.getExtent();\n    var size = !extent ?\n    // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit() : Math.max(getWidth(extent), getHeight(extent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\nexport default View;","map":{"version":3,"sources":["../../src/ol/View.js"],"names":["const","super","let","arguments"],"mappings":"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","sourcesContent":["/**\n * @module ol/View\n */\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {getUid} from './util.js';\nimport {VOID} from './functions.js';\nimport {createExtent, none as centerNone} from './centerconstraint.js';\nimport BaseObject from './Object.js';\nimport {createSnapToResolutions, createSnapToPower} from './resolutionconstraint.js';\nimport {createSnapToZero, createSnapToN, none as rotationNone, disable} from './rotationconstraint.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {linearFindNearest} from './array.js';\nimport {assert} from './asserts.js';\nimport {add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual} from './coordinate.js';\nimport {inAndOut} from './easing.js';\nimport {getForViewAndSize, getCenter, getHeight, getWidth, isEmpty} from './extent.js';\nimport GeometryType from './geom/GeometryType.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\nimport {clamp, modulo} from './math.js';\nimport {assign} from './obj.js';\nimport {createProjection, METERS_PER_UNIT} from './proj.js';\nimport Units from './proj/Units.js';\n\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean)} callback\n */\n\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\n * the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean)} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. The coordinate system for the center is specified with the\n * `projection` option. Layer sources will not be fetched if this is not set,\n * but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * center, in other words, center cannot be set outside this extent.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view. The initial\n * resolution is determined using the {@link #constrainResolution} method.\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\n * resolution constraint.\n */\n\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remained fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * ### The view states\n *\n * An View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * An View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view. Any value can be passed to the setters. And the value\n * that is passed to a setter will effectively be the value set in the view,\n * and returned by the corresponding getter.\n *\n * But a View object also has a *resolution constraint*, a\n * *rotation constraint* and a *center constraint*.\n *\n * As said above, no constraints are applied when the setters are used to set\n * new states for the view. Applying constraints is done explicitly through\n * the use of the `constrain*` functions (`constrainResolution` and\n * `constrainRotation` and `constrainCenter`).\n *\n * The main users of the constraints are the interactions and the\n * controls. For example, double-clicking on the map changes the view to\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\n * snaps to the closest resolution (with an animation).\n *\n * The *resolution constraint* snaps to specific resolutions. It is\n * determined by the following options: `resolutions`, `maxResolution`,\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\n * options are ignored. See documentation for each option for more\n * information.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default the rotation value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the center is not constrained at all.\n *\n  * @api\n */\nclass View extends BaseObject {\n\n  /**\n   * @param {ViewOptions=} opt_options View options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = {};\n    properties[ViewProperty.CENTER] = options.center !== undefined ?\n      options.center : null;\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n\n    if (options.resolution !== undefined) {\n      properties[ViewProperty.RESOLUTION] = options.resolution;\n    } else if (options.zoom !== undefined) {\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(\n        this.maxResolution_, options.zoom - this.minZoom_);\n\n      if (this.resolutions_) { // in case map zoom is out of min/max zoom range\n        properties[ViewProperty.RESOLUTION] = clamp(\n          Number(this.getResolution() || properties[ViewProperty.RESOLUTION]),\n          this.minResolution_, this.maxResolution_);\n      }\n    }\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenter();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean))} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenter(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    let start = Date.now();\n    let center = this.getCenter().slice();\n    let resolution = this.getResolution();\n    let rotation = this.getRotation();\n    const series = [];\n    for (let i = 0; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = /** @type {Animation} */ ({\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut\n      });\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center;\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.constrainResolution(\n          this.maxResolution_, options.zoom - this.minZoom_, 0);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      animation.callback = callback;\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n    }\n    this.animations_.length = 0;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.set(ViewProperty.CENTER, [x, y]);\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution = progress === 1 ?\n            animation.targetResolution :\n            animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterZoom(resolution, animation.anchor));\n          }\n          this.set(ViewProperty.RESOLUTION, resolution);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          const rotation = progress === 1 ?\n            modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :\n            animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            this.set(ViewProperty.CENTER,\n              this.calculateCenterRotate(rotation, animation.anchor));\n          }\n          this.set(ViewProperty.ROTATION, rotation);\n        }\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenter();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenter();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * @private\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getSizeFromViewport_() {\n    const size = [100, 100];\n    const selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\n    const element = document.querySelector(selector);\n    if (element) {\n      const metrics = getComputedStyle(element);\n      size[0] = parseInt(metrics.width, 10);\n      size[1] = parseInt(metrics.height, 10);\n    }\n    return size;\n  }\n\n  /**\n   * Get the constrained center of this view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Constrained center.\n   * @api\n   */\n  constrainCenter(center) {\n    return this.constraints_.center(center);\n  }\n\n  /**\n   * Get the constrained resolution of this view.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @param {number=} opt_direction Direction. Default is `0`.\n   * @return {number|undefined} Constrained resolution.\n   * @api\n   */\n  constrainResolution(resolution, opt_delta, opt_direction) {\n    const delta = opt_delta || 0;\n    const direction = opt_direction || 0;\n    return this.constraints_.resolution(resolution, delta, direction);\n  }\n\n  /**\n   * Get the constrained rotation of this view.\n   * @param {number|undefined} rotation Rotation.\n   * @param {number=} opt_delta Delta. Default is `0`.\n   * @return {number|undefined} Constrained rotation.\n   * @api\n   */\n  constrainRotation(rotation, opt_delta) {\n    const delta = opt_delta || 0;\n    return this.constraints_.rotation(rotation, delta);\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    return (\n      /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(ViewProperty.CENTER))\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(opt_size) {\n    const size = opt_size || this.getSizeFromViewport_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    assert(center, 1); // The view center is not defined\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, opt_size) {\n    const size = opt_size || this.getSizeFromViewport_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.maxResolution_;\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function(value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      });\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.maxResolution_;\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function(resolution) {\n        const value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;\n        return value;\n      });\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio for center rounding.\n   * @return {State} View state.\n   */\n  getState(pixelRatio) {\n    const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (this.getCenter());\n    const projection = this.getProjection();\n    const resolution = /** @type {number} */ (this.getResolution());\n    const pixelResolution = resolution / pixelRatio;\n    const rotation = this.getRotation();\n    return (\n      /** @type {State} */ ({\n        center: [\n          Math.round(center[0] / pixelResolution) * pixelResolution,\n          Math.round(center[1] / pixelResolution) * pixelResolution\n        ],\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        rotation: rotation,\n        zoom: this.getZoom()\n      })\n    );\n  }\n\n  /**\n   * Get the current zoom level.  If you configured your view with a resolutions\n   * array (this is rare), this method may return non-integer zoom levels (so\n   * the zoom level is not safe to use as an index into a resolutions array).\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    return /** @type {number} */ (this.constrainResolution(\n      this.maxResolution_, zoom - this.minZoom_, 0));\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  fit(geometryOrExtent, opt_options) {\n    const options = opt_options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getSizeFromViewport_();\n    }\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function',\n      24); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent),\n        25); // Cannot fit empty extent provided as `geometry`\n      geometry = polygonFromExtent(geometryOrExtent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      geometryOrExtent = geometryOrExtent.getExtent();\n      geometry = polygonFromExtent(geometryOrExtent);\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\n    } else {\n      geometry = geometryOrExtent;\n    }\n\n    const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const constrainResolution = options.constrainResolution !== undefined ?\n      options.constrainResolution : true;\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.constrainResolution(\n        this.maxResolution_, options.maxZoom - this.minZoom_, 0);\n    } else {\n      minResolution = 0;\n    }\n    const coords = geometry.getFlatCoordinates();\n\n    // calculate rotated extent\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    const stride = geometry.getStride();\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtent(\n      [minRotX, minRotY, maxRotX, maxRotY],\n      [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution :\n      Math.max(resolution, minResolution);\n    if (constrainResolution) {\n      let constrainedResolution = this.constrainResolution(resolution, 0, 0);\n      if (!nearest && constrainedResolution < resolution) {\n        constrainedResolution = this.constrainResolution(\n          constrainedResolution, -1, 0);\n      }\n      resolution = constrainedResolution;\n    }\n\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    let centerRotX = (minRotX + maxRotX) / 2;\n    let centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    const centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    const centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    const center = [centerX, centerY];\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animate({\n        resolution: resolution,\n        center: center,\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.setResolution(resolution);\n      this.setCenter(center);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    // calculate rotated position\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    const resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    const centerX = rotX * cosAngle - rotY * sinAngle;\n    const centerY = rotY * cosAngle + rotX * sinAngle;\n\n    this.setCenter([centerX, centerY]);\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenter() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Rotate the view around a given coordinate.\n   * @param {number} rotation New rotation value for the view.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  rotate(rotation, opt_anchor) {\n    if (opt_anchor !== undefined) {\n      const center = this.calculateCenterRotate(rotation, opt_anchor);\n      this.setCenter(center);\n    }\n    this.setRotation(rotation);\n  }\n\n  /**\n   * Set the center of the current view.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.set(ViewProperty.CENTER, center);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * @param {ViewHint} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.set(ViewProperty.RESOLUTION, resolution);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * Set the rotation for this view.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.set(ViewProperty.ROTATION, rotation);\n    if (this.getAnimating()) {\n      this.cancelAnimations();\n    }\n  }\n\n  /**\n   * Zoom to a specific zoom level.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n}\n\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function() {\n    callback(returnValue);\n  }, 0);\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    return createExtent(options.extent);\n  } else {\n    return centerNone;\n  }\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom = options.minZoom !== undefined ?\n    options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom = options.maxZoom !== undefined ?\n    options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor = options.zoomFactor !== undefined ?\n    options.zoomFactor : defaultZoomFactor;\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ?\n      resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    resolutionConstraint = createSnapToResolutions(\n      resolutions);\n  } else {\n    // calculate the default min and max resolution\n    const projection = createProjection(options.projection, 'EPSG:3857');\n    const extent = projection.getExtent();\n    const size = !extent ?\n      // use an extent that can fit the whole world if need be\n      360 * METERS_PER_UNIT[Units.DEGREES] /\n            projection.getMetersPerUnit() :\n      Math.max(getWidth(extent), getHeight(extent));\n\n    const defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(\n      defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution = defaultMaxResolution / Math.pow(\n      defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(\n      Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    resolutionConstraint = createSnapToPower(\n      zoomFactor, maxResolution, maxZoom - minZoom);\n  }\n  return {constraint: resolutionConstraint, maxResolution: maxResolution,\n    minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};\n}\n\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation = options.enableRotation !== undefined ?\n    options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\nexport default View;\n"]},"metadata":{},"sourceType":"module"}