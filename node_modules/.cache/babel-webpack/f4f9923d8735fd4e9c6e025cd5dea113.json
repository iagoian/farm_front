{"ast":null,"code":"/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\n * @returns {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n  var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  var decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @returns {number} Value\n */\nexport function compareVersions(v1, v2) {\n  var s1 = ('' + v1).split('.');\n  var s2 = ('' + v2).split('.');\n  for (var i = 0; i < Math.max(s1.length, s2.length); i++) {\n    var n1 = parseInt(s1[i] || '0', 10);\n    var n2 = parseInt(s2[i] || '0', 10);\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n  return 0;\n}","map":{"version":3,"sources":["../../src/ol/string.js"],"names":["const","let"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,SAAS,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE;EACtDA,IAAM,YAAY,GAAG,aAAa,KAAK,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,MAAM;EAC9FC,IAAI,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC;EACvC,OAAO,GAAG,OAAO,KAAK,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,GAAG,OAAO;EACxD,OAAO,OAAO,GAAG,KAAK,GAAG,YAAY,GAAG,IAAI,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY;AAChG;;;;;;;;AASD,OAAO,SAAS,eAAe,CAAC,EAAE,EAAE,EAAE,EAAE;EACtCD,IAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC;EAC/BA,IAAM,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC;EAE/B,KAAKC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE;IACvDD,IAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;IACrCA,IAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC;IAErC,IAAI,EAAE,GAAG,EAAE,EAAE;MACX,OAAO,CAAC;IACT;IACD,IAAI,EAAE,GAAG,EAAE,EAAE;MACX,OAAO,CAAC,CAAC;IACV;EACF;EAED,OAAO,CAAC;AACT","sourcesContent":["/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\n * @returns {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n  const numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @returns {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n"]},"metadata":{},"sourceType":"module"}