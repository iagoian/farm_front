{"ast":null,"code":"/**\n * @module ol/renderer/canvas/Layer\n */\nimport { abstract } from '../../util.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { TRUE } from '../../functions.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { rotateAtOffset } from '../../render/canvas.js';\nimport CanvasImmediateRenderer from '../../render/canvas/Immediate.js';\nimport LayerRenderer from '../Layer.js';\nimport { create as createTransform, apply as applyTransform, compose as composeTransform } from '../../transform.js';\n\n/**\n * @abstract\n */\nvar CanvasLayerRenderer = /*@__PURE__*/function (LayerRenderer) {\n  function CanvasLayerRenderer(layer) {\n    LayerRenderer.call(this, layer);\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = createTransform();\n  }\n  if (LayerRenderer) CanvasLayerRenderer.__proto__ = LayerRenderer;\n  CanvasLayerRenderer.prototype = Object.create(LayerRenderer && LayerRenderer.prototype);\n  CanvasLayerRenderer.prototype.constructor = CanvasLayerRenderer;\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.clip = function clip(context, frameState, extent) {\n    var pixelRatio = frameState.pixelRatio;\n    var width = frameState.size[0] * pixelRatio;\n    var height = frameState.size[1] * pixelRatio;\n    var rotation = frameState.viewState.rotation;\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    context.save();\n    rotateAtOffset(context, -rotation, width / 2, height / 2);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, width / 2, height / 2);\n  };\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @private\n   */\n  CanvasLayerRenderer.prototype.dispatchComposeEvent_ = function dispatchComposeEvent_(type, context, frameState, opt_transform) {\n    var layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      var width = frameState.size[0] * frameState.pixelRatio;\n      var height = frameState.size[1] * frameState.pixelRatio;\n      var rotation = frameState.viewState.rotation;\n      rotateAtOffset(context, -rotation, width / 2, height / 2);\n      var transform = opt_transform !== undefined ? opt_transform : this.getTransform(frameState, 0);\n      var render = new CanvasImmediateRenderer(context, frameState.pixelRatio, frameState.extent, transform, frameState.viewState.rotation);\n      var composeEvent = new RenderEvent(type, render, frameState, context, null);\n      layer.dispatchEvent(composeEvent);\n      rotateAtOffset(context, rotation, width / 2, height / 2);\n    }\n  };\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(this: S, import(\"../../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  CanvasLayerRenderer.prototype.forEachLayerAtCoordinate = function forEachLayerAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);\n    if (hasFeature) {\n      return callback.call(thisArg, this.getLayer(), null);\n    } else {\n      return undefined;\n    }\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.postCompose = function postCompose(context, frameState, layerState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.preCompose = function preCompose(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.dispatchRenderEvent = function dispatchRenderEvent(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);\n  };\n\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  CanvasLayerRenderer.prototype.getTransform = function getTransform(frameState, offsetX) {\n    var viewState = frameState.viewState;\n    var pixelRatio = frameState.pixelRatio;\n    var dx1 = pixelRatio * frameState.size[0] / 2;\n    var dy1 = pixelRatio * frameState.size[1] / 2;\n    var sx = pixelRatio / viewState.resolution;\n    var sy = -sx;\n    var angle = -viewState.rotation;\n    var dx2 = -viewState.center[0] + offsetX;\n    var dy2 = -viewState.center[1];\n    return composeTransform(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);\n  };\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  CanvasLayerRenderer.prototype.composeFrame = function composeFrame(frameState, layerState, context) {\n    abstract();\n  };\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @return {boolean} whether composeFrame should be called.\n   */\n  CanvasLayerRenderer.prototype.prepareFrame = function prepareFrame(frameState, layerState) {\n    return abstract();\n  };\n  return CanvasLayerRenderer;\n}(LayerRenderer);\nexport default CanvasLayerRenderer;","map":{"version":3,"sources":["../../../../src/ol/renderer/canvas/Layer.js"],"names":["super","const"],"mappings":"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","sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport {abstract} from '../../util.js';\nimport {getBottomLeft, getBottomRight, getTopLeft, getTopRight} from '../../extent.js';\nimport {TRUE} from '../../functions.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {rotateAtOffset} from '../../render/canvas.js';\nimport CanvasImmediateRenderer from '../../render/canvas/Immediate.js';\nimport LayerRenderer from '../Layer.js';\nimport {create as createTransform, apply as applyTransform, compose as composeTransform} from '../../transform.js';\n\n/**\n * @abstract\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n\n  /**\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\n   */\n  constructor(layer) {\n\n    super(layer);\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = createTransform();\n\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clip(context, frameState, extent) {\n    const pixelRatio = frameState.pixelRatio;\n    const width = frameState.size[0] * pixelRatio;\n    const height = frameState.size[1] * pixelRatio;\n    const rotation = frameState.viewState.rotation;\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    context.save();\n    rotateAtOffset(context, -rotation, width / 2, height / 2);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, width / 2, height / 2);\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @private\n   */\n  dispatchComposeEvent_(type, context, frameState, opt_transform) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const width = frameState.size[0] * frameState.pixelRatio;\n      const height = frameState.size[1] * frameState.pixelRatio;\n      const rotation = frameState.viewState.rotation;\n      rotateAtOffset(context, -rotation, width / 2, height / 2);\n      const transform = opt_transform !== undefined ?\n        opt_transform : this.getTransform(frameState, 0);\n      const render = new CanvasImmediateRenderer(\n        context, frameState.pixelRatio, frameState.extent, transform,\n        frameState.viewState.rotation);\n      const composeEvent = new RenderEvent(type, render, frameState,\n        context, null);\n      layer.dispatchEvent(composeEvent);\n      rotateAtOffset(context, rotation, width / 2, height / 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(this: S, import(\"../../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n   *     callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  forEachLayerAtCoordinate(coordinate, frameState, hitTolerance, callback, thisArg) {\n    const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, TRUE);\n\n    if (hasFeature) {\n      return callback.call(thisArg, this.getLayer(), null);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  postCompose(context, frameState, layerState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.POSTCOMPOSE, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  preCompose(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.PRECOMPOSE, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../transform.js\").Transform=} opt_transform Transform.\n   * @protected\n   */\n  dispatchRenderEvent(context, frameState, opt_transform) {\n    this.dispatchComposeEvent_(RenderEventType.RENDER, context, frameState, opt_transform);\n  }\n\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getTransform(frameState, offsetX) {\n    const viewState = frameState.viewState;\n    const pixelRatio = frameState.pixelRatio;\n    const dx1 = pixelRatio * frameState.size[0] / 2;\n    const dy1 = pixelRatio * frameState.size[1] / 2;\n    const sx = pixelRatio / viewState.resolution;\n    const sy = -sx;\n    const angle = -viewState.rotation;\n    const dx2 = -viewState.center[0] + offsetX;\n    const dy2 = -viewState.center[1];\n    return composeTransform(this.transform_, dx1, dy1, sx, sy, angle, dx2, dy2);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  composeFrame(frameState, layerState, context) {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @return {boolean} whether composeFrame should be called.\n   */\n  prepareFrame(frameState, layerState) {\n    return abstract();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"]},"metadata":{},"sourceType":"module"}