{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function zip() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n  var resultSelector = observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport var ZipOperator = /*#__PURE__*/function () {\n  function ZipOperator(resultSelector) {\n    _classCallCheck(this, ZipOperator);\n    this.resultSelector = resultSelector;\n  }\n  _createClass(ZipOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n  }]);\n  return ZipOperator;\n}();\nexport var ZipSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(ZipSubscriber, _Subscriber);\n  var _super = _createSuper(ZipSubscriber);\n  function ZipSubscriber(destination, resultSelector) {\n    var _this;\n    var values = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.create(null);\n    _classCallCheck(this, ZipSubscriber);\n    _this = _super.call(this, destination);\n    _this.resultSelector = resultSelector;\n    _this.iterators = [];\n    _this.active = 0;\n    _this.resultSelector = typeof resultSelector === 'function' ? resultSelector : undefined;\n    return _this;\n  }\n  _createClass(ZipSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var iterators = this.iterators;\n      if (isArray(value)) {\n        iterators.push(new StaticArrayIterator(value));\n      } else if (typeof value[Symbol_iterator] === 'function') {\n        iterators.push(new StaticIterator(value[Symbol_iterator]()));\n      } else {\n        iterators.push(new ZipBufferIterator(this.destination, this, value));\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var iterators = this.iterators;\n      var len = iterators.length;\n      this.unsubscribe();\n      if (len === 0) {\n        this.destination.complete();\n        return;\n      }\n      this.active = len;\n      for (var i = 0; i < len; i++) {\n        var iterator = iterators[i];\n        if (iterator.stillUnsubscribed) {\n          var destination = this.destination;\n          destination.add(iterator.subscribe());\n        } else {\n          this.active--;\n        }\n      }\n    }\n  }, {\n    key: \"notifyInactive\",\n    value: function notifyInactive() {\n      this.active--;\n      if (this.active === 0) {\n        this.destination.complete();\n      }\n    }\n  }, {\n    key: \"checkIterators\",\n    value: function checkIterators() {\n      var iterators = this.iterators;\n      var len = iterators.length;\n      var destination = this.destination;\n      for (var i = 0; i < len; i++) {\n        var iterator = iterators[i];\n        if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n          return;\n        }\n      }\n      var shouldComplete = false;\n      var args = [];\n      for (var _i = 0; _i < len; _i++) {\n        var _iterator = iterators[_i];\n        var result = _iterator.next();\n        if (_iterator.hasCompleted()) {\n          shouldComplete = true;\n        }\n        if (result.done) {\n          destination.complete();\n          return;\n        }\n        args.push(result.value);\n      }\n      if (this.resultSelector) {\n        this._tryresultSelector(args);\n      } else {\n        destination.next(args);\n      }\n      if (shouldComplete) {\n        destination.complete();\n      }\n    }\n  }, {\n    key: \"_tryresultSelector\",\n    value: function _tryresultSelector(args) {\n      var result;\n      try {\n        result = this.resultSelector.apply(this, args);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n      this.destination.next(result);\n    }\n  }]);\n  return ZipSubscriber;\n}(Subscriber);\nvar StaticIterator = /*#__PURE__*/function () {\n  function StaticIterator(iterator) {\n    _classCallCheck(this, StaticIterator);\n    this.iterator = iterator;\n    this.nextResult = iterator.next();\n  }\n  _createClass(StaticIterator, [{\n    key: \"hasValue\",\n    value: function hasValue() {\n      return true;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var result = this.nextResult;\n      this.nextResult = this.iterator.next();\n      return result;\n    }\n  }, {\n    key: \"hasCompleted\",\n    value: function hasCompleted() {\n      var nextResult = this.nextResult;\n      return Boolean(nextResult && nextResult.done);\n    }\n  }]);\n  return StaticIterator;\n}();\nvar StaticArrayIterator = /*#__PURE__*/function () {\n  function StaticArrayIterator(array) {\n    _classCallCheck(this, StaticArrayIterator);\n    this.array = array;\n    this.index = 0;\n    this.length = 0;\n    this.length = array.length;\n  }\n  _createClass(StaticArrayIterator, [{\n    key: Symbol_iterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next(value) {\n      var i = this.index++;\n      var array = this.array;\n      return i < this.length ? {\n        value: array[i],\n        done: false\n      } : {\n        value: null,\n        done: true\n      };\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return this.array.length > this.index;\n    }\n  }, {\n    key: \"hasCompleted\",\n    value: function hasCompleted() {\n      return this.array.length === this.index;\n    }\n  }]);\n  return StaticArrayIterator;\n}();\nvar ZipBufferIterator = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(ZipBufferIterator, _SimpleOuterSubscribe);\n  var _super2 = _createSuper(ZipBufferIterator);\n  function ZipBufferIterator(destination, parent, observable) {\n    var _this2;\n    _classCallCheck(this, ZipBufferIterator);\n    _this2 = _super2.call(this, destination);\n    _this2.parent = parent;\n    _this2.observable = observable;\n    _this2.stillUnsubscribed = true;\n    _this2.buffer = [];\n    _this2.isComplete = false;\n    return _this2;\n  }\n  _createClass(ZipBufferIterator, [{\n    key: Symbol_iterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var buffer = this.buffer;\n      if (buffer.length === 0 && this.isComplete) {\n        return {\n          value: null,\n          done: true\n        };\n      } else {\n        return {\n          value: buffer.shift(),\n          done: false\n        };\n      }\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return this.buffer.length > 0;\n    }\n  }, {\n    key: \"hasCompleted\",\n    value: function hasCompleted() {\n      return this.buffer.length === 0 && this.isComplete;\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.buffer.length > 0) {\n        this.isComplete = true;\n        this.parent.notifyInactive();\n      } else {\n        this.destination.complete();\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.buffer.push(innerValue);\n      this.parent.checkIterators();\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));\n    }\n  }]);\n  return ZipBufferIterator;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/observable/zip.ts"],"names":[],"mappings":"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","sourcesContent":["import { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function zip(...observables) {\n    const resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport class ZipOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class ZipSubscriber extends Subscriber {\n    constructor(destination, resultSelector, values = Object.create(null)) {\n        super(destination);\n        this.resultSelector = resultSelector;\n        this.iterators = [];\n        this.active = 0;\n        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;\n    }\n    _next(value) {\n        const iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    }\n    _complete() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        this.unsubscribe();\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                const destination = this.destination;\n                destination.add(iterator.subscribe());\n            }\n            else {\n                this.active--;\n            }\n        }\n    }\n    notifyInactive() {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    }\n    checkIterators() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        const destination = this.destination;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        let shouldComplete = false;\n        const args = [];\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            let result = iterator.next();\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    }\n    _tryresultSelector(args) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\nclass StaticIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    hasValue() {\n        return true;\n    }\n    next() {\n        const result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    }\n    hasCompleted() {\n        const nextResult = this.nextResult;\n        return Boolean(nextResult && nextResult.done);\n    }\n}\nclass StaticArrayIterator {\n    constructor(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next(value) {\n        const i = this.index++;\n        const array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    }\n    hasValue() {\n        return this.array.length > this.index;\n    }\n    hasCompleted() {\n        return this.array.length === this.index;\n    }\n}\nclass ZipBufferIterator extends SimpleOuterSubscriber {\n    constructor(destination, parent, observable) {\n        super(destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next() {\n        const buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    }\n    hasValue() {\n        return this.buffer.length > 0;\n    }\n    hasCompleted() {\n        return this.buffer.length === 0 && this.isComplete;\n    }\n    notifyComplete() {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    notifyNext(innerValue) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    }\n    subscribe() {\n        return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));\n    }\n}\n//# sourceMappingURL=zip.js.map"]},"metadata":{},"sourceType":"module"}