{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function exhaust() {\n  return function (source) {\n    return source.lift(new SwitchFirstOperator());\n  };\n}\nvar SwitchFirstOperator = /*#__PURE__*/function () {\n  function SwitchFirstOperator() {\n    _classCallCheck(this, SwitchFirstOperator);\n  }\n  _createClass(SwitchFirstOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    }\n  }]);\n  return SwitchFirstOperator;\n}();\nvar SwitchFirstSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(SwitchFirstSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(SwitchFirstSubscriber);\n  function SwitchFirstSubscriber(destination) {\n    var _this;\n    _classCallCheck(this, SwitchFirstSubscriber);\n    _this = _super.call(this, destination);\n    _this.hasCompleted = false;\n    _this.hasSubscription = false;\n    return _this;\n  }\n  _createClass(SwitchFirstSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (!this.hasSubscription) {\n        this.hasSubscription = true;\n        this.add(innerSubscribe(value, new SimpleInnerSubscriber(this)));\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (!this.hasSubscription) {\n        this.destination.complete();\n      }\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      this.hasSubscription = false;\n      if (this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n  return SwitchFirstSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/exhaust.ts"],"names":[],"mappings":";;;;AAIA,SAAS,qBAAqB,EAAE,cAAc,EAAE,qBAAqB,QAAQ,mBAAmB;AAiDhG,OAAM,SAAU,OAAO,GAAA;EACrB,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,IAAI,mBAAmB,EAAK,CAAC;EAAA;AAC7E;AAAC,IAEK,mBAAmB;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACvB,cAAK,UAAyB,EAAE,MAAW,EAAA;MACzC,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,qBAAqB,CAAC,UAAU,CAAC,CAAC;IAChE;EAAC;EAAA;AAAA;AAAA,IAQG,qBAAyB;EAAA;EAAA;EAI7B,+BAAY,WAA0B,EAAA;IAAA;IAAA;IACpC,0BAAM,WAAW;IAJX,MAAA,YAAY,GAAY,KAAK;IAC7B,MAAA,eAAe,GAAY,KAAK;IAAC;EAIzC;EAAC;IAAA;IAAA,OAES,eAAM,KAAQ,EAAA;MACtB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;QACzB,IAAI,CAAC,eAAe,GAAG,IAAI;QAC3B,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;MACjE;IACH;EAAC;IAAA;IAAA,OAES,qBAAS;MACjB,IAAI,CAAC,YAAY,GAAG,IAAI;MACxB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;QACzB,IAAI,CAAC,WAAW,CAAC,QAAS,EAAE;MAC7B;IACH;EAAC;IAAA;IAAA,OAED,0BAAc;MACZ,IAAI,CAAC,eAAe,GAAG,KAAK;MAC5B,IAAI,IAAI,CAAC,YAAY,EAAE;QACrB,IAAI,CAAC,WAAW,CAAC,QAAS,EAAE;MAC7B;IACH;EAAC;EAAA;AAAA,EA3BoC,qBAA2B","sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function exhaust() {\n    return (source) => source.lift(new SwitchFirstOperator());\n}\nclass SwitchFirstOperator {\n    call(subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    }\n}\nclass SwitchFirstSubscriber extends SimpleOuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    _next(value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(innerSubscribe(value, new SimpleInnerSubscriber(this)));\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    }\n    notifyComplete() {\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=exhaust.js.map"]},"metadata":{},"sourceType":"module"}