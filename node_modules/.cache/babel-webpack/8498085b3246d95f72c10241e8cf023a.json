{"ast":null,"code":"import _toConsumableArray from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n  if (sources.length === 1) {\n    var first = sources[0];\n    if (isArray(first)) {\n      return forkJoinInternal(first, null);\n    }\n    if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n      var keys = Object.keys(first);\n      return forkJoinInternal(keys.map(function (key) {\n        return first[key];\n      }), keys);\n    }\n  }\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector.apply(void 0, _toConsumableArray(args));\n    }));\n  }\n  return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n    var _loop = function _loop(i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function next(value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n          values[i] = value;\n        },\n        error: function error(err) {\n          return subscriber.error(err);\n        },\n        complete: function complete() {\n          completed++;\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n    for (var i = 0; i < len; i++) {\n      _loop(i);\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/internal/observable/forkJoin.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,QAAQ,eAAe;AAE1C,SAAS,OAAO,QAAQ,iBAAiB;AACzC,SAAS,GAAG,QAAQ,kBAAkB;AACtC,SAAS,QAAQ,QAAQ,kBAAkB;AAE3C,SAAS,IAAI,QAAQ,QAAQ;AAsI7B,OAAM,SAAU,QAAQ,GACL;EAAA,kCAAd,OAAc;IAAd,OAAc;EAAA;EAEjB,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;IACxB,IAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC;IACxB,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;MAClB,OAAO,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC;IACrC;IAED,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC,SAAS,EAAE;MACxE,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;MAC/B,OAAO,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;QAAA,OAAI,KAAK,CAAC,GAAG,CAAC;MAAA,EAAC,EAAE,IAAI,CAAC;IAC3D;EACF;EAGD,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;IACrD,IAAM,cAAc,GAAG,OAAO,CAAC,GAAG,EAAc;IAChD,OAAO,GAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAI,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO;IAC9E,OAAO,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,CACzC,GAAG,CAAC,UAAC,IAAW;MAAA,OAAK,cAAc,kCAAI,IAAI,EAAC;IAAA,EAAC,CAC9C;EACF;EAED,OAAO,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC;AACxC;AAEA,SAAS,gBAAgB,CAAC,OAA+B,EAAE,IAAqB,EAAA;EAC9E,OAAO,IAAI,UAAU,CAAC,UAAA,UAAU,EAAG;IACjC,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM;IAC1B,IAAI,GAAG,KAAK,CAAC,EAAE;MACb,UAAU,CAAC,QAAQ,EAAE;MACrB;IACD;IACD,IAAM,MAAM,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC;IAC7B,IAAI,SAAS,GAAG,CAAC;IACjB,IAAI,OAAO,GAAG,CAAC;IAAC,2BACP,CAAC;MACR,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MAC/B,IAAI,QAAQ,GAAG,KAAK;MACpB,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;QAC9B,IAAI,EAAE,cAAA,KAAK,EAAG;UACZ,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,IAAI;YACf,OAAO,EAAE;UACV;UACD,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK;QACnB,CAAC;QACD,KAAK,EAAE,eAAA,GAAG;UAAA,OAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;QAAA;QACnC,QAAQ,EAAE,oBAAK;UACb,SAAS,EAAE;UACX,IAAI,SAAS,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;YAClC,IAAI,OAAO,KAAK,GAAG,EAAE;cACnB,UAAU,CAAC,IAAI,CAAC,IAAI,GAClB,IAAI,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,GAAG,EAAE,CAAC;gBAAA,OAAM,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM;cAAA,CAAC,EAAE,CAAA,CAAE,CAAC,GACtE,MAAM,CAAC;YACV;YACD,UAAU,CAAC,QAAQ,EAAE;UACtB;QACH;OACD,CAAC,CAAC;IAAC;IAvBN,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;MAAA,MAArB,CAAC;IAwBT;EACH,CAAC,CAAC;AACJ","sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin(...sources) {\n    if (sources.length === 1) {\n        const first = sources[0];\n        if (isArray(first)) {\n            return forkJoinInternal(first, null);\n        }\n        if (isObject(first) && Object.getPrototypeOf(first) === Object.prototype) {\n            const keys = Object.keys(first);\n            return forkJoinInternal(keys.map(key => first[key]), keys);\n        }\n    }\n    if (typeof sources[sources.length - 1] === 'function') {\n        const resultSelector = sources.pop();\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n        return forkJoinInternal(sources, null).pipe(map((args) => resultSelector(...args)));\n    }\n    return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n    return new Observable(subscriber => {\n        const len = sources.length;\n        if (len === 0) {\n            subscriber.complete();\n            return;\n        }\n        const values = new Array(len);\n        let completed = 0;\n        let emitted = 0;\n        for (let i = 0; i < len; i++) {\n            const source = from(sources[i]);\n            let hasValue = false;\n            subscriber.add(source.subscribe({\n                next: value => {\n                    if (!hasValue) {\n                        hasValue = true;\n                        emitted++;\n                    }\n                    values[i] = value;\n                },\n                error: err => subscriber.error(err),\n                complete: () => {\n                    completed++;\n                    if (completed === len || !hasValue) {\n                        if (emitted === len) {\n                            subscriber.next(keys ?\n                                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :\n                                values);\n                        }\n                        subscriber.complete();\n                    }\n                }\n            }));\n        }\n    });\n}\n//# sourceMappingURL=forkJoin.js.map"]},"metadata":{},"sourceType":"module"}