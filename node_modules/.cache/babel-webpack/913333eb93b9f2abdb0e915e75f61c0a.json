{"ast":null,"code":"/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n\n/**\n * @type {number}\n */\nexport var DROP = Infinity;\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nvar PriorityQueue = function PriorityQueue(priorityFunction, keyFunction) {\n  /**\n   * @type {function(T): number}\n   * @private\n   */\n  this.priorityFunction_ = priorityFunction;\n\n  /**\n   * @type {function(T): string}\n   * @private\n   */\n  this.keyFunction_ = keyFunction;\n\n  /**\n   * @type {Array<T>}\n   * @private\n   */\n  this.elements_ = [];\n\n  /**\n   * @type {Array<number>}\n   * @private\n   */\n  this.priorities_ = [];\n\n  /**\n   * @type {!Object<string, boolean>}\n   * @private\n   */\n  this.queuedElements_ = {};\n};\n\n/**\n * FIXME empty description for jsdoc\n */\nPriorityQueue.prototype.clear = function clear$1() {\n  this.elements_.length = 0;\n  this.priorities_.length = 0;\n  clear(this.queuedElements_);\n};\n\n/**\n * Remove and return the highest-priority element. O(log N).\n * @return {T} Element.\n */\nPriorityQueue.prototype.dequeue = function dequeue() {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[0];\n  if (elements.length == 1) {\n    elements.length = 0;\n    priorities.length = 0;\n  } else {\n    elements[0] = elements.pop();\n    priorities[0] = priorities.pop();\n    this.siftUp_(0);\n  }\n  var elementKey = this.keyFunction_(element);\n  delete this.queuedElements_[elementKey];\n  return element;\n};\n\n/**\n * Enqueue an element. O(log N).\n * @param {T} element Element.\n * @return {boolean} The element was added to the queue.\n */\nPriorityQueue.prototype.enqueue = function enqueue(element) {\n  assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n  var priority = this.priorityFunction_(element);\n  if (priority != DROP) {\n    this.elements_.push(element);\n    this.priorities_.push(priority);\n    this.queuedElements_[this.keyFunction_(element)] = true;\n    this.siftDown_(0, this.elements_.length - 1);\n    return true;\n  }\n  return false;\n};\n\n/**\n * @return {number} Count.\n */\nPriorityQueue.prototype.getCount = function getCount() {\n  return this.elements_.length;\n};\n\n/**\n * Gets the index of the left child of the node at the given index.\n * @param {number} index The index of the node to get the left child for.\n * @return {number} The index of the left child.\n * @private\n */\nPriorityQueue.prototype.getLeftChildIndex_ = function getLeftChildIndex_(index) {\n  return index * 2 + 1;\n};\n\n/**\n * Gets the index of the right child of the node at the given index.\n * @param {number} index The index of the node to get the right child for.\n * @return {number} The index of the right child.\n * @private\n */\nPriorityQueue.prototype.getRightChildIndex_ = function getRightChildIndex_(index) {\n  return index * 2 + 2;\n};\n\n/**\n * Gets the index of the parent of the node at the given index.\n * @param {number} index The index of the node to get the parent for.\n * @return {number} The index of the parent.\n * @private\n */\nPriorityQueue.prototype.getParentIndex_ = function getParentIndex_(index) {\n  return index - 1 >> 1;\n};\n\n/**\n * Make this a heap. O(N).\n * @private\n */\nPriorityQueue.prototype.heapify_ = function heapify_() {\n  var i;\n  for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n    this.siftUp_(i);\n  }\n};\n\n/**\n * @return {boolean} Is empty.\n */\nPriorityQueue.prototype.isEmpty = function isEmpty() {\n  return this.elements_.length === 0;\n};\n\n/**\n * @param {string} key Key.\n * @return {boolean} Is key queued.\n */\nPriorityQueue.prototype.isKeyQueued = function isKeyQueued(key) {\n  return key in this.queuedElements_;\n};\n\n/**\n * @param {T} element Element.\n * @return {boolean} Is queued.\n */\nPriorityQueue.prototype.isQueued = function isQueued(element) {\n  return this.isKeyQueued(this.keyFunction_(element));\n};\n\n/**\n * @param {number} index The index of the node to move down.\n * @private\n */\nPriorityQueue.prototype.siftUp_ = function siftUp_(index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var count = elements.length;\n  var element = elements[index];\n  var priority = priorities[index];\n  var startIndex = index;\n  while (index < count >> 1) {\n    var lIndex = this.getLeftChildIndex_(index);\n    var rIndex = this.getRightChildIndex_(index);\n    var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n    elements[index] = elements[smallerChildIndex];\n    priorities[index] = priorities[smallerChildIndex];\n    index = smallerChildIndex;\n  }\n  elements[index] = element;\n  priorities[index] = priority;\n  this.siftDown_(startIndex, index);\n};\n\n/**\n * @param {number} startIndex The index of the root.\n * @param {number} index The index of the node to move up.\n * @private\n */\nPriorityQueue.prototype.siftDown_ = function siftDown_(startIndex, index) {\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var element = elements[index];\n  var priority = priorities[index];\n  while (index > startIndex) {\n    var parentIndex = this.getParentIndex_(index);\n    if (priorities[parentIndex] > priority) {\n      elements[index] = elements[parentIndex];\n      priorities[index] = priorities[parentIndex];\n      index = parentIndex;\n    } else {\n      break;\n    }\n  }\n  elements[index] = element;\n  priorities[index] = priority;\n};\n\n/**\n * FIXME empty description for jsdoc\n */\nPriorityQueue.prototype.reprioritize = function reprioritize() {\n  var priorityFunction = this.priorityFunction_;\n  var elements = this.elements_;\n  var priorities = this.priorities_;\n  var index = 0;\n  var n = elements.length;\n  var element, i, priority;\n  for (i = 0; i < n; ++i) {\n    element = elements[i];\n    priority = priorityFunction(element);\n    if (priority == DROP) {\n      delete this.queuedElements_[this.keyFunction_(element)];\n    } else {\n      priorities[index] = priority;\n      elements[index++] = element;\n    }\n  }\n  elements.length = index;\n  priorities.length = index;\n  this.heapify_();\n};\nexport default PriorityQueue;","map":{"version":3,"sources":["../../../src/ol/structs/PriorityQueue.js"],"names":["const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n\n/**\n * @type {number}\n */\nexport const DROP = Infinity;\n\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html\n * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nclass PriorityQueue {\n\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_),\n      31); // Tried to enqueue an `element` that was already added to the queue\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  getParentIndex_(index) {\n    return (index - 1) >> 1;\n  }\n\n\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < (count >> 1)) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n\n      const smallerChildIndex = rIndex < count &&\n          priorities[rIndex] < priorities[lIndex] ?\n        rIndex : lIndex;\n\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n\n}\n\n\nexport default PriorityQueue;\n"]},"metadata":{},"sourceType":"module"}