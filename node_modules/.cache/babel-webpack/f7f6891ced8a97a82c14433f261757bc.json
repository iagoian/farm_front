{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project) {\n  var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n  var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\nexport var ExpandOperator = /*#__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    _classCallCheck(this, ExpandOperator);\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n  _createClass(ExpandOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n  }]);\n  return ExpandOperator;\n}();\nexport var ExpandSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(ExpandSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(ExpandSubscriber);\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this;\n    _classCallCheck(this, ExpandSubscriber);\n    _this = _super.call(this, destination);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n    return _this;\n  }\n  _createClass(ExpandSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var destination = this.destination;\n      if (destination.closed) {\n        this._complete();\n        return;\n      }\n      var index = this.index++;\n      if (this.active < this.concurrent) {\n        destination.next(value);\n        try {\n          var project = this.project;\n          var result = project(value, index);\n          if (!this.scheduler) {\n            this.subscribeToProjection(result, value, index);\n          } else {\n            var state = {\n              subscriber: this,\n              result: result,\n              value: value,\n              index: index\n            };\n            var _destination = this.destination;\n            _destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n          }\n        } catch (e) {\n          destination.error(e);\n        }\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"subscribeToProjection\",\n    value: function subscribeToProjection(result, value, index) {\n      this.active++;\n      var destination = this.destination;\n      destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (this.hasCompleted && this.active === 0) {\n        this.destination.complete();\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this._next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n      if (buffer && buffer.length > 0) {\n        this._next(buffer.shift());\n      }\n      if (this.hasCompleted && this.active === 0) {\n        this.destination.complete();\n      }\n    }\n  }], [{\n    key: \"dispatch\",\n    value: function dispatch(arg) {\n      var subscriber = arg.subscriber,\n        result = arg.result,\n        value = arg.value,\n        index = arg.index;\n      subscriber.subscribeToProjection(result, value, index);\n    }\n  }]);\n  return ExpandSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/expand.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler) {\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\nexport class ExpandOperator {\n    constructor(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    }\n}\nexport class ExpandSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent, scheduler) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    static dispatch(arg) {\n        const { subscriber, result, value, index } = arg;\n        subscriber.subscribeToProjection(result, value, index);\n    }\n    _next(value) {\n        const destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        const index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                const { project } = this;\n                const result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    const state = { subscriber: this, result, value, index };\n                    const destination = this.destination;\n                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    subscribeToProjection(result, value, index) {\n        this.active++;\n        const destination = this.destination;\n        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this._next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=expand.js.map"]},"metadata":{},"sourceType":"module"}