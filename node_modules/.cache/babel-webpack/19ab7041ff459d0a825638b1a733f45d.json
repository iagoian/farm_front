{"ast":null,"code":"import _assertThisInitialized from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n  return function (source) {\n    return source.lift(new SequenceEqualOperator(compareTo, comparator));\n  };\n}\nexport var SequenceEqualOperator = /*#__PURE__*/function () {\n  function SequenceEqualOperator(compareTo, comparator) {\n    _classCallCheck(this, SequenceEqualOperator);\n    this.compareTo = compareTo;\n    this.comparator = comparator;\n  }\n  _createClass(SequenceEqualOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n    }\n  }]);\n  return SequenceEqualOperator;\n}();\nexport var SequenceEqualSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(SequenceEqualSubscriber, _Subscriber);\n  var _super = _createSuper(SequenceEqualSubscriber);\n  function SequenceEqualSubscriber(destination, compareTo, comparator) {\n    var _this;\n    _classCallCheck(this, SequenceEqualSubscriber);\n    _this = _super.call(this, destination);\n    _this.compareTo = compareTo;\n    _this.comparator = comparator;\n    _this._a = [];\n    _this._b = [];\n    _this._oneComplete = false;\n    _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _assertThisInitialized(_this))));\n    return _this;\n  }\n  _createClass(SequenceEqualSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this._oneComplete && this._b.length === 0) {\n        this.emit(false);\n      } else {\n        this._a.push(value);\n        this.checkValues();\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      if (this._oneComplete) {\n        this.emit(this._a.length === 0 && this._b.length === 0);\n      } else {\n        this._oneComplete = true;\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"checkValues\",\n    value: function checkValues() {\n      var _a = this._a,\n        _b = this._b,\n        comparator = this.comparator;\n      while (_a.length > 0 && _b.length > 0) {\n        var a = _a.shift();\n        var b = _b.shift();\n        var areEqual = false;\n        try {\n          areEqual = comparator ? comparator(a, b) : a === b;\n        } catch (e) {\n          this.destination.error(e);\n        }\n        if (!areEqual) {\n          this.emit(false);\n        }\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(value) {\n      var destination = this.destination;\n      destination.next(value);\n      destination.complete();\n    }\n  }, {\n    key: \"nextB\",\n    value: function nextB(value) {\n      if (this._oneComplete && this._a.length === 0) {\n        this.emit(false);\n      } else {\n        this._b.push(value);\n        this.checkValues();\n      }\n    }\n  }, {\n    key: \"completeB\",\n    value: function completeB() {\n      if (this._oneComplete) {\n        this.emit(this._a.length === 0 && this._b.length === 0);\n      } else {\n        this._oneComplete = true;\n      }\n    }\n  }]);\n  return SequenceEqualSubscriber;\n}(Subscriber);\nvar SequenceEqualCompareToSubscriber = /*#__PURE__*/function (_Subscriber2) {\n  _inherits(SequenceEqualCompareToSubscriber, _Subscriber2);\n  var _super2 = _createSuper(SequenceEqualCompareToSubscriber);\n  function SequenceEqualCompareToSubscriber(destination, parent) {\n    var _this2;\n    _classCallCheck(this, SequenceEqualCompareToSubscriber);\n    _this2 = _super2.call(this, destination);\n    _this2.parent = parent;\n    return _this2;\n  }\n  _createClass(SequenceEqualCompareToSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.parent.nextB(value);\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.parent.error(err);\n      this.unsubscribe();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.parent.completeB();\n      this.unsubscribe();\n    }\n  }]);\n  return SequenceEqualCompareToSubscriber;\n}(Subscriber);","map":{"version":3,"sources":["../../../src/internal/operators/sequenceEqual.ts"],"names":[],"mappings":";;;;;AAEA,SAAS,UAAU,QAAQ,eAAe;AA8D1C,OAAM,SAAU,aAAa,CAAI,SAAwB,EACxB,UAAoC,EAAA;EACnE,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;EAAA;AACjG;AAEA,WAAa,qBAAqB;EAChC,+BAAoB,SAAwB,EACxB,UAAmC,EAAA;IAAA;IADnC,IAAA,CAAA,SAAS,GAAT,SAAS;IACT,IAAA,CAAA,UAAU,GAAV,UAAU;EAC9B;EAAC;IAAA;IAAA,OAED,cAAK,UAA+B,EAAE,MAAW,EAAA;MAC/C,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,uBAAuB,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACnG;EAAC;EAAA;AAAA;AAQH,WAAa,uBAA8B;EAAA;EAAA;EAKzC,iCAAY,WAAwB,EAChB,SAAwB,EACxB,UAAmC,EAAA;IAAA;IAAA;IACrD,0BAAM,WAAW;IAFC,MAAA,SAAS,GAAT,SAAS;IACT,MAAA,UAAU,GAAV,UAAU;IANtB,MAAA,EAAE,GAAQ,EAAE;IACZ,MAAA,EAAE,GAAQ,EAAE;IACZ,MAAA,YAAY,GAAG,KAAK;IAMzB,MAAK,WAA4B,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,gCAAgC,CAAC,WAAW,gCAAO,CAAC,CAAC;IAAC;EACvH;EAAC;IAAA;IAAA,OAES,eAAM,KAAQ,EAAA;MACtB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;OACjB,MAAM;QACL,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,EAAE;MACnB;IACH;EAAC;IAAA;IAAA,OAEM,qBAAS;MACd,IAAI,IAAI,CAAC,YAAY,EAAE;QACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;OACxD,MAAM;QACL,IAAI,CAAC,YAAY,GAAG,IAAI;MACzB;MACD,IAAI,CAAC,WAAW,EAAE;IACpB;EAAC;IAAA;IAAA,OAED,uBAAW;MACT,IAAQ,EAAE,GAAqB,IAAI,CAA3B,EAAE;QAAE,EAAE,GAAiB,IAAI,CAAvB,EAAE;QAAE,UAAU,GAAK,IAAI,CAAnB,UAAU;MAC1B,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;QACrC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE;QAClB,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE;QAClB,IAAI,QAAQ,GAAG,KAAK;QACpB,IAAI;UACF,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC;SACnD,CAAC,OAAO,CAAC,EAAE;UACV,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1B;QACD,IAAI,CAAC,QAAQ,EAAE;UACb,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QACjB;MACF;IACH;EAAC;IAAA;IAAA,OAED,cAAK,KAAc,EAAA;MACjB,IAAQ,WAAW,GAAK,IAAI,CAApB,WAAW;MACnB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;MACvB,WAAW,CAAC,QAAQ,EAAE;IACxB;EAAC;IAAA;IAAA,OAED,eAAM,KAAQ,EAAA;MACZ,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;OACjB,MAAM;QACL,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,EAAE;MACnB;IACH;EAAC;IAAA;IAAA,OAED,qBAAS;MACP,IAAI,IAAI,CAAC,YAAY,EAAE;QACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;OACxD,MAAM;QACL,IAAI,CAAC,YAAY,GAAG,IAAI;MACzB;IACH;EAAC;EAAA;AAAA,EApEgD,UAAa;AAqE/D,IAEK,gCAAuC;EAAA;EAAA;EAC3C,0CAAY,WAAwB,EAAU,MAAqC,EAAA;IAAA;IAAA;IACjF,4BAAM,WAAW;IAD2B,OAAA,MAAM,GAAN,MAAM;IAA+B;EAEnF;EAAC;IAAA;IAAA,OAES,eAAM,KAAQ,EAAA;MACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;IAC1B;EAAC;IAAA;IAAA,OAES,gBAAO,GAAQ,EAAA;MACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;MACtB,IAAI,CAAC,WAAW,EAAE;IACpB;EAAC;IAAA;IAAA,OAES,qBAAS;MACjB,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;MACvB,IAAI,CAAC,WAAW,EAAE;IACpB;EAAC;EAAA;AAAA,EAjBkD,UAAa","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function sequenceEqual(compareTo, comparator) {\n    return (source) => source.lift(new SequenceEqualOperator(compareTo, comparator));\n}\nexport class SequenceEqualOperator {\n    constructor(compareTo, comparator) {\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));\n    }\n}\nexport class SequenceEqualSubscriber extends Subscriber {\n    constructor(destination, compareTo, comparator) {\n        super(destination);\n        this.compareTo = compareTo;\n        this.comparator = comparator;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    _next(value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    }\n    _complete() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n        this.unsubscribe();\n    }\n    checkValues() {\n        const { _a, _b, comparator } = this;\n        while (_a.length > 0 && _b.length > 0) {\n            let a = _a.shift();\n            let b = _b.shift();\n            let areEqual = false;\n            try {\n                areEqual = comparator ? comparator(a, b) : a === b;\n            }\n            catch (e) {\n                this.destination.error(e);\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    }\n    emit(value) {\n        const { destination } = this;\n        destination.next(value);\n        destination.complete();\n    }\n    nextB(value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    }\n    completeB() {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    }\n}\nclass SequenceEqualCompareToSubscriber extends Subscriber {\n    constructor(destination, parent) {\n        super(destination);\n        this.parent = parent;\n    }\n    _next(value) {\n        this.parent.nextB(value);\n    }\n    _error(err) {\n        this.parent.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.completeB();\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=sequenceEqual.js.map"]},"metadata":{},"sourceType":"module"}