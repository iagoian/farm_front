{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        var value;\n        var done;\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"sources":["../../../src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,eAAe;AAE1C,SAAS,YAAY,QAAQ,iBAAiB;AAC9C,SAAS,QAAQ,IAAI,eAAe,QAAQ,oBAAoB;AAEhE,OAAM,SAAU,gBAAgB,CAAI,KAAkB,EAAE,SAAwB,EAAA;EAC9E,IAAI,CAAC,KAAK,EAAE;IACV,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC;EAC3C;EACD,OAAO,IAAI,UAAU,CAAI,UAAA,UAAU,EAAG;IACpC,IAAM,GAAG,GAAG,IAAI,YAAY,EAAE;IAC9B,IAAI,QAAqB;IACzB,GAAG,CAAC,GAAG,CAAC,YAAK;MAEX,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,MAAM,KAAK,UAAU,EAAE;QACrD,QAAQ,CAAC,MAAM,EAAE;MAClB;IACH,CAAC,CAAC;IACF,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAK;MAC9B,QAAQ,GAAG,KAAK,CAAC,eAAe,CAAC,EAAE;MACnC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAA;QACzB,IAAI,UAAU,CAAC,MAAM,EAAE;UACrB;QACD;QACD,IAAI,KAAQ;QACZ,IAAI,IAAa;QACjB,IAAI;UACF,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,EAAE;UAC9B,KAAK,GAAG,MAAM,CAAC,KAAK;UACpB,IAAI,GAAG,MAAM,CAAC,IAAI;SACnB,CAAC,OAAO,GAAG,EAAE;UACZ,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;UACrB;QACD;QACD,IAAI,IAAI,EAAE;UACR,UAAU,CAAC,QAAQ,EAAE;SACtB,MAAM;UACL,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;UACtB,IAAI,CAAC,QAAQ,EAAE;QAChB;MACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,GAAG;EACZ,CAAC,CAAC;AACJ","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        let iterator;\n        sub.add(() => {\n            if (iterator && typeof iterator.return === 'function') {\n                iterator.return();\n            }\n        });\n        sub.add(scheduler.schedule(() => {\n            iterator = input[Symbol_iterator]();\n            sub.add(scheduler.schedule(function () {\n                if (subscriber.closed) {\n                    return;\n                }\n                let value;\n                let done;\n                try {\n                    const result = iterator.next();\n                    value = result.value;\n                    done = result.done;\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map"]},"metadata":{},"sourceType":"module"}