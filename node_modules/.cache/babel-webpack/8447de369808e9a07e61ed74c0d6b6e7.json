{"ast":null,"code":"/**\n * @module ol/style/Stroke\n */\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nvar Stroke = function Stroke(opt_options) {\n  var options = opt_options || {};\n\n  /**\n   * @private\n   * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n   */\n  this.color_ = options.color !== undefined ? options.color : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.lineCap_ = options.lineCap;\n\n  /**\n   * @private\n   * @type {Array<number>}\n   */\n  this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.lineDashOffset_ = options.lineDashOffset;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.lineJoin_ = options.lineJoin;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.miterLimit_ = options.miterLimit;\n\n  /**\n   * @private\n   * @type {number|undefined}\n   */\n  this.width_ = options.width;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.checksum_ = undefined;\n};\n\n/**\n * Clones the style.\n * @return {Stroke} The cloned style.\n * @api\n */\nStroke.prototype.clone = function clone() {\n  var color = this.getColor();\n  return new Stroke({\n    color: Array.isArray(color) ? color.slice() : color || undefined,\n    lineCap: this.getLineCap(),\n    lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n    lineDashOffset: this.getLineDashOffset(),\n    lineJoin: this.getLineJoin(),\n    miterLimit: this.getMiterLimit(),\n    width: this.getWidth()\n  });\n};\n\n/**\n * Get the stroke color.\n * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n * @api\n */\nStroke.prototype.getColor = function getColor() {\n  return this.color_;\n};\n\n/**\n * Get the line cap type for the stroke.\n * @return {string|undefined} Line cap.\n * @api\n */\nStroke.prototype.getLineCap = function getLineCap() {\n  return this.lineCap_;\n};\n\n/**\n * Get the line dash style for the stroke.\n * @return {Array<number>} Line dash.\n * @api\n */\nStroke.prototype.getLineDash = function getLineDash() {\n  return this.lineDash_;\n};\n\n/**\n * Get the line dash offset for the stroke.\n * @return {number|undefined} Line dash offset.\n * @api\n */\nStroke.prototype.getLineDashOffset = function getLineDashOffset() {\n  return this.lineDashOffset_;\n};\n\n/**\n * Get the line join type for the stroke.\n * @return {string|undefined} Line join.\n * @api\n */\nStroke.prototype.getLineJoin = function getLineJoin() {\n  return this.lineJoin_;\n};\n\n/**\n * Get the miter limit for the stroke.\n * @return {number|undefined} Miter limit.\n * @api\n */\nStroke.prototype.getMiterLimit = function getMiterLimit() {\n  return this.miterLimit_;\n};\n\n/**\n * Get the stroke width.\n * @return {number|undefined} Width.\n * @api\n */\nStroke.prototype.getWidth = function getWidth() {\n  return this.width_;\n};\n\n/**\n * Set the color.\n *\n * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n * @api\n */\nStroke.prototype.setColor = function setColor(color) {\n  this.color_ = color;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line cap.\n *\n * @param {string|undefined} lineCap Line cap.\n * @api\n */\nStroke.prototype.setLineCap = function setLineCap(lineCap) {\n  this.lineCap_ = lineCap;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line dash.\n *\n * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n * property will have no visual effect in these browsers.\n *\n * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n *\n * @param {Array<number>} lineDash Line dash.\n * @api\n */\nStroke.prototype.setLineDash = function setLineDash(lineDash) {\n  this.lineDash_ = lineDash;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line dash offset.\n *\n * @param {number|undefined} lineDashOffset Line dash offset.\n * @api\n */\nStroke.prototype.setLineDashOffset = function setLineDashOffset(lineDashOffset) {\n  this.lineDashOffset_ = lineDashOffset;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the line join.\n *\n * @param {string|undefined} lineJoin Line join.\n * @api\n */\nStroke.prototype.setLineJoin = function setLineJoin(lineJoin) {\n  this.lineJoin_ = lineJoin;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the miter limit.\n *\n * @param {number|undefined} miterLimit Miter limit.\n * @api\n */\nStroke.prototype.setMiterLimit = function setMiterLimit(miterLimit) {\n  this.miterLimit_ = miterLimit;\n  this.checksum_ = undefined;\n};\n\n/**\n * Set the width.\n *\n * @param {number|undefined} width Width.\n * @api\n */\nStroke.prototype.setWidth = function setWidth(width) {\n  this.width_ = width;\n  this.checksum_ = undefined;\n};\n\n/**\n * @return {string} The checksum.\n */\nStroke.prototype.getChecksum = function getChecksum() {\n  if (this.checksum_ === undefined) {\n    this.checksum_ = 's';\n    if (this.color_) {\n      if (typeof this.color_ === 'string') {\n        this.checksum_ += this.color_;\n      } else {\n        this.checksum_ += getUid(this.color_);\n      }\n    } else {\n      this.checksum_ += '-';\n    }\n    this.checksum_ += ',' + (this.lineCap_ !== undefined ? this.lineCap_.toString() : '-') + ',' + (this.lineDash_ ? this.lineDash_.toString() : '-') + ',' + (this.lineDashOffset_ !== undefined ? this.lineDashOffset_ : '-') + ',' + (this.lineJoin_ !== undefined ? this.lineJoin_ : '-') + ',' + (this.miterLimit_ !== undefined ? this.miterLimit_.toString() : '-') + ',' + (this.width_ !== undefined ? this.width_.toString() : '-');\n  }\n  return this.checksum_;\n};\nexport default Stroke;","map":{"version":3,"sources":["../../../src/ol/style/Stroke.js"],"names":["const"],"mappings":"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","sourcesContent":["/**\n * @module ol/style/Stroke\n */\nimport {getUid} from '../util.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {string} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {string} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth()\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {string|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {string|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {string|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n   * property will have no visual effect in these browsers.\n   *\n   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n   *\n   * @param {Array<number>} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {string|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n    this.checksum_ = undefined;\n  }\n\n  /**\n   * @return {string} The checksum.\n   */\n  getChecksum() {\n    if (this.checksum_ === undefined) {\n      this.checksum_ = 's';\n      if (this.color_) {\n        if (typeof this.color_ === 'string') {\n          this.checksum_ += this.color_;\n        } else {\n          this.checksum_ += getUid(this.color_);\n        }\n      } else {\n        this.checksum_ += '-';\n      }\n      this.checksum_ += ',' +\n          (this.lineCap_ !== undefined ?\n            this.lineCap_.toString() : '-') + ',' +\n          (this.lineDash_ ?\n            this.lineDash_.toString() : '-') + ',' +\n          (this.lineDashOffset_ !== undefined ?\n            this.lineDashOffset_ : '-') + ',' +\n          (this.lineJoin_ !== undefined ?\n            this.lineJoin_ : '-') + ',' +\n          (this.miterLimit_ !== undefined ?\n            this.miterLimit_.toString() : '-') + ',' +\n          (this.width_ !== undefined ?\n            this.width_.toString() : '-');\n    }\n\n    return this.checksum_;\n  }\n}\n\nexport default Stroke;\n"]},"metadata":{},"sourceType":"module"}