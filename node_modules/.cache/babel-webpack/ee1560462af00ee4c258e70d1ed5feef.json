{"ast":null,"code":"import _toConsumableArray from \"C:/dev-faculdade/Portifolio/Testes-Job/farm_project/farm_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nvar none = {};\nexport function combineLatest() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n  var project = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  }\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n  return function (source) {\n    return source.lift.call(from([source].concat(_toConsumableArray(observables))), new CombineLatestOperator(project));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/combineLatest.ts"],"names":[],"mappings":";AACA,SAAS,OAAO,QAAQ,iBAAiB;AACzC,SAAS,qBAAqB,QAAQ,6BAA6B;AACnE,SAAS,IAAI,QAAQ,oBAAoB;AAIzC,IAAM,IAAI,GAAG,CAAA,CAAE;AAoCf,OAAM,SAAU,aAAa,GAEsD;EAAA,kCAF5C,WAE4C;IAF5C,WAE4C;EAAA;EACjF,IAAI,OAAO,GAAiC,IAAI;EAChD,IAAI,OAAO,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;IAC7D,OAAO,GAAiC,WAAW,CAAC,GAAG,EAAE;EAC1D;EAID,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;IACvD,WAAW,GAAS,WAAW,CAAC,CAAC,CAAE,CAAC,KAAK,EAAE;EAC5C;EAED,OAAO,UAAC,MAAqB;IAAA,OAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,4BAAK,WAAW,GAAE,EAAE,IAAI,qBAAqB,CAAC,OAAO,CAAC,CAAC;EAAA;AACxH","sourcesContent":["import { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nconst none = {};\nexport function combineLatest(...observables) {\n    let project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return (source) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map"]},"metadata":{},"sourceType":"module"}