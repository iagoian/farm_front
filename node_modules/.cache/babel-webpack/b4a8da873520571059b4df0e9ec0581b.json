{"ast":null,"code":"/**\n * @module ol/format/GeoJSON\n */\n\nimport { assert } from '../asserts.js';\nimport Feature from '../Feature.js';\nimport { transformWithOptions } from './Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport GeometryType from '../geom/GeometryType.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n  * @api\n */\nvar GeoJSON = /*@__PURE__*/function (JSONFeature) {\n  function GeoJSON(opt_options) {\n    var options = opt_options ? opt_options : {};\n    JSONFeature.call(this);\n\n    /**\n     * @inheritDoc\n     */\n    this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n    if (options.featureProjection) {\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n  }\n  if (JSONFeature) GeoJSON.__proto__ = JSONFeature;\n  GeoJSON.prototype = Object.create(JSONFeature && JSONFeature.prototype);\n  GeoJSON.prototype.constructor = GeoJSON;\n\n  /**\n   * @inheritDoc\n   */\n  GeoJSON.prototype.readFeatureFromObject = function readFeatureFromObject(object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    var geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */object,\n        'properties': null\n      };\n    }\n    var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    var feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties']);\n    }\n    return feature;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeoJSON.prototype.readFeaturesFromObject = function readFeaturesFromObject(object, opt_options) {\n    var geoJSONObject = /** @type {GeoJSONObject} */object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    var features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */object;\n      features = [];\n      var geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n    return features;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeoJSON.prototype.readGeometryFromObject = function readGeometryFromObject(object, opt_options) {\n    return readGeometry( /** @type {GeoJSONGeometry} */object, opt_options);\n  };\n\n  /**\n   * @inheritDoc\n   */\n  GeoJSON.prototype.readProjectionFromObject = function readProjectionFromObject(object) {\n    var crs = object['crs'];\n    var projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return (/** @type {import(\"../proj/Projection.js\").default} */projection\n    );\n  };\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeature} Object.\n   * @override\n   * @api\n   */\n  GeoJSON.prototype.writeFeatureObject = function writeFeatureObject(feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n\n    /** @type {GeoJSONFeature} */\n    var object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    var id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n    }\n    var properties = feature.getProperties();\n    delete properties[feature.getGeometryName()];\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n    return object;\n  };\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @override\n   * @api\n   */\n  GeoJSON.prototype.writeFeaturesObject = function writeFeaturesObject(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  };\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @override\n   * @api\n   */\n  GeoJSON.prototype.writeGeometryObject = function writeGeometryObject(geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n  return GeoJSON;\n}(JSONFeature);\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  var geometry;\n  switch (object['type']) {\n    case GeometryType.POINT:\n      {\n        geometry = readPointGeometry( /** @type {GeoJSONPoint} */object);\n        break;\n      }\n    case GeometryType.LINE_STRING:\n      {\n        geometry = readLineStringGeometry( /** @type {GeoJSONLineString} */object);\n        break;\n      }\n    case GeometryType.POLYGON:\n      {\n        geometry = readPolygonGeometry( /** @type {GeoJSONPolygon} */object);\n        break;\n      }\n    case GeometryType.MULTI_POINT:\n      {\n        geometry = readMultiPointGeometry( /** @type {GeoJSONMultiPoint} */object);\n        break;\n      }\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geometry = readMultiLineStringGeometry( /** @type {GeoJSONMultiLineString} */object);\n        break;\n      }\n    case GeometryType.MULTI_POLYGON:\n      {\n        geometry = readMultiPolygonGeometry( /** @type {GeoJSONMultiPolygon} */object);\n        break;\n      }\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geometry = readGeometryCollectionGeometry( /** @type {GeoJSONGeometryCollection} */object);\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object.type);\n      }\n  }\n  return (/** @type {import(\"../geom/Geometry.js\").default} */transformWithOptions(geometry, false, opt_options)\n  );\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  var geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, opt_options);\n  });\n  return new GeometryCollection(geometries);\n}\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  geometry = /** @type {import(\"../geom/Geometry.js\").default} */transformWithOptions(geometry, true, opt_options);\n  var type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  var geoJSON;\n  switch (type) {\n    case GeometryType.POINT:\n      {\n        geoJSON = writePointGeometry( /** @type {Point} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.LINE_STRING:\n      {\n        geoJSON = writeLineStringGeometry( /** @type {LineString} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.POLYGON:\n      {\n        geoJSON = writePolygonGeometry( /** @type {Polygon} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.MULTI_POINT:\n      {\n        geoJSON = writeMultiPointGeometry( /** @type {MultiPoint} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geoJSON = writeMultiLineStringGeometry( /** @type {MultiLineString} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.MULTI_POLYGON:\n      {\n        geoJSON = writeMultiPolygonGeometry( /** @type {MultiPolygon} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geoJSON = writeGeometryCollectionGeometry( /** @type {GeometryCollection} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.CIRCLE:\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    var options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\nexport default GeoJSON;","map":{"version":3,"sources":["../../../src/ol/format/GeoJSON.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n\nimport {assert} from '../asserts.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from './Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport GeometryType from '../geom/GeometryType.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n  * @api\n */\nclass GeoJSON extends JSONFeature {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super();\n\n    /**\n     * @inheritDoc\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ?\n        options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeatureFromObject(object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties']);\n    }\n    return feature;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromObject(object, opt_options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n    return features;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readGeometryFromObject(object, opt_options) {\n    return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return (\n      /** @type {import(\"../proj/Projection.js\").default} */ (projection)\n    );\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeature} Object.\n   * @override\n   * @api\n   */\n  writeFeatureObject(feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n    }\n\n    const properties = feature.getProperties();\n    delete properties[feature.getGeometryName()];\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @override\n   * @api\n   */\n  writeFeaturesObject(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @override\n   * @api\n   */\n  writeGeometryObject(geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  }\n}\n\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case GeometryType.POINT: {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geometry = readLineStringGeometry(/** @type {GeoJSONLineString} */ (object));\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geometry = readMultiPointGeometry(/** @type {GeoJSONMultiPoint} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geometry = readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geometry = readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon} */ (object));\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geometry = readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */ (object));\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object.type);\n    }\n  }\n  return /** @type {import(\"../geom/Geometry.js\").default} */ (transformWithOptions(geometry, false, opt_options));\n}\n\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function(geometry) {\n      return readGeometry(geometry, opt_options);\n    });\n  return new GeometryCollection(geometries);\n}\n\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (transformWithOptions(geometry, true, opt_options));\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case GeometryType.POINT: {\n      geoJSON = writePointGeometry(/** @type {Point} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geoJSON = writeLineStringGeometry(/** @type {LineString} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geoJSON = writePolygonGeometry(/** @type {Polygon} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geoJSON = writeMultiPointGeometry(/** @type {MultiPoint} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geoJSON = writeMultiLineStringGeometry(/** @type {MultiLineString} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geoJSON = writeMultiPolygonGeometry(/** @type {MultiPolygon} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geoJSON = writeGeometryCollectionGeometry(/** @type {GeometryCollection} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.CIRCLE: {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: []\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function(geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n\nexport default GeoJSON;\n"]},"metadata":{},"sourceType":"module"}