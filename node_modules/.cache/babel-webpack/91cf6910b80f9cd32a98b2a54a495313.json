{"ast":null,"code":"/**\n * @module ol/render/canvas/Replay\n */\nimport { getUid } from '../../util.js';\nimport { equals, reverseSubArray } from '../../array.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { buffer, clone, coordinateRelationship, createEmpty, createOrUpdate, createOrUpdateEmpty, extend, extendCoordinate, intersects } from '../../extent.js';\nimport Relationship from '../../extent/Relationship.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport { inflateCoordinates, inflateCoordinatesArray, inflateMultiCoordinatesArray } from '../../geom/flat/inflate.js';\nimport { lineStringLength } from '../../geom/flat/length.js';\nimport { drawTextOnPath } from '../../geom/flat/textpath.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { CANVAS_LINE_DASH } from '../../has.js';\nimport { isEmpty } from '../../obj.js';\nimport VectorContext from '../VectorContext.js';\nimport { drawImage, resetTransform, defaultPadding, defaultFillStyle, defaultStrokeStyle, defaultMiterLimit, defaultLineWidth, defaultLineJoin, defaultLineDashOffset, defaultLineDash, defaultLineCap } from '../canvas.js';\nimport CanvasInstruction from './Instruction.js';\nimport { TEXT_ALIGN } from '../replay.js';\nimport { create as createTransform, compose as composeTransform, apply as applyTransform, setFromArray as transformSetFromArray } from '../../transform.js';\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nvar tmpExtent = createEmpty();\n\n/**\n * @type {!import(\"../../transform.js\").Transform}\n */\nvar tmpTransform = createTransform();\nvar CanvasReplay = /*@__PURE__*/function (VectorContext) {\n  function CanvasReplay(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n    VectorContext.call(this);\n\n    /**\n     * @type {?}\n     */\n    this.declutterTree = declutterTree;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.alignFill_;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */{};\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n  }\n  if (VectorContext) CanvasReplay.__proto__ = VectorContext;\n  CanvasReplay.prototype = Object.create(VectorContext && VectorContext.prototype);\n  CanvasReplay.prototype.constructor = CanvasReplay;\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  CanvasReplay.prototype.replayTextBackground_ = function replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignFill_ = /** @type {boolean} */fillInstruction[2];\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(context, /** @type {Array<*>} */strokeInstruction);\n      context.stroke();\n    }\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {import(\"../canvas.js\").DeclutterGroup} declutterGroup Declutter group.\n   * @param {number} height Height.\n   * @param {number} opacity Opacity.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {number} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {number} width Width.\n   * @param {Array<number>} padding Padding.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  CanvasReplay.prototype.replayImage_ = function replayImage_(context, x, y, image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, fillInstruction, strokeInstruction) {\n    var fillStroke = fillInstruction || strokeInstruction;\n    anchorX *= scale;\n    anchorY *= scale;\n    x -= anchorX;\n    y -= anchorY;\n    var w = width + originX > image.width ? image.width - originX : width;\n    var h = height + originY > image.height ? image.height - originY : height;\n    var boxW = padding[3] + w * scale + padding[1];\n    var boxH = padding[0] + h * scale + padding[2];\n    var boxX = x - padding[3];\n    var boxY = y - padding[0];\n\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    var p1;\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    var p2;\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    var p3;\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    var p4;\n    if (fillStroke || rotation !== 0) {\n      p1 = [boxX, boxY];\n      p2 = [boxX + boxW, boxY];\n      p3 = [boxX + boxW, boxY + boxH];\n      p4 = [boxX, boxY + boxH];\n    }\n    var transform = null;\n    if (rotation !== 0) {\n      var centerX = x + anchorX;\n      var centerY = y + anchorY;\n      transform = composeTransform(tmpTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n      createOrUpdateEmpty(tmpExtent);\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p1));\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p2));\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p3));\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p4));\n    } else {\n      createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);\n    }\n    var canvas = context.canvas;\n    var strokePadding = strokeInstruction ? strokeInstruction[2] * scale / 2 : 0;\n    var intersects = tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 && tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    if (declutterGroup) {\n      if (!intersects && declutterGroup[4] == 1) {\n        return;\n      }\n      extend(declutterGroup, tmpExtent);\n      var declutterArgs = intersects ? [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale] : null;\n      if (declutterArgs && fillStroke) {\n        declutterArgs.push(fillInstruction, strokeInstruction, p1, p2, p3, p4);\n      }\n      declutterGroup.push(declutterArgs);\n    } else if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(context, p1, p2, p3, p4, /** @type {Array<*>} */fillInstruction, /** @type {Array<*>} */strokeInstruction);\n      }\n      drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale);\n    }\n  };\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  CanvasReplay.prototype.applyPixelRatio = function applyPixelRatio(dashArray) {\n    var pixelRatio = this.pixelRatio;\n    return pixelRatio == 1 ? dashArray : dashArray.map(function (dash) {\n      return dash * pixelRatio;\n    });\n  };\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  CanvasReplay.prototype.appendFlatCoordinates = function appendFlatCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {\n    var myEnd = this.coordinates.length;\n    var extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    var lastCoord = [flatCoordinates[offset], flatCoordinates[offset + 1]];\n    var nextCoord = [NaN, NaN];\n    var skipped = true;\n    var i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          this.coordinates[myEnd++] = lastCoord[0];\n          this.coordinates[myEnd++] = lastCoord[1];\n        }\n        this.coordinates[myEnd++] = nextCoord[0];\n        this.coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else if (nextRel === Relationship.INTERSECTING) {\n        this.coordinates[myEnd++] = nextCoord[0];\n        this.coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastCoord[0] = nextCoord[0];\n      lastCoord[1] = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if (closed && skipped || i === offset + stride) {\n      this.coordinates[myEnd++] = lastCoord[0];\n      this.coordinates[myEnd++] = lastCoord[1];\n    }\n    return myEnd;\n  };\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} replayEnds Replay ends.\n   * @return {number} Offset.\n   */\n  CanvasReplay.prototype.drawCustomCoordinates_ = function drawCustomCoordinates_(flatCoordinates, offset, ends, stride, replayEnds) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var replayEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);\n      replayEnds.push(replayEnd);\n      offset = end;\n    }\n    return offset;\n  };\n\n  /**\n   * @inheritDoc.\n   */\n  CanvasReplay.prototype.drawCustom = function drawCustom(geometry, feature, renderer) {\n    this.beginGeometry(geometry, feature);\n    var type = geometry.getType();\n    var stride = geometry.getStride();\n    var replayBegin = this.coordinates.length;\n    var flatCoordinates, replayEnd, replayEnds, replayEndss;\n    var offset;\n    if (type == GeometryType.MULTI_POLYGON) {\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry;\n      flatCoordinates = geometry.getOrientedFlatCoordinates();\n      replayEndss = [];\n      var endss = geometry.getEndss();\n      offset = 0;\n      for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var myEnds = [];\n        offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);\n        replayEndss.push(myEnds);\n      }\n      this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEndss, geometry, renderer, inflateMultiCoordinatesArray]);\n    } else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {\n      replayEnds = [];\n      flatCoordinates = type == GeometryType.POLYGON ? /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();\n      offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */geometry.getEnds(), stride, replayEnds);\n      this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEnds, geometry, renderer, inflateCoordinatesArray]);\n    } else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {\n      flatCoordinates = geometry.getFlatCoordinates();\n      replayEnd = this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n      this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEnd, geometry, renderer, inflateCoordinates]);\n    } else if (type == GeometryType.POINT) {\n      flatCoordinates = geometry.getFlatCoordinates();\n      this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n      replayEnd = this.coordinates.length;\n      this.instructions.push([CanvasInstruction.CUSTOM, replayBegin, replayEnd, geometry, renderer]);\n    }\n    this.endGeometry(geometry, feature);\n  };\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} feature Feature.\n   */\n  CanvasReplay.prototype.beginGeometry = function beginGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  };\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  CanvasReplay.prototype.finish = function finish() {};\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  CanvasReplay.prototype.fill_ = function fill_(context) {\n    if (this.alignFill_) {\n      var origin = applyTransform(this.renderedTransform_, [0, 0]);\n      var repeatSize = 512 * this.pixelRatio;\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (this.alignFill_) {\n      context.setTransform.apply(context, resetTransform);\n    }\n  };\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  CanvasReplay.prototype.setStrokeStyle_ = function setStrokeStyle_(context, instruction) {\n    context.strokeStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */instruction[1];\n    context.lineWidth = /** @type {number} */instruction[2];\n    context.lineCap = /** @type {CanvasLineCap} */instruction[3];\n    context.lineJoin = /** @type {CanvasLineJoin} */instruction[4];\n    context.miterLimit = /** @type {number} */instruction[5];\n    if (CANVAS_LINE_DASH) {\n      context.lineDashOffset = /** @type {number} */instruction[7];\n      context.setLineDash( /** @type {Array<number>} */instruction[6]);\n    }\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").DeclutterGroup} declutterGroup Declutter group.\n   * @param {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} feature Feature.\n   */\n  CanvasReplay.prototype.renderDeclutter_ = function renderDeclutter_(declutterGroup, feature) {\n    if (declutterGroup && declutterGroup.length > 5) {\n      var groupCount = declutterGroup[4];\n      if (groupCount == 1 || groupCount == declutterGroup.length - 5) {\n        /** @type {import(\"../../structs/RBush.js\").Entry} */\n        var box = {\n          minX: /** @type {number} */declutterGroup[0],\n          minY: /** @type {number} */declutterGroup[1],\n          maxX: /** @type {number} */declutterGroup[2],\n          maxY: /** @type {number} */declutterGroup[3],\n          value: feature\n        };\n        if (!this.declutterTree.collides(box)) {\n          this.declutterTree.insert(box);\n          for (var j = 5, jj = declutterGroup.length; j < jj; ++j) {\n            var declutterData = /** @type {Array} */declutterGroup[j];\n            if (declutterData) {\n              if (declutterData.length > 11) {\n                this.replayTextBackground_(declutterData[0], declutterData[13], declutterData[14], declutterData[15], declutterData[16], declutterData[11], declutterData[12]);\n              }\n              drawImage.apply(undefined, declutterData);\n            }\n          }\n        }\n        declutterGroup.length = 5;\n        createOrUpdateEmpty(declutterGroup);\n      }\n    }\n  };\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Object<string, boolean>} skippedFeaturesHash Ids of features\n   *     to skip.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {function((import(\"../../Feature.js\").default|import(\"../Feature.js\").default)): T|undefined} featureCallback Feature callback.\n   * @param {import(\"../../extent.js\").Extent=} opt_hitExtent Only check features that intersect this\n   *     extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  CanvasReplay.prototype.replay_ = function replay_(context, transform, skippedFeaturesHash, instructions, snapToPixel, featureCallback, opt_hitExtent) {\n    /** @type {Array<number>} */\n    var pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    var skipFeatures = !isEmpty(skippedFeaturesHash);\n    var i = 0; // instruction index\n    var ii = instructions.length; // end of instructions\n    var d = 0; // data index\n    var dd; // end of per-instruction data\n    var anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;\n    var pendingFill = 0;\n    var pendingStroke = 0;\n    var lastFillInstruction = null;\n    var lastStrokeInstruction = null;\n    var coordinateCache = this.coordinateCache_;\n    var viewRotation = this.viewRotation_;\n    var state = /** @type {import(\"../../render.js\").State} */{\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation\n    };\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;\n    var /** @type {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} */feature;\n    var x, y;\n    while (i < ii) {\n      var instruction = instructions[i];\n      var type = /** @type {CanvasInstruction} */instruction[0];\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} */instruction[1];\n          if (skipFeatures && skippedFeaturesHash[getUid(feature)] || !feature.getGeometry()) {\n            i = /** @type {number} */instruction[2];\n          } else if (opt_hitExtent !== undefined && !intersects(opt_hitExtent, feature.getGeometry().getExtent())) {\n            i = /** @type {number} */instruction[2] + 1;\n          } else {\n            ++i;\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */instruction[1];\n          var x1 = pixelCoordinates[d];\n          var y1 = pixelCoordinates[d + 1];\n          var x2 = pixelCoordinates[d + 2];\n          var y2 = pixelCoordinates[d + 3];\n          var dx = x2 - x1;\n          var dy = y2 - y1;\n          var r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */instruction[1];\n          dd = instruction[2];\n          var geometry = /** @type {import(\"../../geom/SimpleGeometry.js\").default} */instruction[3];\n          var renderer = instruction[4];\n          var fn = instruction.length == 6 ? instruction[5] : undefined;\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          var coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */instruction[1];\n          dd = /** @type {number} */instruction[2];\n          image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */\n          instruction[3];\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */instruction[4];\n          anchorY = /** @type {number} */instruction[5];\n          declutterGroup = featureCallback ? null : /** @type {import(\"../canvas.js\").DeclutterGroup} */instruction[6];\n          var height = /** @type {number} */instruction[7];\n          var opacity = /** @type {number} */instruction[8];\n          var originX = /** @type {number} */instruction[9];\n          var originY = /** @type {number} */instruction[10];\n          var rotateWithView = /** @type {boolean} */instruction[11];\n          var rotation = /** @type {number} */instruction[12];\n          var scale = /** @type {number} */instruction[13];\n          var width = /** @type {number} */instruction[14];\n          var padding = void 0,\n            backgroundFill = void 0,\n            backgroundStroke = void 0;\n          if (instruction.length > 16) {\n            padding = /** @type {Array<number>} */instruction[15];\n            backgroundFill = /** @type {boolean} */instruction[16];\n            backgroundStroke = /** @type {boolean} */instruction[17];\n          } else {\n            padding = defaultPadding;\n            backgroundFill = backgroundStroke = false;\n          }\n          if (rotateWithView) {\n            rotation += viewRotation;\n          }\n          for (; d < dd; d += 2) {\n            this.replayImage_(context, pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, backgroundFill ? /** @type {Array<*>} */lastFillInstruction : null, backgroundStroke ? /** @type {Array<*>} */lastStrokeInstruction : null);\n          }\n          this.renderDeclutter_(declutterGroup, feature);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          var begin = /** @type {number} */instruction[1];\n          var end = /** @type {number} */instruction[2];\n          var baseline = /** @type {number} */instruction[3];\n          declutterGroup = featureCallback ? null : /** @type {import(\"../canvas.js\").DeclutterGroup} */instruction[4];\n          var overflow = /** @type {number} */instruction[5];\n          var fillKey = /** @type {string} */instruction[6];\n          var maxAngle = /** @type {number} */instruction[7];\n          var measure = /** @type {function(string):number} */instruction[8];\n          var offsetY = /** @type {number} */instruction[9];\n          var strokeKey = /** @type {string} */instruction[10];\n          var strokeWidth = /** @type {number} */instruction[11];\n          var text = /** @type {string} */instruction[12];\n          var textKey = /** @type {string} */instruction[13];\n          var textScale = /** @type {number} */instruction[14];\n          var pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          var textLength = measure(text);\n          if (overflow || textLength <= pathLength) {\n            /** @type {import(\"./TextReplay.js\").default} */\n            var textReplay = /** @type {?} */this;\n            var textAlign = textReplay.textStates[textKey].textAlign;\n            var startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];\n            var parts = drawTextOnPath(pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);\n            if (parts) {\n              var c = void 0,\n                cc = void 0,\n                chars = void 0,\n                label = void 0,\n                part = void 0;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */part[4];\n                  label = textReplay.getImage(chars, textKey, '', strokeKey);\n                  anchorX = /** @type {number} */part[2] + strokeWidth;\n                  anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;\n                  this.replayImage_(context, /** @type {number} */part[0], /** @type {number} */part[1], label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, /** @type {number} */part[3], textScale, false, label.width, defaultPadding, null, null);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */part[4];\n                  label = textReplay.getImage(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */part[2];\n                  anchorY = baseline * label.height - offsetY;\n                  this.replayImage_(context, /** @type {number} */part[0], /** @type {number} */part[1], label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, /** @type {number} */part[3], textScale, false, label.width, defaultPadding, null, null);\n                }\n              }\n            }\n          }\n          this.renderDeclutter_(declutterGroup, feature);\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} */instruction[1];\n            var result = featureCallback(feature);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */instruction[1];\n          dd = /** @type {number} */instruction[2];\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = x + 0.5 | 0;\n          roundY = y + 0.5 | 0;\n          if (roundX !== prevX || roundY !== prevY) {\n            context.moveTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = x + 0.5 | 0;\n            roundY = y + 0.5 | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignFill_ = instruction[2];\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n          context.fillStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */instruction[1];\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */instruction);\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default:\n          ++i; // consume the instruction anyway, to avoid an infinite loop\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {Object<string, boolean>} skippedFeaturesHash Ids of features\n   *     to skip.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   */\n  CanvasReplay.prototype.replay = function replay(context, transform, viewRotation, skippedFeaturesHash, snapToPixel) {\n    this.viewRotation_ = viewRotation;\n    this.replay_(context, transform, skippedFeaturesHash, this.instructions, snapToPixel, undefined, undefined);\n  };\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {Object<string, boolean>} skippedFeaturesHash Ids of features\n   *     to skip.\n   * @param {function((import(\"../../Feature.js\").default|import(\"../Feature.js\").default)): T=} opt_featureCallback\n   *     Feature callback.\n   * @param {import(\"../../extent.js\").Extent=} opt_hitExtent Only check features that intersect this\n   *     extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  CanvasReplay.prototype.replayHitDetection = function replayHitDetection(context, transform, viewRotation, skippedFeaturesHash, opt_featureCallback, opt_hitExtent) {\n    this.viewRotation_ = viewRotation;\n    return this.replay_(context, transform, skippedFeaturesHash, this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);\n  };\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  CanvasReplay.prototype.reverseHitDetectionInstructions = function reverseHitDetectionInstructions() {\n    var hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    var i;\n    var n = hitDetectionInstructions.length;\n    var instruction;\n    var type;\n    var begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {CanvasInstruction} */instruction[0];\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  CanvasReplay.prototype.setFillStrokeStyle = function setFillStrokeStyle(fillStyle, strokeStyle) {\n    var state = this.state;\n    if (fillStyle) {\n      var fillStyleColor = fillStyle.getColor();\n      state.fillStyle = asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle);\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      var strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle);\n      var strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      var strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : defaultLineDash;\n      var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset;\n      var strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin;\n      var strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      var strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit;\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @return {Array<*>} Fill instruction.\n   */\n  CanvasReplay.prototype.createFill = function createFill(state, geometry) {\n    var fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    var fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align it!\n      fillInstruction.push(true);\n    }\n    return fillInstruction;\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  CanvasReplay.prototype.applyStroke = function applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  CanvasReplay.prototype.createStroke = function createStroke(state) {\n    return [CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap, state.lineJoin, state.miterLimit, this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio];\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasReplay, import(\"../canvas.js\").FillStrokeState, (import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default)):Array<*>} createFill Create fill.\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   */\n  CanvasReplay.prototype.updateFillStyle = function updateFillStyle(state, createFill, geometry) {\n    var fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state, geometry));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasReplay, import(\"../canvas.js\").FillStrokeState)} applyStroke Apply stroke.\n   */\n  CanvasReplay.prototype.updateStrokeStyle = function updateStrokeStyle(state, applyStroke) {\n    var strokeStyle = state.strokeStyle;\n    var lineCap = state.lineCap;\n    var lineDash = state.lineDash;\n    var lineDashOffset = state.lineDashOffset;\n    var lineJoin = state.lineJoin;\n    var lineWidth = state.lineWidth;\n    var miterLimit = state.miterLimit;\n    if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !equals(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  };\n\n  /**\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} feature Feature.\n   */\n  CanvasReplay.prototype.endGeometry = function endGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    var endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  };\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  CanvasReplay.prototype.getBufferedMaxExtent = function getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        var width = this.resolution * (this.maxLineWidth + 1) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  };\n  return CanvasReplay;\n}(VectorContext);\nexport default CanvasReplay;","map":{"version":3,"sources":["../../../../src/ol/render/canvas/Replay.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/canvas/Replay\n */\nimport {getUid} from '../../util.js';\nimport {equals, reverseSubArray} from '../../array.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {buffer, clone, coordinateRelationship, createEmpty, createOrUpdate,\n  createOrUpdateEmpty, extend, extendCoordinate, intersects} from '../../extent.js';\nimport Relationship from '../../extent/Relationship.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport {inflateCoordinates, inflateCoordinatesArray, inflateMultiCoordinatesArray} from '../../geom/flat/inflate.js';\nimport {lineStringLength} from '../../geom/flat/length.js';\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {CANVAS_LINE_DASH} from '../../has.js';\nimport {isEmpty} from '../../obj.js';\nimport VectorContext from '../VectorContext.js';\nimport {drawImage, resetTransform, defaultPadding, defaultFillStyle, defaultStrokeStyle,\n  defaultMiterLimit, defaultLineWidth, defaultLineJoin, defaultLineDashOffset,\n  defaultLineDash, defaultLineCap} from '../canvas.js';\nimport CanvasInstruction from './Instruction.js';\nimport {TEXT_ALIGN} from '../replay.js';\nimport {\n  create as createTransform,\n  compose as composeTransform,\n  apply as applyTransform,\n  setFromArray as transformSetFromArray\n} from '../../transform.js';\n\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nconst tmpExtent = createEmpty();\n\n\n/**\n * @type {!import(\"../../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n\nclass CanvasReplay extends VectorContext {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {?} declutterTree Declutter tree.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio, overlaps, declutterTree) {\n    super();\n\n    /**\n     * @type {?}\n     */\n    this.declutterTree = declutterTree;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.alignFill_;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(context, /** @type {Array<*>} */ (strokeInstruction));\n      context.stroke();\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {import(\"../canvas.js\").DeclutterGroup} declutterGroup Declutter group.\n   * @param {number} height Height.\n   * @param {number} opacity Opacity.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {number} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {number} width Width.\n   * @param {Array<number>} padding Padding.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayImage_(\n    context,\n    x,\n    y,\n    image,\n    anchorX,\n    anchorY,\n    declutterGroup,\n    height,\n    opacity,\n    originX,\n    originY,\n    rotation,\n    scale,\n    snapToPixel,\n    width,\n    padding,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    const fillStroke = fillInstruction || strokeInstruction;\n    anchorX *= scale;\n    anchorY *= scale;\n    x -= anchorX;\n    y -= anchorY;\n\n    const w = (width + originX > image.width) ? image.width - originX : width;\n    const h = (height + originY > image.height) ? image.height - originY : height;\n    const boxW = padding[3] + w * scale + padding[1];\n    const boxH = padding[0] + h * scale + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    let p1;\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    let p2;\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    let p3;\n    /** @type {import(\"../../coordinate.js\").Coordinate} */\n    let p4;\n    if (fillStroke || rotation !== 0) {\n      p1 = [boxX, boxY];\n      p2 = [boxX + boxW, boxY];\n      p3 = [boxX + boxW, boxY + boxH];\n      p4 = [boxX, boxY + boxH];\n    }\n\n    let transform = null;\n    if (rotation !== 0) {\n      const centerX = x + anchorX;\n      const centerY = y + anchorY;\n      transform = composeTransform(tmpTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n\n      createOrUpdateEmpty(tmpExtent);\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p1));\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p2));\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p3));\n      extendCoordinate(tmpExtent, applyTransform(tmpTransform, p4));\n    } else {\n      createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);\n    }\n    const canvas = context.canvas;\n    const strokePadding = strokeInstruction ? (strokeInstruction[2] * scale / 2) : 0;\n    const intersects =\n        tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 &&\n        tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;\n\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n\n    if (declutterGroup) {\n      if (!intersects && declutterGroup[4] == 1) {\n        return;\n      }\n      extend(declutterGroup, tmpExtent);\n      const declutterArgs = intersects ?\n        [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale] :\n        null;\n      if (declutterArgs && fillStroke) {\n        declutterArgs.push(fillInstruction, strokeInstruction, p1, p2, p3, p4);\n      }\n      declutterGroup.push(declutterArgs);\n    } else if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(context, p1, p2, p3, p4,\n          /** @type {Array<*>} */ (fillInstruction),\n          /** @type {Array<*>} */ (strokeInstruction));\n      }\n      drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale);\n    }\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {\n      return dash * pixelRatio;\n    });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {\n\n    let myEnd = this.coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    const lastCoord = [flatCoordinates[offset], flatCoordinates[offset + 1]];\n    const nextCoord = [NaN, NaN];\n    let skipped = true;\n\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          this.coordinates[myEnd++] = lastCoord[0];\n          this.coordinates[myEnd++] = lastCoord[1];\n        }\n        this.coordinates[myEnd++] = nextCoord[0];\n        this.coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else if (nextRel === Relationship.INTERSECTING) {\n        this.coordinates[myEnd++] = nextCoord[0];\n        this.coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastCoord[0] = nextCoord[0];\n      lastCoord[1] = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if ((closed && skipped) || i === offset + stride) {\n      this.coordinates[myEnd++] = lastCoord[0];\n      this.coordinates[myEnd++] = lastCoord[1];\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} replayEnds Replay ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, replayEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const replayEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);\n      replayEnds.push(replayEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @inheritDoc.\n   */\n  drawCustom(geometry, feature, renderer) {\n    this.beginGeometry(geometry, feature);\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const replayBegin = this.coordinates.length;\n    let flatCoordinates, replayEnd, replayEnds, replayEndss;\n    let offset;\n    if (type == GeometryType.MULTI_POLYGON) {\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry);\n      flatCoordinates = geometry.getOrientedFlatCoordinates();\n      replayEndss = [];\n      const endss = geometry.getEndss();\n      offset = 0;\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const myEnds = [];\n        offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);\n        replayEndss.push(myEnds);\n      }\n      this.instructions.push([CanvasInstruction.CUSTOM,\n        replayBegin, replayEndss, geometry, renderer, inflateMultiCoordinatesArray]);\n    } else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {\n      replayEnds = [];\n      flatCoordinates = (type == GeometryType.POLYGON) ?\n        /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry).getOrientedFlatCoordinates() :\n        geometry.getFlatCoordinates();\n      offset = this.drawCustomCoordinates_(flatCoordinates, 0,\n        /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (geometry).getEnds(),\n        stride, replayEnds);\n      this.instructions.push([CanvasInstruction.CUSTOM,\n        replayBegin, replayEnds, geometry, renderer, inflateCoordinatesArray]);\n    } else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {\n      flatCoordinates = geometry.getFlatCoordinates();\n      replayEnd = this.appendFlatCoordinates(\n        flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n      this.instructions.push([CanvasInstruction.CUSTOM,\n        replayBegin, replayEnd, geometry, renderer, inflateCoordinates]);\n    } else if (type == GeometryType.POINT) {\n      flatCoordinates = geometry.getFlatCoordinates();\n      this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n      replayEnd = this.coordinates.length;\n      this.instructions.push([CanvasInstruction.CUSTOM,\n        replayBegin, replayEnd, geometry, renderer]);\n    }\n    this.endGeometry(geometry, feature);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} feature Feature.\n   */\n  beginGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  finish() {}\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    if (this.alignFill_) {\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (this.alignFill_) {\n      context.setTransform.apply(context, resetTransform);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context.strokeStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\n    context.lineWidth = /** @type {number} */ (instruction[2]);\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\n    context.miterLimit = /** @type {number} */ (instruction[5]);\n    if (CANVAS_LINE_DASH) {\n      context.lineDashOffset = /** @type {number} */ (instruction[7]);\n      context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").DeclutterGroup} declutterGroup Declutter group.\n   * @param {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} feature Feature.\n   */\n  renderDeclutter_(declutterGroup, feature) {\n    if (declutterGroup && declutterGroup.length > 5) {\n      const groupCount = declutterGroup[4];\n      if (groupCount == 1 || groupCount == declutterGroup.length - 5) {\n        /** @type {import(\"../../structs/RBush.js\").Entry} */\n        const box = {\n          minX: /** @type {number} */ (declutterGroup[0]),\n          minY: /** @type {number} */ (declutterGroup[1]),\n          maxX: /** @type {number} */ (declutterGroup[2]),\n          maxY: /** @type {number} */ (declutterGroup[3]),\n          value: feature\n        };\n        if (!this.declutterTree.collides(box)) {\n          this.declutterTree.insert(box);\n          for (let j = 5, jj = declutterGroup.length; j < jj; ++j) {\n            const declutterData = /** @type {Array} */ (declutterGroup[j]);\n            if (declutterData) {\n              if (declutterData.length > 11) {\n                this.replayTextBackground_(declutterData[0],\n                  declutterData[13], declutterData[14], declutterData[15], declutterData[16],\n                  declutterData[11], declutterData[12]);\n              }\n              drawImage.apply(undefined, declutterData);\n            }\n          }\n        }\n        declutterGroup.length = 5;\n        createOrUpdateEmpty(declutterGroup);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Object<string, boolean>} skippedFeaturesHash Ids of features\n   *     to skip.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {function((import(\"../../Feature.js\").default|import(\"../Feature.js\").default)): T|undefined} featureCallback Feature callback.\n   * @param {import(\"../../extent.js\").Extent=} opt_hitExtent Only check features that intersect this\n   *     extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  replay_(\n    context,\n    transform,\n    skippedFeaturesHash,\n    instructions,\n    snapToPixel,\n    featureCallback,\n    opt_hitExtent\n  ) {\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(\n        this.coordinates, 0, this.coordinates.length, 2,\n        transform, this.pixelCoordinates_);\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    const skipFeatures = !isEmpty(skippedFeaturesHash);\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, image;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    let lastFillInstruction = null;\n    let lastStrokeInstruction = null;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n\n    const state = /** @type {import(\"../../render.js\").State} */ ({\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation\n    });\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} */ feature;\n    let x, y;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {CanvasInstruction} */ (instruction[0]);\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} */ (instruction[1]);\n          if ((skipFeatures && skippedFeaturesHash[getUid(feature)]) || !feature.getGeometry()) {\n            i = /** @type {number} */ (instruction[2]);\n          } else if (opt_hitExtent !== undefined && !intersects(\n            opt_hitExtent, feature.getGeometry().getExtent())) {\n            i = /** @type {number} */ (instruction[2]) + 1;\n          } else {\n            ++i;\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */ (instruction[1]);\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */ (instruction[1]);\n          dd = instruction[2];\n          const geometry = /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (instruction[3]);\n          const renderer = instruction[4];\n          const fn = instruction.length == 6 ? instruction[5] : undefined;\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */\n              (instruction[3]);\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */ (instruction[4]);\n          anchorY = /** @type {number} */ (instruction[5]);\n          declutterGroup = featureCallback ? null : /** @type {import(\"../canvas.js\").DeclutterGroup} */ (instruction[6]);\n          const height = /** @type {number} */ (instruction[7]);\n          const opacity = /** @type {number} */ (instruction[8]);\n          const originX = /** @type {number} */ (instruction[9]);\n          const originY = /** @type {number} */ (instruction[10]);\n          const rotateWithView = /** @type {boolean} */ (instruction[11]);\n          let rotation = /** @type {number} */ (instruction[12]);\n          const scale = /** @type {number} */ (instruction[13]);\n          const width = /** @type {number} */ (instruction[14]);\n\n          let padding, backgroundFill, backgroundStroke;\n          if (instruction.length > 16) {\n            padding = /** @type {Array<number>} */ (instruction[15]);\n            backgroundFill = /** @type {boolean} */ (instruction[16]);\n            backgroundStroke = /** @type {boolean} */ (instruction[17]);\n          } else {\n            padding = defaultPadding;\n            backgroundFill = backgroundStroke = false;\n          }\n\n          if (rotateWithView) {\n            rotation += viewRotation;\n          }\n          for (; d < dd; d += 2) {\n            this.replayImage_(context,\n              pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY,\n              declutterGroup, height, opacity, originX, originY, rotation, scale,\n              snapToPixel, width, padding,\n              backgroundFill ? /** @type {Array<*>} */ (lastFillInstruction) : null,\n              backgroundStroke ? /** @type {Array<*>} */ (lastStrokeInstruction) : null);\n          }\n          this.renderDeclutter_(declutterGroup, feature);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          const begin = /** @type {number} */ (instruction[1]);\n          const end = /** @type {number} */ (instruction[2]);\n          const baseline = /** @type {number} */ (instruction[3]);\n          declutterGroup = featureCallback ? null : /** @type {import(\"../canvas.js\").DeclutterGroup} */ (instruction[4]);\n          const overflow = /** @type {number} */ (instruction[5]);\n          const fillKey = /** @type {string} */ (instruction[6]);\n          const maxAngle = /** @type {number} */ (instruction[7]);\n          const measure = /** @type {function(string):number} */ (instruction[8]);\n          const offsetY = /** @type {number} */ (instruction[9]);\n          const strokeKey = /** @type {string} */ (instruction[10]);\n          const strokeWidth = /** @type {number} */ (instruction[11]);\n          const text = /** @type {string} */ (instruction[12]);\n          const textKey = /** @type {string} */ (instruction[13]);\n          const textScale = /** @type {number} */ (instruction[14]);\n\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          const textLength = measure(text);\n          if (overflow || textLength <= pathLength) {\n            /** @type {import(\"./TextReplay.js\").default} */\n            const textReplay = /** @type {?} */ (this);\n            const textAlign = textReplay.textStates[textKey].textAlign;\n            const startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];\n            const parts = drawTextOnPath(\n              pixelCoordinates, begin, end, 2, text, measure, startM, maxAngle);\n            if (parts) {\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = textReplay.getImage(chars, textKey, '', strokeKey);\n                  anchorX = /** @type {number} */ (part[2]) + strokeWidth;\n                  anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;\n                  this.replayImage_(context,\n                    /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,\n                    anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,\n                    /** @type {number} */ (part[3]), textScale, false, label.width,\n                    defaultPadding, null, null);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = textReplay.getImage(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */ (part[2]);\n                  anchorY = baseline * label.height - offsetY;\n                  this.replayImage_(context,\n                    /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label,\n                    anchorX, anchorY, declutterGroup, label.height, 1, 0, 0,\n                    /** @type {number} */ (part[3]), textScale, false, label.width,\n                    defaultPadding, null, null);\n                }\n              }\n            }\n          }\n          this.renderDeclutter_(declutterGroup, feature);\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} */ (instruction[1]);\n            const result = featureCallback(feature);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = (x + 0.5) | 0;\n          roundY = (y + 0.5) | 0;\n          if (roundX !== prevX || roundY !== prevY) {\n            context.moveTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = (x + 0.5) | 0;\n            roundY = (y + 0.5) | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignFill_ = instruction[2];\n\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          context.fillStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default:\n          ++i; // consume the instruction anyway, to avoid an infinite loop\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {Object<string, boolean>} skippedFeaturesHash Ids of features\n   *     to skip.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   */\n  replay(context, transform, viewRotation, skippedFeaturesHash, snapToPixel) {\n    this.viewRotation_ = viewRotation;\n    this.replay_(context, transform,\n      skippedFeaturesHash, this.instructions, snapToPixel, undefined, undefined);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {Object<string, boolean>} skippedFeaturesHash Ids of features\n   *     to skip.\n   * @param {function((import(\"../../Feature.js\").default|import(\"../Feature.js\").default)): T=} opt_featureCallback\n   *     Feature callback.\n   * @param {import(\"../../extent.js\").Extent=} opt_hitExtent Only check features that intersect this\n   *     extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  replayHitDetection(\n    context,\n    transform,\n    viewRotation,\n    skippedFeaturesHash,\n    opt_featureCallback,\n    opt_hitExtent\n  ) {\n    this.viewRotation_ = viewRotation;\n    return this.replay_(context, transform, skippedFeaturesHash,\n      this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {CanvasInstruction} */ (instruction[0]);\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillStyle = asColorLike(fillStyleColor ?\n        fillStyleColor : defaultFillStyle);\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(strokeStyleColor ?\n        strokeStyleColor : defaultStrokeStyle);\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap = strokeStyleLineCap !== undefined ?\n        strokeStyleLineCap : defaultLineCap;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash ?\n        strokeStyleLineDash.slice() : defaultLineDash;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset ?\n        strokeStyleLineDashOffset : defaultLineDashOffset;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin = strokeStyleLineJoin !== undefined ?\n        strokeStyleLineJoin : defaultLineJoin;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth = strokeStyleWidth !== undefined ?\n        strokeStyleWidth : defaultLineWidth;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit = strokeStyleMiterLimit !== undefined ?\n        strokeStyleMiterLimit : defaultMiterLimit;\n\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state, geometry) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align it!\n      fillInstruction.push(true);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap,\n      state.lineJoin, state.miterLimit,\n      this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio\n    ];\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasReplay, import(\"../canvas.js\").FillStrokeState, (import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default)):Array<*>} createFill Create fill.\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   */\n  updateFillStyle(state, createFill, geometry) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state, geometry));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasReplay, import(\"../canvas.js\").FillStrokeState)} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (state.currentStrokeStyle != strokeStyle ||\n        state.currentLineCap != lineCap ||\n        (lineDash != state.currentLineDash && !equals(state.currentLineDash, lineDash)) ||\n        state.currentLineDashOffset != lineDashOffset ||\n        state.currentLineJoin != lineJoin ||\n        state.currentLineWidth != lineWidth ||\n        state.currentMiterLimit != miterLimit) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").default|import(\"../Feature.js\").default} feature Feature.\n   */\n  endGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = this.resolution * (this.maxLineWidth + 1) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\n\n\nexport default CanvasReplay;\n"]},"metadata":{},"sourceType":"module"}