{"ast":null,"code":"/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\nimport { equals } from '../../array.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { intersects } from '../../extent.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport { transformGeom2D } from '../../geom/SimpleGeometry.js';\nimport { transform2D } from '../../geom/flat/transform.js';\nimport { CANVAS_LINE_DASH } from '../../has.js';\nimport VectorContext from '../VectorContext.js';\nimport { defaultTextAlign, defaultFillStyle, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextBaseline, defaultFont } from '../canvas.js';\nimport { create as createTransform, compose as composeTransform } from '../../transform.js';\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nvar CanvasImmediateRenderer = /*@__PURE__*/function (VectorContext) {\n  function CanvasImmediateRenderer(context, pixelRatio, extent, transform, viewRotation) {\n    VectorContext.call(this);\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageScale_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textScale_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpLocalTransform_ = createTransform();\n  }\n  if (VectorContext) CanvasImmediateRenderer.__proto__ = VectorContext;\n  CanvasImmediateRenderer.prototype = Object.create(VectorContext && VectorContext.prototype);\n  CanvasImmediateRenderer.prototype.constructor = CanvasImmediateRenderer;\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.drawImages_ = function drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n    var pixelCoordinates = transform2D(flatCoordinates, offset, end, 2, this.transform_, this.pixelCoordinates_);\n    var context = this.context_;\n    var localTransform = this.tmpLocalTransform_;\n    var alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    var rotation = this.imageRotation_;\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      var x = pixelCoordinates[i] - this.imageAnchorX_;\n      var y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n      if (rotation !== 0 || this.imageScale_ != 1) {\n        var centerX = x + this.imageAnchorX_;\n        var centerY = y + this.imageAnchorY_;\n        composeTransform(localTransform, centerX, centerY, this.imageScale_, this.imageScale_, rotation, -centerX, -centerY);\n        context.setTransform.apply(context, localTransform);\n      }\n      context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);\n    }\n    if (rotation !== 0 || this.imageScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  };\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.drawText_ = function drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n    var context = this.context_;\n    var rotation = this.textRotation_;\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      var x = pixelCoordinates[offset] + this.textOffsetX_;\n      var y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n      if (rotation !== 0 || this.textScale_ != 1) {\n        var localTransform = composeTransform(this.tmpLocalTransform_, x, y, this.textScale_, this.textScale_, rotation, -x, -y);\n        context.setTransform.apply(context, localTransform);\n      }\n      if (this.textStrokeState_) {\n        context.strokeText(this.text_, x, y);\n      }\n      if (this.textFillState_) {\n        context.fillText(this.text_, x, y);\n      }\n    }\n    if (rotation !== 0 || this.textScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n  };\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  CanvasImmediateRenderer.prototype.moveToLineTo_ = function moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    var context = this.context_;\n    var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    var length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (var i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  };\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  CanvasImmediateRenderer.prototype.drawRings_ = function drawRings_(flatCoordinates, offset, ends, stride) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n    }\n    return offset;\n  };\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.drawCircle = function drawCircle(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      var pixelCoordinates = transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);\n      var dx = pixelCoordinates[2] - pixelCoordinates[0];\n      var dy = pixelCoordinates[3] - pixelCoordinates[1];\n      var radius = Math.sqrt(dx * dx + dy * dy);\n      var context = this.context_;\n      context.beginPath();\n      context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  };\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.setStyle = function setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  };\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.drawGeometry = function drawGeometry(geometry) {\n    var type = geometry.getType();\n    switch (type) {\n      case GeometryType.POINT:\n        this.drawPoint( /** @type {import(\"../../geom/Point.js\").default} */geometry);\n        break;\n      case GeometryType.LINE_STRING:\n        this.drawLineString( /** @type {import(\"../../geom/LineString.js\").default} */geometry);\n        break;\n      case GeometryType.POLYGON:\n        this.drawPolygon( /** @type {import(\"../../geom/Polygon.js\").default} */geometry);\n        break;\n      case GeometryType.MULTI_POINT:\n        this.drawMultiPoint( /** @type {import(\"../../geom/MultiPoint.js\").default} */geometry);\n        break;\n      case GeometryType.MULTI_LINE_STRING:\n        this.drawMultiLineString( /** @type {import(\"../../geom/MultiLineString.js\").default} */geometry);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        this.drawMultiPolygon( /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry);\n        break;\n      case GeometryType.GEOMETRY_COLLECTION:\n        this.drawGeometryCollection( /** @type {import(\"../../geom/GeometryCollection.js\").default} */geometry);\n        break;\n      case GeometryType.CIRCLE:\n        this.drawCircle( /** @type {import(\"../../geom/Circle.js\").default} */geometry);\n        break;\n      default:\n    }\n  };\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @override\n   * @api\n   */\n  CanvasImmediateRenderer.prototype.drawFeature = function drawFeature(feature, style) {\n    var geometry = style.getGeometryFunction()(feature);\n    if (!geometry || !intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  };\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawGeometryCollection = function drawGeometryCollection(geometry) {\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  };\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawPoint = function drawPoint(geometry) {\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  };\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawMultiPoint = function drawMultiPoint(geometry) {\n    var flatCoordinates = geometry.getFlatCoordinates();\n    var stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  };\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawLineString = function drawLineString(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      var context = this.context_;\n      var flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      var flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  };\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawMultiLineString = function drawMultiLineString(geometry) {\n    var geometryExtent = geometry.getExtent();\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      var context = this.context_;\n      var flatCoordinates = geometry.getFlatCoordinates();\n      var offset = 0;\n      var ends = /** @type {Array<number>} */geometry.getEnds();\n      var stride = geometry.getStride();\n      context.beginPath();\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n      }\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      var flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  };\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawPolygon = function drawPolygon(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      var context = this.context_;\n      context.beginPath();\n      this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, /** @type {Array<number>} */geometry.getEnds(), geometry.getStride());\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      var flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  };\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.drawMultiPolygon = function drawMultiPolygon(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      var context = this.context_;\n      var flatCoordinates = geometry.getOrientedFlatCoordinates();\n      var offset = 0;\n      var endss = geometry.getEndss();\n      var stride = geometry.getStride();\n      context.beginPath();\n      for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      var flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.setContextFillState_ = function setContextFillState_(fillState) {\n    var context = this.context_;\n    var contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;\n      }\n    }\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.setContextStrokeState_ = function setContextStrokeState_(strokeState) {\n    var context = this.context_;\n    var contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = /** @type {CanvasLineCap} */strokeState.lineCap;\n      if (CANVAS_LINE_DASH) {\n        context.setLineDash(strokeState.lineDash);\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      context.lineJoin = /** @type {CanvasLineJoin} */strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = context.lineCap = /** @type {CanvasLineCap} */strokeState.lineCap;\n      }\n      if (CANVAS_LINE_DASH) {\n        if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n          context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n        }\n        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n          contextStrokeState.lineDashOffset = context.lineDashOffset = strokeState.lineDashOffset;\n        }\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = context.lineJoin = /** @type {CanvasLineJoin} */strokeState.lineJoin;\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = context.miterLimit = strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  };\n\n  /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */\n  CanvasImmediateRenderer.prototype.setContextTextState_ = function setContextTextState_(textState) {\n    var context = this.context_;\n    var contextTextState = this.contextTextState_;\n    var textAlign = textState.textAlign ? textState.textAlign : defaultTextAlign;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = /** @type {CanvasTextAlign} */textAlign;\n      context.textBaseline = /** @type {CanvasTextBaseline} */textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = context.textAlign = /** @type {CanvasTextAlign} */textAlign;\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = context.textBaseline = /** @type {CanvasTextBaseline} */textState.textBaseline;\n      }\n    }\n  };\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.setFillStrokeStyle = function setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      var fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle)\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      var strokeStyleColor = strokeStyle.getColor();\n      var strokeStyleLineCap = strokeStyle.getLineCap();\n      var strokeStyleLineDash = strokeStyle.getLineDash();\n      var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      var strokeStyleLineJoin = strokeStyle.getLineJoin();\n      var strokeStyleWidth = strokeStyle.getWidth();\n      var strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      this.strokeState_ = {\n        lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap,\n        lineDash: strokeStyleLineDash ? strokeStyleLineDash : defaultLineDash,\n        lineDashOffset: strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset,\n        lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin,\n        lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth),\n        miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit,\n        strokeStyle: asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle)\n      };\n    }\n  };\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.setImageStyle = function setImageStyle(imageStyle) {\n    if (!imageStyle) {\n      this.image_ = null;\n    } else {\n      var imageAnchor = imageStyle.getAnchor();\n      // FIXME pixel ratio\n      var imageImage = imageStyle.getImage(1);\n      var imageOrigin = imageStyle.getOrigin();\n      var imageSize = imageStyle.getSize();\n      this.imageAnchorX_ = imageAnchor[0];\n      this.imageAnchorY_ = imageAnchor[1];\n      this.imageHeight_ = imageSize[1];\n      this.image_ = imageImage;\n      this.imageOpacity_ = imageStyle.getOpacity();\n      this.imageOriginX_ = imageOrigin[0];\n      this.imageOriginY_ = imageOrigin[1];\n      this.imageRotateWithView_ = imageStyle.getRotateWithView();\n      this.imageRotation_ = imageStyle.getRotation();\n      this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;\n      this.imageWidth_ = imageSize[0];\n    }\n  };\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @override\n   */\n  CanvasImmediateRenderer.prototype.setTextStyle = function setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      var textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        var textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(textFillStyleColor ? textFillStyleColor : defaultFillStyle)\n        };\n      }\n      var textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        var textStrokeStyleColor = textStrokeStyle.getColor();\n        var textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        var textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n        var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        var textStrokeStyleWidth = textStrokeStyle.getWidth();\n        var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : defaultLineCap,\n          lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : defaultLineDashOffset,\n          lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : defaultLineJoin,\n          lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : defaultLineWidth,\n          miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : defaultMiterLimit,\n          strokeStyle: asColorLike(textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle)\n        };\n      }\n      var textFont = textStyle.getFont();\n      var textOffsetX = textStyle.getOffsetX();\n      var textOffsetY = textStyle.getOffsetY();\n      var textRotateWithView = textStyle.getRotateWithView();\n      var textRotation = textStyle.getRotation();\n      var textScale = textStyle.getScale();\n      var textText = textStyle.getText();\n      var textTextAlign = textStyle.getTextAlign();\n      var textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : defaultFont,\n        textAlign: textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n        textBaseline: textTextBaseline !== undefined ? textTextBaseline : defaultTextBaseline\n      };\n      this.text_ = textText !== undefined ? textText : '';\n      this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = this.pixelRatio_ * (textScale !== undefined ? textScale : 1);\n    }\n  };\n  return CanvasImmediateRenderer;\n}(VectorContext);\nexport default CanvasImmediateRenderer;","map":{"version":3,"sources":["../../../../src/ol/render/canvas/Immediate.js"],"names":["super","const","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\nimport {equals} from '../../array.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {intersects} from '../../extent.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {CANVAS_LINE_DASH} from '../../has.js';\nimport VectorContext from '../VectorContext.js';\nimport {defaultTextAlign, defaultFillStyle, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle, defaultTextBaseline, defaultFont} from '../canvas.js';\nimport {create as createTransform, compose as composeTransform} from '../../transform.js';\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nclass CanvasImmediateRenderer extends VectorContext {\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   */\n  constructor(context, pixelRatio, extent, transform, viewRotation) {\n    super();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageScale_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textScale_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpLocalTransform_ = createTransform();\n\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n    const pixelCoordinates = transform2D(\n      flatCoordinates, offset, end, 2, this.transform_,\n      this.pixelCoordinates_);\n    const context = this.context_;\n    const localTransform = this.tmpLocalTransform_;\n    const alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    let rotation = this.imageRotation_;\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n      if (rotation !== 0 || this.imageScale_ != 1) {\n        const centerX = x + this.imageAnchorX_;\n        const centerY = y + this.imageAnchorY_;\n        composeTransform(localTransform,\n          centerX, centerY,\n          this.imageScale_, this.imageScale_,\n          rotation,\n          -centerX, -centerY);\n        context.setTransform.apply(context, localTransform);\n      }\n      context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_,\n        this.imageWidth_, this.imageHeight_, x, y,\n        this.imageWidth_, this.imageHeight_);\n    }\n    if (rotation !== 0 || this.imageScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    const pixelCoordinates = transform2D(\n      flatCoordinates, offset, end, stride, this.transform_,\n      this.pixelCoordinates_);\n    const context = this.context_;\n    let rotation = this.textRotation_;\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n      if (rotation !== 0 || this.textScale_ != 1) {\n        const localTransform = composeTransform(this.tmpLocalTransform_,\n          x, y,\n          this.textScale_, this.textScale_,\n          rotation,\n          -x, -y);\n        context.setTransform.apply(context, localTransform);\n      }\n      if (this.textStrokeState_) {\n        context.strokeText(this.text_, x, y);\n      }\n      if (this.textFillState_) {\n        context.fillText(this.text_, x, y);\n      }\n    }\n    if (rotation !== 0 || this.textScale_ != 1) {\n      context.setTransform(1, 0, 0, 1, 0, 0);\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    const context = this.context_;\n    const pixelCoordinates = transform2D(\n      flatCoordinates, offset, end, stride, this.transform_,\n      this.pixelCoordinates_);\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    let length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (let i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawRings_(flatCoordinates, offset, ends, stride) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n    }\n    return offset;\n  }\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @override\n   * @api\n   */\n  drawCircle(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const pixelCoordinates = transformGeom2D(\n        geometry, this.transform_, this.pixelCoordinates_);\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\n      const radius = Math.sqrt(dx * dx + dy * dy);\n      const context = this.context_;\n      context.beginPath();\n      context.arc(\n        pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  }\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @override\n   * @api\n   */\n  setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  }\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @override\n   * @api\n   */\n  drawGeometry(geometry) {\n    const type = geometry.getType();\n    switch (type) {\n      case GeometryType.POINT:\n        this.drawPoint(/** @type {import(\"../../geom/Point.js\").default} */ (geometry));\n        break;\n      case GeometryType.LINE_STRING:\n        this.drawLineString(/** @type {import(\"../../geom/LineString.js\").default} */ (geometry));\n        break;\n      case GeometryType.POLYGON:\n        this.drawPolygon(/** @type {import(\"../../geom/Polygon.js\").default} */ (geometry));\n        break;\n      case GeometryType.MULTI_POINT:\n        this.drawMultiPoint(/** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry));\n        break;\n      case GeometryType.MULTI_LINE_STRING:\n        this.drawMultiLineString(/** @type {import(\"../../geom/MultiLineString.js\").default} */ (geometry));\n        break;\n      case GeometryType.MULTI_POLYGON:\n        this.drawMultiPolygon(/** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry));\n        break;\n      case GeometryType.GEOMETRY_COLLECTION:\n        this.drawGeometryCollection(/** @type {import(\"../../geom/GeometryCollection.js\").default} */ (geometry));\n        break;\n      case GeometryType.CIRCLE:\n        this.drawCircle(/** @type {import(\"../../geom/Circle.js\").default} */ (geometry));\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @override\n   * @api\n   */\n  drawFeature(feature, style) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry || !intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  }\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   * @override\n   */\n  drawGeometryCollection(geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  }\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   * @override\n   */\n  drawPoint(geometry) {\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   * @override\n   */\n  drawMultiPoint(geometry) {\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   * @override\n   */\n  drawLineString(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length,\n        geometry.getStride(), false);\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   * @override\n   */\n  drawMultiLineString(geometry) {\n    const geometryExtent = geometry.getExtent();\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n      }\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  }\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   * @override\n   */\n  drawPolygon(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      context.beginPath();\n      this.drawRings_(geometry.getOrientedFlatCoordinates(),\n        0, /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   * @override\n   */\n  drawMultiPolygon(geometry) {\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\n      let offset = 0;\n      const endss = geometry.getEndss();\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */\n  setContextFillState_(fillState) {\n    const context = this.context_;\n    const contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = context.fillStyle = fillState.fillStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */\n  setContextStrokeState_(strokeState) {\n    const context = this.context_;\n    const contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);\n      if (CANVAS_LINE_DASH) {\n        context.setLineDash(strokeState.lineDash);\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = context.lineCap = /** @type {CanvasLineCap} */ (strokeState.lineCap);\n      }\n      if (CANVAS_LINE_DASH) {\n        if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n          context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n        }\n        if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n          contextStrokeState.lineDashOffset = context.lineDashOffset =\n              strokeState.lineDashOffset;\n        }\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = context.lineJoin = /** @type {CanvasLineJoin} */ (strokeState.lineJoin);\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = context.miterLimit =\n            strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = context.strokeStyle =\n            strokeState.strokeStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */\n  setContextTextState_(textState) {\n    const context = this.context_;\n    const contextTextState = this.contextTextState_;\n    const textAlign = textState.textAlign ?\n      textState.textAlign : defaultTextAlign;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\n      context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = context.textBaseline =\n          /** @type {CanvasTextBaseline} */ (textState.textBaseline);\n      }\n    }\n  }\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   * @override\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      const fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(fillStyleColor ?\n          fillStyleColor : defaultFillStyle)\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      const strokeStyleColor = strokeStyle.getColor();\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      const strokeStyleWidth = strokeStyle.getWidth();\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      this.strokeState_ = {\n        lineCap: strokeStyleLineCap !== undefined ?\n          strokeStyleLineCap : defaultLineCap,\n        lineDash: strokeStyleLineDash ?\n          strokeStyleLineDash : defaultLineDash,\n        lineDashOffset: strokeStyleLineDashOffset ?\n          strokeStyleLineDashOffset : defaultLineDashOffset,\n        lineJoin: strokeStyleLineJoin !== undefined ?\n          strokeStyleLineJoin : defaultLineJoin,\n        lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?\n          strokeStyleWidth : defaultLineWidth),\n        miterLimit: strokeStyleMiterLimit !== undefined ?\n          strokeStyleMiterLimit : defaultMiterLimit,\n        strokeStyle: asColorLike(strokeStyleColor ?\n          strokeStyleColor : defaultStrokeStyle)\n      };\n    }\n  }\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   * @override\n   */\n  setImageStyle(imageStyle) {\n    if (!imageStyle) {\n      this.image_ = null;\n    } else {\n      const imageAnchor = imageStyle.getAnchor();\n      // FIXME pixel ratio\n      const imageImage = imageStyle.getImage(1);\n      const imageOrigin = imageStyle.getOrigin();\n      const imageSize = imageStyle.getSize();\n      this.imageAnchorX_ = imageAnchor[0];\n      this.imageAnchorY_ = imageAnchor[1];\n      this.imageHeight_ = imageSize[1];\n      this.image_ = imageImage;\n      this.imageOpacity_ = imageStyle.getOpacity();\n      this.imageOriginX_ = imageOrigin[0];\n      this.imageOriginY_ = imageOrigin[1];\n      this.imageRotateWithView_ = imageStyle.getRotateWithView();\n      this.imageRotation_ = imageStyle.getRotation();\n      this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;\n      this.imageWidth_ = imageSize[0];\n    }\n  }\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @override\n   */\n  setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        const textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(textFillStyleColor ?\n            textFillStyleColor : defaultFillStyle)\n        };\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        const textStrokeStyleColor = textStrokeStyle.getColor();\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap: textStrokeStyleLineCap !== undefined ?\n            textStrokeStyleLineCap : defaultLineCap,\n          lineDash: textStrokeStyleLineDash ?\n            textStrokeStyleLineDash : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset ?\n            textStrokeStyleLineDashOffset : defaultLineDashOffset,\n          lineJoin: textStrokeStyleLineJoin !== undefined ?\n            textStrokeStyleLineJoin : defaultLineJoin,\n          lineWidth: textStrokeStyleWidth !== undefined ?\n            textStrokeStyleWidth : defaultLineWidth,\n          miterLimit: textStrokeStyleMiterLimit !== undefined ?\n            textStrokeStyleMiterLimit : defaultMiterLimit,\n          strokeStyle: asColorLike(textStrokeStyleColor ?\n            textStrokeStyleColor : defaultStrokeStyle)\n        };\n      }\n      const textFont = textStyle.getFont();\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      const textScale = textStyle.getScale();\n      const textText = textStyle.getText();\n      const textTextAlign = textStyle.getTextAlign();\n      const textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ?\n          textFont : defaultFont,\n        textAlign: textTextAlign !== undefined ?\n          textTextAlign : defaultTextAlign,\n        textBaseline: textTextBaseline !== undefined ?\n          textTextBaseline : defaultTextBaseline\n      };\n      this.text_ = textText !== undefined ? textText : '';\n      this.textOffsetX_ =\n          textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;\n      this.textOffsetY_ =\n          textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;\n      this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?\n        textScale : 1);\n    }\n  }\n}\n\n\nexport default CanvasImmediateRenderer;\n"]},"metadata":{},"sourceType":"module"}