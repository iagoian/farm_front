{"ast":null,"code":"import _assertThisInitialized from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\nvar WindowToggleOperator = /*#__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    _classCallCheck(this, WindowToggleOperator);\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n  _createClass(WindowToggleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n  }]);\n  return WindowToggleOperator;\n}();\nvar WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(WindowToggleSubscriber, _OuterSubscriber);\n  var _super = _createSuper(WindowToggleSubscriber);\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this;\n    _classCallCheck(this, WindowToggleSubscriber);\n    _this = _super.call(this, destination);\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n    _this.add(_this.openSubscription = subscribeToResult(_assertThisInitialized(_this), openings, openings));\n    return _this;\n  }\n  _createClass(WindowToggleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n      if (contexts) {\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n          contexts[i].window.next(value);\n        }\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var contexts = this.contexts;\n      this.contexts = null;\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.error(err);\n          context.subscription.unsubscribe();\n        }\n      }\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts;\n      this.contexts = null;\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.complete();\n          context.subscription.unsubscribe();\n        }\n      }\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var contexts = this.contexts;\n      this.contexts = null;\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.unsubscribe();\n          context.subscription.unsubscribe();\n        }\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      if (outerValue === this.openings) {\n        var closingNotifier;\n        try {\n          var closingSelector = this.closingSelector;\n          closingNotifier = closingSelector(innerValue);\n        } catch (e) {\n          return this.error(e);\n        }\n        var window = new Subject();\n        var subscription = new Subscription();\n        var context = {\n          window: window,\n          subscription: subscription\n        };\n        this.contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          innerSubscription.context = context;\n          subscription.add(innerSubscription);\n        }\n        this.destination.next(window);\n      } else {\n        this.closeWindow(this.contexts.indexOf(outerValue));\n      }\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(inner) {\n      if (inner !== this.openSubscription) {\n        this.closeWindow(this.contexts.indexOf(inner.context));\n      }\n    }\n  }, {\n    key: \"closeWindow\",\n    value: function closeWindow(index) {\n      if (index === -1) {\n        return;\n      }\n      var contexts = this.contexts;\n      var context = contexts[index];\n      var window = context.window,\n        subscription = context.subscription;\n      contexts.splice(index, 1);\n      window.complete();\n      subscription.unsubscribe();\n    }\n  }]);\n  return WindowToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/windowToggle.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    _next(value) {\n        const { contexts } = this;\n        if (contexts) {\n            const len = contexts.length;\n            for (let i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    }\n    _error(err) {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        super._error(err);\n    }\n    _complete() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            let closingNotifier;\n            try {\n                const { closingSelector } = this;\n                closingNotifier = closingSelector(innerValue);\n            }\n            catch (e) {\n                return this.error(e);\n            }\n            const window = new Subject();\n            const subscription = new Subscription();\n            const context = { window, subscription };\n            this.contexts.push(context);\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\n            if (innerSubscription.closed) {\n                this.closeWindow(this.contexts.length - 1);\n            }\n            else {\n                innerSubscription.context = context;\n                subscription.add(innerSubscription);\n            }\n            this.destination.next(window);\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    }\n    notifyError(err) {\n        this.error(err);\n    }\n    notifyComplete(inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    }\n    closeWindow(index) {\n        if (index === -1) {\n            return;\n        }\n        const { contexts } = this;\n        const context = contexts[index];\n        const { window, subscription } = context;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    }\n}\n//# sourceMappingURL=windowToggle.js.map"]},"metadata":{},"sourceType":"module"}