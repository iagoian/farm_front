{"ast":null,"code":"import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer() {\n  var dueTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var periodOrScheduler = arguments.length > 1 ? arguments[1] : undefined;\n  var scheduler = arguments.length > 2 ? arguments[2] : undefined;\n  var period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler;\n  }\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n  return new Observable(function (subscriber) {\n    var due = isNumeric(dueTime) ? dueTime : +dueTime - scheduler.now();\n    return scheduler.schedule(dispatch, due, {\n      index: 0,\n      period: period,\n      subscriber: subscriber\n    });\n  });\n}\nfunction dispatch(state) {\n  var index = state.index,\n    period = state.period,\n    subscriber = state.subscriber;\n  subscriber.next(index);\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n  state.index = index + 1;\n  this.schedule(state, period);\n}","map":{"version":3,"sources":["../../../src/internal/observable/timer.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,eAAe;AAE1C,SAAS,KAAK,QAAQ,oBAAoB;AAC1C,SAAS,SAAS,QAAQ,mBAAmB;AAC7C,SAAS,WAAW,QAAQ,qBAAqB;AAqDjD,OAAM,SAAU,KAAK,GAE0B;EAAA,IAFzB,OAAA,uEAAyB,CAAC;EAAA,IAC1B,iBAA0C;EAAA,IAC1C,SAAyB;EAC7C,IAAI,MAAM,GAAG,CAAC,CAAC;EACf,IAAI,SAAS,CAAC,iBAAiB,CAAC,EAAE;IAChC,MAAM,GAAG,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,iBAAiB,CAAC;GACzE,MAAM,IAAI,WAAW,CAAC,iBAAiB,CAAC,EAAE;IACzC,SAAS,GAAG,iBAAwB;EACrC;EAED,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;IAC3B,SAAS,GAAG,KAAK;EAClB;EAED,OAAO,IAAI,UAAU,CAAC,UAAA,UAAU,EAAG;IACjC,IAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,GACzB,OAAkB,GAClB,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,EAAG;IAEhC,OAAO,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;MACvC,KAAK,EAAE,CAAC;MAAE,MAAM,EAAN,MAAM;MAAE,UAAU,EAAV;KACnB,CAAC;EACJ,CAAC,CAAC;AACJ;AAQA,SAAS,QAAQ,CAAoC,KAAiB,EAAA;EACpE,IAAQ,KAAK,GAAyB,KAAK,CAAnC,KAAK;IAAE,MAAM,GAAiB,KAAK,CAA5B,MAAM;IAAE,UAAU,GAAK,KAAK,CAApB,UAAU;EACjC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;EAEtB,IAAI,UAAU,CAAC,MAAM,EAAE;IACrB;GACD,MAAM,IAAI,MAAM,KAAK,CAAC,CAAC,EAAE;IACxB,OAAO,UAAU,CAAC,QAAQ,EAAE;EAC7B;EAED,KAAK,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC;EACvB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;AAC9B","sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime = 0, periodOrScheduler, scheduler) {\n    let period = -1;\n    if (isNumeric(periodOrScheduler)) {\n        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n    }\n    else if (isScheduler(periodOrScheduler)) {\n        scheduler = periodOrScheduler;\n    }\n    if (!isScheduler(scheduler)) {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        const due = isNumeric(dueTime)\n            ? dueTime\n            : (+dueTime - scheduler.now());\n        return scheduler.schedule(dispatch, due, {\n            index: 0, period, subscriber\n        });\n    });\n}\nfunction dispatch(state) {\n    const { index, period, subscriber } = state;\n    subscriber.next(index);\n    if (subscriber.closed) {\n        return;\n    }\n    else if (period === -1) {\n        return subscriber.complete();\n    }\n    state.index = index + 1;\n    this.schedule(state, period);\n}\n//# sourceMappingURL=timer.js.map"]},"metadata":{},"sourceType":"module"}