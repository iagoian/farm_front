{"ast":null,"code":"/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\n\nimport { TRUE } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport { get as getProjection } from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n/**\n * @enum {string}\n */\nvar DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nvar DragAndDropEvent = /*@__PURE__*/function (Event) {\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n    Event.call(this, type);\n\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    this.features = opt_features;\n\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    this.file = file;\n\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    this.projection = opt_projection;\n  }\n  if (Event) DragAndDropEvent.__proto__ = Event;\n  DragAndDropEvent.prototype = Object.create(Event && Event.prototype);\n  DragAndDropEvent.prototype.constructor = DragAndDropEvent;\n  return DragAndDropEvent;\n}(Event);\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires DragAndDropEvent\n */\nvar DragAndDrop = /*@__PURE__*/function (Interaction) {\n  function DragAndDrop(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Interaction.call(this, {\n      handleEvent: TRUE\n    });\n\n    /**\n     * @private\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\n     */\n    this.formatConstructors_ = options.formatConstructors ? options.formatConstructors : [];\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = options.projection ? getProjection(options.projection) : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.dropListenKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    this.source_ = options.source || null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target = options.target ? options.target : null;\n  }\n  if (Interaction) DragAndDrop.__proto__ = Interaction;\n  DragAndDrop.prototype = Object.create(Interaction && Interaction.prototype);\n  DragAndDrop.prototype.constructor = DragAndDrop;\n\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  DragAndDrop.prototype.handleResult_ = function handleResult_(file, event) {\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n    var formatConstructors = this.formatConstructors_;\n    var features = [];\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      var format = new formatConstructors[i]();\n      features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n    this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n  };\n\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.registerListeners_ = function registerListeners_() {\n    var map = this.getMap();\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [listen(dropArea, EventType.DROP, handleDrop, this), listen(dropArea, EventType.DRAGENTER, handleStop, this), listen(dropArea, EventType.DRAGOVER, handleStop, this), listen(dropArea, EventType.DROP, handleStop, this)];\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragAndDrop.prototype.setActive = function setActive(active) {\n    Interaction.prototype.setActive.call(this, active);\n    if (active) {\n      this.registerListeners_();\n    } else {\n      this.unregisterListeners_();\n    }\n  };\n\n  /**\n   * @inheritDoc\n   */\n  DragAndDrop.prototype.setMap = function setMap(map) {\n    this.unregisterListeners_();\n    Interaction.prototype.setMap.call(this, map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  DragAndDrop.prototype.tryReadFeatures_ = function tryReadFeatures_(format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  };\n\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.unregisterListeners_ = function unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n  return DragAndDrop;\n}(Interaction);\n\n/**\n * @param {DragEvent} event Event.\n * @this {DragAndDrop}\n */\nfunction handleDrop(event) {\n  var files = event.dataTransfer.files;\n  for (var i = 0, ii = files.length; i < ii; ++i) {\n    var file = files.item(i);\n    var reader = new FileReader();\n    reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n    reader.readAsText(file);\n  }\n}\n\n/**\n * @param {DragEvent} event Event.\n */\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\nexport default DragAndDrop;","map":{"version":3,"sources":["../../../src/ol/interaction/DragAndDrop.js"],"names":["const","super","let"],"mappings":"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","sourcesContent":["/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\n\nimport {TRUE} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport {get as getProjection} from '../proj.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n\n/**\n * @enum {string}\n */\nconst DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nclass DragAndDropEvent extends Event {\n\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>=} opt_features Features.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   */\n  constructor(type, file, opt_features, opt_projection) {\n\n    super(type);\n\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    this.features = opt_features;\n\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    this.file = file;\n\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    this.projection = opt_projection;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires DragAndDropEvent\n */\nclass DragAndDrop extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super({\n      handleEvent: TRUE\n    });\n\n    /**\n     * @private\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\n     */\n    this.formatConstructors_ = options.formatConstructors ?\n      options.formatConstructors : [];\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = options.projection ?\n      getProjection(options.projection) : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.dropListenKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    this.source_ = options.source || null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target = options.target ? options.target : null;\n\n  }\n\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  handleResult_(file, event) {\n    const result = event.target.result;\n    const map = this.getMap();\n    let projection = this.projection_;\n    if (!projection) {\n      const view = map.getView();\n      projection = view.getProjection();\n    }\n\n    const formatConstructors = this.formatConstructors_;\n    let features = [];\n    for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      const format = new formatConstructors[i]();\n      features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n      if (features && features.length > 0) {\n        break;\n      }\n    }\n    if (this.source_) {\n      this.source_.clear();\n      this.source_.addFeatures(features);\n    }\n    this.dispatchEvent(\n      new DragAndDropEvent(\n        DragAndDropEventType.ADD_FEATURES, file,\n        features, projection));\n  }\n\n  /**\n   * @private\n   */\n  registerListeners_() {\n    const map = this.getMap();\n    if (map) {\n      const dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [\n        listen(dropArea, EventType.DROP, handleDrop, this),\n        listen(dropArea, EventType.DRAGENTER, handleStop, this),\n        listen(dropArea, EventType.DRAGOVER, handleStop, this),\n        listen(dropArea, EventType.DROP, handleStop, this)\n      ];\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setActive(active) {\n    super.setActive(active);\n    if (active) {\n      this.registerListeners_();\n    } else {\n      this.unregisterListeners_();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMap(map) {\n    this.unregisterListeners_();\n    super.setMap(map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  }\n\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  tryReadFeatures_(format, text, options) {\n    try {\n      return format.readFeatures(text, options);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  }\n}\n\n\n/**\n * @param {DragEvent} event Event.\n * @this {DragAndDrop}\n */\nfunction handleDrop(event) {\n  const files = event.dataTransfer.files;\n  for (let i = 0, ii = files.length; i < ii; ++i) {\n    const file = files.item(i);\n    const reader = new FileReader();\n    reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n    reader.readAsText(file);\n  }\n}\n\n\n/**\n * @param {DragEvent} event Event.\n */\nfunction handleStop(event) {\n  event.stopPropagation();\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'copy';\n}\n\n\nexport default DragAndDrop;\n"]},"metadata":{},"sourceType":"module"}