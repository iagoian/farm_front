{"ast":null,"code":"import _inherits from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/dev-faculdade/Portifolio/Teste-Job-V2/Farm/farm_front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\nexport var MergeScanOperator = /*#__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    _classCallCheck(this, MergeScanOperator);\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n  _createClass(MergeScanOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n  }]);\n  return MergeScanOperator;\n}();\nexport var MergeScanSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(MergeScanSubscriber, _SimpleOuterSubscribe);\n  var _super = _createSuper(MergeScanSubscriber);\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this;\n    _classCallCheck(this, MergeScanSubscriber);\n    _this = _super.call(this, destination);\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n  _createClass(MergeScanSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        var index = this.index++;\n        var destination = this.destination;\n        var ish;\n        try {\n          var accumulator = this.accumulator;\n          ish = accumulator(this.acc, value, index);\n        } catch (e) {\n          return destination.error(e);\n        }\n        this.active++;\n        this._innerSub(ish);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n      if (this.active === 0 && this.buffer.length === 0) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n        this.destination.complete();\n      }\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      var destination = this.destination;\n      this.acc = innerValue;\n      this.hasValue = true;\n      destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n        this.destination.complete();\n      }\n    }\n  }]);\n  return MergeScanSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"sources":["../../../src/internal/operators/mergeScan.ts"],"names":[],"mappings":"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","sourcesContent":["import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const destination = this.destination;\n            let ish;\n            try {\n                const { accumulator } = this;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeScan.js.map"]},"metadata":{},"sourceType":"module"}