{"ast":null,"code":"/**\n * @module ol/rotationconstraint\n */\nimport { toRadians } from './math.js';\n\n/**\n * @typedef {function((number|undefined), number): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation, delta) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation, delta) {\n  if (rotation !== undefined) {\n    return rotation + delta;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  var theta = 2 * Math.PI / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, delta) {\n      if (rotation !== undefined) {\n        rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number=} opt_tolerance Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n  var tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, delta) {\n      if (rotation !== undefined) {\n        if (Math.abs(rotation + delta) <= tolerance) {\n          return 0;\n        } else {\n          return rotation + delta;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"sources":["../../src/ol/rotationconstraint.js"],"names":["const"],"mappings":"AAAA;;;AAGA,SAAQ,SAAS,QAAO,WAAW;;;;;;;;;;;AAanC,OAAO,SAAS,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE;EACvC,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,OAAO,CAAC;GACT,MAAM;IACL,OAAO,SAAS;EACjB;AACF;;;;;;;AAQD,OAAO,SAAS,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE;EACpC,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,OAAO,QAAQ,GAAG,KAAK;GACxB,MAAM;IACL,OAAO,SAAS;EACjB;AACF;;;;;;AAOD,OAAO,SAAS,aAAa,CAAC,CAAC,EAAE;EAC/BA,IAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC;EAC7B;;;;;;IAME,UAAS,QAAQ,EAAE,KAAK,EAAE;MACxB,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,KAAK,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,KAAK;QAC/D,OAAO,QAAQ;OAChB,MAAM;QACL,OAAO,SAAS;MACjB;;EACF;AACJ;;;;;;AAOD,OAAO,SAAS,gBAAgB,CAAC,aAAa,EAAE;EAC9CA,IAAM,SAAS,GAAG,aAAa,IAAI,SAAS,CAAC,CAAC,CAAC;EAC/C;;;;;;IAME,UAAS,QAAQ,EAAE,KAAK,EAAE;MACxB,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,SAAS,EAAE;UAC3C,OAAO,CAAC;SACT,MAAM;UACL,OAAO,QAAQ,GAAG,KAAK;QACxB;OACF,MAAM;QACL,OAAO,SAAS;MACjB;;EACF;AACJ","sourcesContent":["/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n\n/**\n * @typedef {function((number|undefined), number): (number|undefined)} Type\n */\n\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation, delta) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @param {number} delta Delta.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation, delta) {\n  if (rotation !== undefined) {\n    return rotation + delta;\n  } else {\n    return undefined;\n  }\n}\n\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = 2 * Math.PI / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function(rotation, delta) {\n      if (rotation !== undefined) {\n        rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    });\n}\n\n\n/**\n * @param {number=} opt_tolerance Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n  const tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {number} delta Delta.\n     * @return {number|undefined} Rotation.\n     */\n    function(rotation, delta) {\n      if (rotation !== undefined) {\n        if (Math.abs(rotation + delta) <= tolerance) {\n          return 0;\n        } else {\n          return rotation + delta;\n        }\n      } else {\n        return undefined;\n      }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}